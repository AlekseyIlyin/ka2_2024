#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОписаниеПеременных

//@skip-warning
Перем мСтруктураКэшДанных;

#КонецОбласти
	
#Область СлужебныйПрограммныйИнтерфейс

#Область ДополнительныеОтчетыИОбработки

Функция ЗаголовокФормы() Экспорт

	СведенияОВнешнейОбработке = СведенияОВнешнейОбработке();
	Результат = "v." + СведенияОВнешнейОбработке.Версия + " " + СведенияОВнешнейОбработке.Наименование;

	Возврат Результат;

КонецФункции

Функция СведенияОВнешнейОбработке() Экспорт

	Версии = Версии();
	МетаОбъект = МетаОбъект();

	Результат = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(Версии.БСП);
	Результат.Информация = МетаОбъект.Синоним;
	Результат.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	Результат.Версия = Версии.Обработка;
	Результат.БезопасныйРежим = Ложь;
	Результат.Наименование = МетаОбъект.Синоним;

	Команда = Результат.Команды.Добавить();
	Команда.Представление = "Возврат переданных остатков (Задание)";
	Команда.Идентификатор = "ВозвратПереданныхОстатковЗадание";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	Команда.ПоказыватьОповещение = Ложь;

	Команда = Результат.Команды.Добавить();
	Команда.Представление = "Возврат переданных остатков (текущая дата)";
	Команда.Идентификатор = "ВозвратПереданныхОстатков";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	Команда.ПоказыватьОповещение = Истина;

	Команда = Результат.Команды.Добавить();
	Команда.Представление = "Ручной запуск";
	Команда.Идентификатор = "Форма";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовКлиентскогоМетода();
	Команда.ПоказыватьОповещение = Истина;

	Возврат Результат;

КонецФункции

Функция МетаОбъект() Экспорт

	Если НЕ мСтруктураКэшДанных.Свойство("МетаОбъект") Тогда
		мСтруктураКэшДанных.Вставить("МетаОбъект", Метаданные());

	КонецЕсли;

	Возврат мСтруктураКэшДанных.МетаОбъект;

КонецФункции

Процедура ЗагрузитьНастройки() Экспорт
	//@skip-check undefined-variable
	рвк_ДополнительныеОтчетыИОбработки.ЗагрузитьНастройки(ЭтотОбъект);
КонецПроцедуры

Процедура ЗаписатьНастройки() Экспорт
	//@skip-check undefined-variable
	рвк_ДополнительныеОтчетыИОбработки.ЗаписатьНастройки(ЭтотОбъект);
КонецПроцедуры

Функция ИменаНастроек() Экспорт
	Результат = Новый Массив;
	Результат.Добавить("СоглашениеИнтеркампани");
	Результат.Добавить("ДопСвойствоПриобретение");
	Возврат Результат;
КонецФункции

#КонецОбласти

Процедура Обновить() Экспорт
	
	Если Не ЗначениеЗаполнено(СоглашениеИнтеркампани) Тогда
		ОбщегоНазначения.СообщитьПользователю("Не указано соглашение интеркампани");
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДопСвойствоПриобретение) Тогда
		ОбщегоНазначения.СообщитьПользователю("Не указано ДопСвойствоПриобретение");
		Возврат;
	КонецЕсли;
		
	РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СоглашениеИнтеркампани, "Организация");
	
	КэшИдентификаторов = Новый Соответствие;
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса_Обновить_Остатки();
	Запрос.УстановитьПараметр("Датасреза", Дата);
	Запрос.УстановитьПараметр("ОрганизацияПокупатель", РеквизитыСоглашения.Организация);
	Запрос.УстановитьПараметр("СоглашениеИнтеркампани", СоглашениеИнтеркампани);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОстаткиПоПриобретениям = РезультатЗапроса.Выгрузить();
	ОстаткиПоПриобретениям.Колонки.Добавить("ИдентификаторПриобретения", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36, ДопустимаяДлина.Фиксированная)));
	Для Каждого СтрокаОстатки Из ОстаткиПоПриобретениям Цикл
		Приобретение = СтрокаОстатки.Приобретение;
		Идентификатор = КэшИдентификаторов[Приобретение];
		Если Идентификатор = Неопределено Тогда
			Идентификатор = рвк_ОбщегоНазначения.ИдентификаторОбъекта(Приобретение);
			КэшИдентификаторов.Вставить(Приобретение, Идентификатор);
		КонецЕсли;
		СтрокаОстатки.ИдентификаторПриобретения = Идентификатор;
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса_Обновить_ДокументыПередачи();
	Запрос.УстановитьПараметр("ТЗ_ТаблицаОстатков", ОстаткиПоПриобретениям);
	Запрос.УстановитьПараметр("ДопСвойствоПриобретение", ДопСвойствоПриобретение);
	ТаблицаОстаткиПоПередаче = Запрос.Выполнить().Выгрузить();
	Остатки.Загрузить(ТаблицаОстаткиПоПередаче);
	
КонецПроцедуры

Процедура Обработать() Экспорт
	
	СтрокиПоДокументам = Новый Соответствие;
	
	Отбор = Новый Структура("Пометка", Истина);
	ОтмеченныеСтрокиОстатки = Остатки.Выгрузить(Отбор);
	Для Каждого СтрокаОстатки Из ОтмеченныеСтрокиОстатки Цикл
		ДобавитьОстаткиПоДокументу(СтрокиПоДокументам, СтрокаОстатки.ДокументПередачи, СтрокаОстатки);
	КонецЦикла;
	
	СписокУдаляемыхСтрок = Новый Массив;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для Каждого ОстаткиПоДокументу Из СтрокиПоДокументам Цикл
		ДокументПередачи = ОстаткиПоДокументу.Ключ;
		ОстаткиПоДокументу = ОстаткиПоДокументу.Значение;
		ДокументПередачиОбъект = ДокументПередачи.ПолучитьОбъект();
		Для Каждого ОстатокПоСтроке Из ОстаткиПоДокументу Цикл
			УдалитьКоличествоПоСТрокеДокумента(ДокументПередачиОбъект, ОстатокПоСтроке, СписокУдаляемыхСтрок, КэшированныеЗначения);
		КонецЦикла;
		Для Каждого УдаляемаяСтрока Из СписокУдаляемыхСтрок Цикл
			ДокументПередачиОбъект.Товары.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		ДокументПередачиОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Сервис

Функция Версии()

	Результат = Новый Структура();
	Результат.Вставить("Обработка", "1.00");
	Результат.Вставить("Конфигурация", "2.5.12.195");
	Результат.Вставить("БСП", "3.1.1.136");
	Возврат Результат;

КонецФункции

Процедура ДобавитьОстаткиПоДокументу(СтрокиПоДокументам, Документ, Строка)
	
	СтрокиПоДокументу = СтрокиПоДокументам[Документ];
	Если СтрокиПоДокументу = Неопределено Тогда
		СтрокиПоДокументу = Новый ТаблицаЗначений;
		СтрокиПоДокументу.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		СтрокиПоДокументу.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
		СтрокиПоДокументам.Вставить(Документ, СтрокиПоДокументу);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокиПоДокументу.Добавить(), Строка);
	
КонецПроцедуры

Процедура УдалитьКоличествоПоСТрокеДокумента(ДокументПередачиОбъект, ОстатокПоСтроке, СписокУдаляемыхСтрок, КэшированныеЗначения)
	
	Отбор = Новый Структура("Номенклатура", ОстатокПоСтроке.Номенклатура);
	СтрокиНоменклатуры = ДокументПередачиОбъект.Товары.НайтиСтроки(Отбор);
	КоличествоОбщее = ОстатокПоСтроке.Передано;
	Для Каждого СтрокаТовары Из СтрокиНоменклатуры Цикл
		Если КоличествоОбщее = 0 Тогда
			Прервать;
		КонецЕсли;
		КоличествоСписания = Мин(КоличествоОбщее, СтрокаТовары.Количество);
		СтрокаТовары.Количество = СтрокаТовары.Количество - КоличествоСписания; 
		Если СтрокаТовары.Количество = 0 Тогда
			СписокУдаляемыхСтрок.Добавить(СтрокаТовары);
		Иначе
			СтруктураДействий = Новый Структура;
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ДокументПередачиОбъект);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТовары, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		КоличествоОбщее = КоличествоОбщее - КоличествоСписания;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект, СтруктураЗаполненияБонусныхБаллов = Неопределено)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами", СтруктураЗаполненияБонусныхБаллов);
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
			Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросов

Функция ТекстЗапроса_Обновить_Остатки()

	Возврат "ВЫБРАТЬ
	|	ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТоварыОрганизацийОстатки.Организация КАК Организация,
	|	ТоварыОрганизацийОстатки.КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(, Организация = &ОрганизацияПокупатель) КАК ТоварыОрганизацийОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Остатки.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ВТ_Остатки.КоличествоОстаток) КАК КоличествоКонечныйОстаток,
	|	СУММА(ТоварыОрганизацийОбороты.КоличествоПриход) КАК КоличествоПриход,
	|	ТоварыОрганизацийОбороты.Регистратор КАК Приобретение
	|ИЗ
	|	ВТ_Остатки КАК ВТ_Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Обороты(&ДатаСреза,, Регистратор,
	|			(АналитикаУчетаНоменклатуры, Организация) В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВТ_Остатки.АналитикаУчетаНоменклатуры,
	|				ВТ_Остатки.Организация
	|			ИЗ
	|				ВТ_Остатки КАК ВТ_Остатки)) КАК ТоварыОрганизацийОбороты
	|		ПО ТоварыОрганизацийОбороты.АналитикаУчетаНоменклатуры = ВТ_Остатки.АналитикаУчетаНоменклатуры
	|		И ТоварыОрганизацийОбороты.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|ГДЕ
	|	ВЫРАЗИТЬ(ТоварыОрганизацийОбороты.Регистратор КАК
	|		Документ.ПриобретениеТоваровУслуг).Соглашение = &СоглашениеИнтеркампани
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Остатки.АналитикаУчетаНоменклатуры.Номенклатура,
	|	ТоварыОрганизацийОбороты.Регистратор";
	
КонецФункции

Функция ТекстЗапроса_Обновить_ДокументыПередачи()
	Возврат "ВЫБРАТЬ
	|	ТЗ_ТаблицаОстатков.Номенклатура,
	|	ТЗ_ТаблицаОстатков.КоличествоПриход,
	|	ТЗ_ТаблицаОстатков.КоличествоКонечныйОстаток,
	|	ТЗ_ТаблицаОстатков.ИдентификаторПриобретения
	|ПОМЕСТИТЬ ВТ_ОстаткиПоПриобретениям
	|ИЗ
	|	&ТЗ_ТаблицаОстатков КАК ТЗ_ТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Пометка,
	|	ВТ_ОстаткиПоПриобретениям.Номенклатура КАК Номенклатура,
	|	ВТ_ОстаткиПоПриобретениям.КоличествоКонечныйОстаток КАК Остаток,
	|	РеализацияТоваровУслуг.Ссылка КАК ДокументПередачи,
	|	ВТ_ОстаткиПоПриобретениям.КоличествоПриход КАК Передано
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДС_Приобретение
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОстаткиПоПриобретениям КАК ВТ_ОстаткиПоПриобретениям
	|			ПО ВТ_ОстаткиПоПриобретениям.ИдентификаторПриобретения = ВЫРАЗИТЬ(ДС_Приобретение.Значение КАК СТРОКА(36))
	|		ПО РеализацияТоваровУслуг.Ссылка = ДС_Приобретение.Объект
	|		И ДС_Приобретение.Свойство = &ДопСвойствоПриобретение
	|ГДЕ
	|	РеализацияТоваровУслуг.Проведен";
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

мСтруктураКэшДанных = Новый Структура;

Дата = ТекущаяДатаСеанса();

#КонецОбласти

#КонецЕсли