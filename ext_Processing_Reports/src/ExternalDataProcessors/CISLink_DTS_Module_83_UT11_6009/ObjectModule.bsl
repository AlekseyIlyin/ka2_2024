Перем мКэш;

Функция СведенияОВнешнейОбработке() Экспорт
	
	#Область ФормыУправляемые_Макроподстановка
	СведенияОВнешнейОбработке = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.2");
	#КонецОбласти
	
	#Область НеРежимРаботыВОблаке
	СведенияОВнешнейОбработке.БезопасныйРежим		= Ложь;
	#КонецОбласти
	СведенияОВнешнейОбработке.Версия				= "24.08.23.1";
	#Область ФормыУправляемые_Макроподстановка
	СведенияОВнешнейОбработке.Вид					= ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	#КонецОбласти

	Команда = СведенияОВнешнейОбработке.Команды.Добавить();
	Команда.Идентификатор			= "ВыгрузкаДанных";
	Команда.Представление			= "[1] Сислинк. Выгрузить данные в ручном режиме";
	Команда.ПоказыватьОповещение	= Истина;
	Команда.Использование			= ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();

	Команда = СведенияОВнешнейОбработке.Команды.Добавить();
	Команда.Идентификатор			= "ВыгрузкаДанных_АвтоРежим_6009";
	Команда.Представление			= "[2] Сислинк. Выгрузить данные для ""Ekoprom"" в автоматическом режиме";
	Команда.ПоказыватьОповещение	= Истина;
	Команда.Использование			= ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();

	СведенияОВнешнейОбработке.Наименование	= "Сислинк DTS Module (UT 11, КА 2, ERP). Выгрузка для Ekoprom";
	СведенияОВнешнейОбработке.Информация		= "CISLink.DTS.Module (UT 11, КА 2, ERP)
		|Редакция от 2022/03/21
		|
		|Производители (1):
		|Ekoprom";
	
#Область ФормыУправляемые
	
	#Область НеРежимРаботыВОблаке
	#Область ФормыУправляемые_Макроподстановка
		СведенияОВнешнейОбработке.Разрешения.Добавить(
			РаботаВБезопасномРежиме.РазрешениеНаСозданиеCOMКласса(
					"WbemScripting.SWbemLocator"
				,	"{76A64158-CB41-11D1-8B02-00600806D9B6}"
				,,	"Для просмотра дерева каталогов на сервере 1С"
			)
		);
	#КонецОбласти
	#КонецОбласти
	
	#Область ФормыУправляемые_Макроподстановка
	СведенияОВнешнейОбработке.Разрешения.Добавить(
		РаботаВБезопасномРежиме.РазрешениеНаИспользованиеКаталогаВременныхФайлов(
				Истина
			,	Истина
			,	"Для выгрузки файлов отчета в случае, когда настройками не явно не задан каталог выгрузки"
		)
	);
	СведенияОВнешнейОбработке.Разрешения.Добавить(
		РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
				"FTP"
			,	"ftp.cislinkdts.com"
			,	21
			,	"FTP сервер Сислинка для отправки отчетов напрямую (без программы CisLinkFileClient)"
		)
	);
	СведенияОВнешнейОбработке.Разрешения.Добавить(
		РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
				"FTP"
			,	"b2b-kz.cislinkdts.com"
			,	21
			,	"FTP сервер Сислинка для отправки отчетов напрямую (без программы CisLinkFileClient)"
		)
	);
	СведенияОВнешнейОбработке.Разрешения.Добавить(
		РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
				"HTTPS"
			,	"dapi.cislinkdts.com"
			,	443
			,	"HTTPS сервер Сислинка для отправки отчетов напрямую (без программы CisLinkFileClient)"
		)
	);
	#КонецОбласти
	
#КонецОбласти
	
	Возврат СведенияОВнешнейОбработке;
	
КонецФункции // СведенияОВнешнейОбработке()

Процедура ВыполнитьКоманду(Знач ИдентификаторКоманды, Знач ПараметрыОбработки) Экспорт
	Перем ВсеПроизводители, manfid;
	
	ПараметрыВыгрузки = Серриализация_Загрузка();
	
	Если ИдентификаторКоманды <> "ВыгрузкаДанных_АвтоРежим" Тогда
	
		НомПоз = СтрНайтиЕх(ИдентификаторКоманды, "_", "СКонца");
		
		Если НомПоз Тогда
		
			manfid = ВЧисло(СокрЛП(Сред(ИдентификаторКоманды, НомПоз + 1)));
			
			ВсеПроизводители		= ВсеПроизводители(Истина);
			ПроизводительОписание	= ВсеПроизводители[manfid];
			
			Если ПроизводительОписание = Неопределено Тогда
			
				ВызватьИсключение "Неизвестный производитель """ + manfid + """!";
			
			КонецЕсли;
			
			Для х = - ПараметрыВыгрузки.Настройки.ВГраница() По 0 Цикл
			
				Настройка = ПараметрыВыгрузки.Настройки[-х];
				Если Настройка.manfid <> manfid или Не Настройка.НастройкаИспользуется Тогда
				
					ПараметрыВыгрузки.Настройки.Удалить(-х);
				
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЕсли;
	
	АвтообменНаСервере(ПараметрыВыгрузки);
	
КонецПроцедуры // ВыполнитьКоманду()

#Область Служебное

Функция ЕстьДокумент(Знач Имя)

	Перем ЕстьДокумент;
	
	ЕстьДокумент = Метаданные.Документы.Найти(Имя) <> Неопределено;
	
	Возврат ЕстьДокумент;

КонецФункции // ЕстьДокумент()

Функция РазделительСтрок()

	Возврат Символы.ВК + Символы.ПС;

КонецФункции // РазделительСтрок()

Функция СтрЗаменитьЕх(Знач Зн, Знач ПодстрокаПоиска, Знач ПодстрокаЗамены)
	
	Перем ЗнБыло;
	
	ЗнБыло = Зн;
	
	Зн = СтрЗаменить(Зн, ПодстрокаПоиска, ПодстрокаЗамены);
	
	Если Зн = ЗнБыло Тогда
	
		ВызватьИсключение "Замена """ + ПодстрокаПоиска + """ не выполнена";
	
	КонецЕсли;
	
	Возврат Зн;

КонецФункции // СтрЗаменитьЕх()

Функция БСП_СтаройВерсии()
	Перем Версия, БСП_СтаройВерсии;
	
	Версия = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	БСП_СтаройВерсии = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Версия, "3.0.1.999") <= 0;
	
	Возврат БСП_СтаройВерсии;

КонецФункции // БСП_СтаройВерсии()

Процедура СообщитьПользователю(Знач ТекстСообщенияПользователю, Знач КлючДанных = Неопределено,	Знач Поле = "",
	Знач ПутьКДанным = "", Отказ = Ложь)
	
	Если Не БСП_СтаройВерсии() Тогда
	
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияПользователю, КлючДанных, Поле,	ПутьКДанным, Отказ);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияПользователю, КлючДанных, Поле,	ПутьКДанным, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры // СообщитьПользователю()

Функция ВсеПроизводителиНаименование(Знач ВсеПроизводители, Знач ДлинаНаименования, Знач ШаблонНаименования, Знач Шаблон_и_ещё) Экспорт
	Перем Наименование, Зпт, Пропущено;
	
	НаименованиеДлина	= ДлинаНаименования - СтрДлина(СтрЗаменить(ШаблонНаименования, "%1", "") + СтрЗаменить(Шаблон_и_ещё, "%2", "")) - СтрДлина(Формат(ВсеПроизводители.Количество(), "ЧГ=0"));
	Наименование		= "";
	Зпт					= "";
	Пропущено			= 0;
	
	Для каждого ПроизводительОписание Из ВсеПроизводители Цикл
	
		НаименованиеНовое = Наименование + Зпт + ПроизводительОписание.Наименование;
		Если СтрДлина(НаименованиеНовое) > НаименованиеДлина Тогда
		
			Пропущено = Пропущено + 1;
			
		Иначе
			
			Наименование = НаименованиеНовое;
			Зпт = ", ";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Пропущено Тогда
	
		ШаблонНаименования = ШаблонНаименования + Шаблон_и_ещё;
	
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонНаименования
		, Наименование
		, Пропущено
	);

КонецФункции // ВсеПроизводителиНаименование()

Функция ВЧисло(Знач Зн)

	Если Не ЗначениеЗаполнено(Зн) Тогда
	
		Возврат 0;
	
	КонецЕсли;
	
	Попытка
	
		Возврат Число(Зн);
	
	Исключение
		
		СообщитьПользователю("Ошибка преобразования числа """ + Зн + """!");
		
		Возврат 0;
		
	КонецПопытки;

КонецФункции // ВЧисло()

Функция ВБулево(Знач Зн)

	Если Не ЗначениеЗаполнено(Зн) Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	
	Попытка
	
		Возврат Булево(Зн);
	
	Исключение
	КонецПопытки;
	
	Попытка
	
		Возврат Булево(ВЧисло(Зн));
	
	Исключение
	КонецПопытки;
	
	Возврат Ложь;

КонецФункции // ВБулево()

// Уничтожает временные таблицы менеджера временных таблиц.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер временных таблиц, таблицы которого нужно уничтожить.
//  СписокТаблиц - Строка - 
//	             - Массив Из Строка - имена временных таблиц для уничтожения, разделенные запятыми. Если параметр не установлен - все таблицы.
//  ИсключаяТаблицы	- Строка -
//  				- Массив Из Строка - имена временных таблиц, которые нужно оставить, разделенные запятыми.
//
Процедура УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, СписокТаблиц = Неопределено, ИсключаяТаблицы = Неопределено) Экспорт
	
	Если ИсключаяТаблицы <> Неопределено Тогда
		МассивИсключаемыхТаблиц = ?(ТипЗнч(ИсключаяТаблицы) = Тип("Массив"), ИсключаяТаблицы, СтрРазделитьЕх(ИсключаяТаблицы, ","));
	Иначе
		МассивИсключаемыхТаблиц = Новый Массив();
	КонецЕсли;
	
	Если СписокТаблиц <> Неопределено Тогда
		МассивТаблиц = ?(ТипЗнч(СписокТаблиц) = Тип("Массив"), СписокТаблиц, СтрРазделитьЕх(СписокТаблиц, ","));
	Иначе
		МассивТаблиц = Новый Массив();
		Для Каждого Таблица Из МенеджерВременныхТаблиц.Таблицы Цикл
			Если МассивИсключаемыхТаблиц.Найти(Таблица.ПолноеИмя) = Неопределено Тогда
				МассивТаблиц.Добавить(Таблица.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивТаблиц.Количество() > 0 Тогда
		ТекстЗапроса = "";
		Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
			ТекстЗапроса = ТекстЗапроса + "УНИЧТОЖИТЬ " + ИмяТаблицы + "; ";
		КонецЦикла;
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьManfid(Знач Запрос, Знач КорректныйManfid)
	
	Перем manfid;
	
	manfid = Запрос.Параметры.manfid;
	
	Если manfid <> КорректныйManfid Тогда
	
		ВызватьИсключение "Некорректный manfid = """ + manfid + """! Требуется """ + КорректныйManfid + """!";
	
	КонецЕсли;

КонецПроцедуры // ПроверитьManfid()

Функция СписокЗначенийЗначениеПоУмолчанию(Знач СписокЗначений, Знач ЗначениеПоУмолчанию = "")

	Если ТипЗнч(СписокЗначений) <> Тип("СписокЗначений")
		или Не СписокЗначений.Количество()
	Тогда
	
		Возврат ЗначениеПоУмолчанию;
	
	КонецЕсли;
	
	Возврат СписокЗначений[0].Значение;
	
КонецФункции // СписокЗначенийЗначениеПоУмолчанию()

Процедура ВТ_ЗаменитьЗначенияНаКоды(Знач Запрос, Знач ИмяВТ, Знач Колонки, Знач ХешироватьСтроки = Истина)
	
	Если ХешироватьСтроки Тогда
	
		ХешФункцияДляСтрок = ХешФункция.CRC32;
		
	Иначе
	
		ХешФункцияДляСтрок = Неопределено;
		
	КонецЕсли;

	КолонкиСписок	= Новый СписокЗначений;
	Дополнение		= СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	
	Для каждого Колонка Из СтрРазделитьЕх(СтрЗаменить(Колонки, Символы.ПС, ""), ",", Ложь) Цикл
	
		КолонкиСписок.Добавить(Колонка, Колонка + "_" + Дополнение);
	
	КонецЦикла;
	
	ВТ = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(ИмяВТ).ПолучитьДанные().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	УничтожитьВременныеТаблицы(Запрос.МенеджерВременныхТаблиц, ИмяВТ);
	
	Для каждого КолонкиСписокСтрока Из КолонкиСписок Цикл
	
		ВТ.Колонки.Добавить(КолонкиСписокСтрока.Представление, Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36, ДопустимаяДлина.Переменная)));
	
	КонецЦикла;
	
	ВТ_Копия = Новый ТаблицаЗначений;
	
	ЕстьСтрокиБесконечнойДлины = Ложь;
	
	Для каждого Колонка Из ВТ.Колонки Цикл
	
		Если Колонка.ТипЗначения.СодержитТип(Тип("Строка")) и 
			Колонка.ТипЗначения.КвалификаторыСтроки.Длина = 0
		Тогда
		
			ЕстьСтрокиБесконечнойДлины = Истина;
			
			ВТ_Копия.Колонки.Добавить(
				Колонка.Имя
				, Новый ОписаниеТипов(
					Колонка.ТипЗначения
					, , 
					, Колонка.ТипЗначения.КвалификаторыЧисла
					, Новый КвалификаторыСтроки(512, Колонка.ТипЗначения.КвалификаторыСтроки.ДопустимаяДлина)
					, Колонка.ТипЗначения.КвалификаторыДаты
				)
			);
			
		Иначе
			
			ВТ_Копия.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если ЕстьСтрокиБесконечнойДлины Тогда
	
		Для каждого ВТСтрока Из ВТ Цикл
		
			ЗаполнитьЗначенияСвойств(ВТ_Копия.Добавить(), ВТСтрока);
		
		КонецЦикла;
		
		ВТ = ВТ_Копия;
	
	КонецЕсли;
	
	Кеш = "";
	
	#Область Производитель_Не_8052
	Если Запрос.Параметры.manfid <> 8052 Тогда
		Для каждого ВТСтрока Из ВТ Цикл
		
			Для каждого КолонкиСписокСтрока Из КолонкиСписок Цикл
			
				ВТСтрока[КолонкиСписокСтрока.Представление] = ПредставлениеЗначения(
					ВТСтрока[КолонкиСписокСтрока.Значение], Кеш, ХешФункцияДляСтрок, Запрос.Параметры.ТаблицаТранслита);
			
			КонецЦикла;
		
		КонецЦикла;
	КонецЕсли;
	#КонецОбласти
	
	Для каждого КолонкиСписокСтрока Из КолонкиСписок Цикл
	
		ВТ.Колонки.Удалить(ВТ.Колонки[КолонкиСписокСтрока.Значение]);
		ВТ.Колонки[КолонкиСписокСтрока.Представление].Имя = КолонкиСписокСтрока.Значение;
	
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ВТ_" + Дополнение, ВТ);
	Запрос.Текст = "Выбрать ВТ.* ПОМЕСТИТЬ " + ИмяВТ + " из &ВТ_" + Дополнение + " КАК ВТ";
	Запрос.Выполнить();
	
	Запрос.Параметры.Удалить("ВТ_" + Дополнение);

КонецПроцедуры // ВТ_ЗаменитьЗначенияНаКоды()

Функция КонфигурацияКод()

	Возврат "UT11";

КонецФункции // КонфигурацияКод()

Функция ФормыОбычные()

	Возврат "Ложь";

КонецФункции // ФормыОбычные()

Функция ЭтоУправляемоеПриложение()

	Перем ЭтоУправляемоеПриложение;
	
	ЭтоУправляемоеПриложение = Метаданные.ОсновнойРежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение;
	
	Возврат ЭтоУправляемоеПриложение;

КонецФункции // ЭтоУправляемоеПриложение()

Функция ЗначенияРавны(Знач Зн1, Знач Зн2, Знач ИсключаемыеРеквизиты, РеквизитИмя = "")
	Перем ЗнСвойства2;
	
	РеквизитИмя	= СокрЛП(РеквизитИмя);
	Разд		= ?(РеквизитИмя = "", "", ".");
	
	Тип = ТипЗнч(Зн1);
	Если Тип <> ТипЗнч(Зн2) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Тип = Тип("Структура") Тогда
		
		Количество1 = Зн1.Количество();
		Количество2 = Зн2.Количество();
		
		Если Количество1 <> Количество2 Тогда
			
			РеквизитИмя = РеквизитИмя + "(" + Количество1 + " <> " + Количество2 + ")";
			
			Возврат Ложь;
		КонецЕсли;
		
		Для каждого КлючИЗначение1 Из Зн1 Цикл
			
			Если Не Зн2.Свойство(КлючИЗначение1.Ключ, ЗнСвойства2) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			РеквизитИмяТекущий = РеквизитИмя + Разд + КлючИЗначение1.Ключ;
			Если ИсключаемыеРеквизиты.Найти(ВРег(РеквизитИмяТекущий)) <> Неопределено Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			Если Не ЗначенияРавны(КлючИЗначение1.Значение, ЗнСвойства2, ИсключаемыеРеквизиты, РеквизитИмяТекущий) Тогда
				
				РеквизитИмя = РеквизитИмяТекущий;
				
				Возврат Ложь;
				
			КонецЕсли;
		
		КонецЦикла;
		
		Возврат Истина;
		
	ИначеЕсли Тип = Тип("СписокЗначений") Тогда
		
		Количество1 = Зн1.Количество();
		Количество2 = Зн2.Количество();
		
		Если Количество1 <> Количество2 Тогда
			
			РеквизитИмя = РеквизитИмя + "(" +Количество1 + " <> " + Количество2 + ")";
			
			Возврат Ложь;
		КонецЕсли;
		
		Для х = 0 По Количество1 - 1 Цикл
			
			СтрСп1 = Зн1[х];
			СтрСп2 = Зн2[х];
			
			//РеквизитИмяТекущий = РеквизитИмя + "[" + Формат(х, "ЧН=; ЧГ=0") + "]";
			Если ИсключаемыеРеквизиты.Найти(ВРег(РеквизитИмя)) <> Неопределено Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			Если	СтрСп1.Представление	<> СтрСп2.Представление
				или	СтрСп1.Пометка			<> СтрСп2.Пометка
				или Не ЗначенияРавны(СтрСп1.Значение, СтрСп2.Значение, ИсключаемыеРеквизиты, РеквизитИмя)
			Тогда
			
				РеквизитИмя = РеквизитИмя + "[" + Формат(х, "ЧН=; ЧГ=0") + "]";
				
				Возврат Ложь;
			
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Истина;
		
	ИначеЕсли Тип = Тип("Массив") Тогда
		
		Количество1 = Зн1.Количество();
		Количество2 = Зн2.Количество();
		
		Если Количество1 <> Количество2 Тогда
			
			РеквизитИмя = РеквизитИмя + "(" + Количество1 + " <> " + Количество2 + ")";
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Для х = 0 По Количество1 - 1 Цикл
			
			//РеквизитИмяТекущий = РеквизитИмя + "[" + Формат(х, "ЧН=; ЧГ=0") + "]";
			Если ИсключаемыеРеквизиты.Найти(ВРег(РеквизитИмя)) <> Неопределено Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			Если Не ЗначенияРавны(Зн1[х], Зн2[х], ИсключаемыеРеквизиты, РеквизитИмя) Тогда
			
				//РеквизитИмя = РеквизитИмяТекущий;
				РеквизитИмя = РеквизитИмя + "[" + Формат(х, "ЧН=; ЧГ=0") + "]";
				
				Возврат Ложь;
			
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Истина;
	КонецЕсли;

	Возврат Зн1 = Зн2;
КонецФункции // ЗначенияРавны()

Функция НастройкиИзменились(Знач НастройкиНовые) Экспорт
	Перем НастройкиСтарые, РеквизитИмя;
	
	НастройкиСтарые = Серриализация_Загрузка();
	
	ИсключаемыеРеквизиты = РазложитьСтрокуВМассивПодстрок(
		ВРег("Настройки.ДатаНач,Настройки.ДатаКон")
		, ",", Истина, Истина
	);
	
	Если ЗначенияРавны(НастройкиСтарые, НастройкиНовые, ИсключаемыеРеквизиты, РеквизитИмя) Тогда
	
		Возврат Неопределено;
	
	КонецЕсли;
	
	Возврат НастройкиНовые;
КонецФункции // НастройкиИзменились()

Функция ИмяСервера() Экспорт

	Возврат ИмяКомпьютера();

КонецФункции // ИмяСервера()

Функция ПолучитьДвоичныеДанныеИзСтрокиЕх(Знач Строка, Знач Кодировка, Знач СобственныйКонвертер_в_ANSI)

	Если Не СобственныйКонвертер_в_ANSI Или Кодировка <> КодировкаТекста.ANSI Тогда
	
		Возврат ПолучитьДвоичныеДанныеИзСтроки(Строка, Кодировка, Ложь);
	
	КонецЕсли;
	
	Возврат СобственныйКонвертер_в_ANSI(Строка);

КонецФункции // ПолучитьДвоичныеДанныеИзСтрокиЕх()

Функция СобственныйКонвертер_в_ANSI(Знач Строка_UTF16)

	Длина	= СтрДлина(Строка_UTF16);
	Буфер	= Новый БуферДвоичныхДанных(Длина, ПорядокБайтов.BigEndian);
	
	МаскаБайт1 = ЧислоИзДвоичнойСтроки("0b1111111100000000");
	МаскаБайт2 = ЧислоИзДвоичнойСтроки("0b11111111");
	
	СпецСимволы = Новый Соответствие;
	СпецСимволы.Вставить("№", 185);
	СпецСимволы.Вставить("Ё", 168);
	СпецСимволы.Вставить("ё", 184);
	
	Для х = 1 По Длина Цикл
	
		Симв		= Сред(Строка_UTF16, х, 1);
		CP1251		= СпецСимволы[Симв];
		Если CP1251 = Неопределено Тогда
		
			КодСимвола	= КодСимвола(Симв);
			
			Байт1 = ПобитовыйСдвигВправоЕх(ПобитовоеИЕх(КодСимвола, МаскаБайт1), 8);
			Байт2 = ПобитовоеИЕх(КодСимвола, МаскаБайт2);
			
			CP1251 = Байт2;
			
			Если Байт1 = 4 Тогда
			
				//Если Байт2 = 1 Тогда
				//
				//	CP1251 = 168; // Ё
				//
				//ИначеЕсли Байт2 = 81 Тогда
				//
				//	CP1251 = 184; // ё
				//	
				//Иначе
					
				CP1251 = 176 + Байт2;
					
				//КонецЕсли;
			
			КонецЕсли;
			
			Если CP1251 > 255 Тогда
			
				CP1251 = 32; // Нечитаемые символы заменяем на пробел
			
			КонецЕсли;
		КонецЕсли;
		
		Буфер.Установить(х - 1, CP1251);
		
	КонецЦикла;
	
	Возврат ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(Буфер);
	
КонецФункции // СобственныйКонвертер_в_ANSI()

Функция ЗначениеВМассиве(Знач Значение) Экспорт

	Перем Массив;
	
	Массив = Новый Массив;
	
	Массив.Добавить(Значение);
	
	Возврат Массив;

КонецФункции // ЗначениеВМассиве()

Процедура ФайлОписаниеУстановитьПредставление(Знач ФайлОписание) Экспорт

	Перем ФайлДвоичныеДанные;
	
	ФайлОписание.Свойство("ФайлДвоичныеДанные", ФайлДвоичныеДанные);
	
	Если ТипЗнч(ФайлДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
		
		//ХешФункцияCRC32 = Новый ХешированиеДанных(ХешФункция.CRC32);
		//ХешФункцияCRC32.Добавить(ФайлДвоичныеДанные);
		
		ФайлОписание.Вставить("ФайлРазмер"	, ФайлДвоичныеДанные.Размер());
		//ФайлОписание.Вставить("ФайлCRC32"	, ХешФункцияCRC32.ХешСумма);
		
	Иначе
		
		ФайлОписание.Вставить("ФайлРазмер"	, 0);
		//ФайлОписание.Вставить("ФайлCRC32"	, 0);
	
	КонецЕсли;
	
	ФайлОписание.Вставить("ФайлПредставление", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		//"строк: %1, байт: %2, CRC32: %3"
		"строк: %1, байт: %2"
		, ФайлОписание.ФайлКоличествоСтрок	// 1
		, ФайлОписание.ФайлРазмер			// 2
		//, ФайлОписание.ФайлCRC32			// 3
	));

КонецПроцедуры // ФайлОписаниеУстановитьПредставление()

Функция НастройкиЭкспортНаСервере(Знач НастройкиВыгрузки) Экспорт
	Перем ХранилищеЗначения;
	
	ХранилищеЗначения = Новый ХранилищеЗначения(НастройкиВыгрузки, Новый СжатиеДанных(9));
	
	Поток = Новый ПотокВПамяти;
	
	ЗаписьХМЛ = Новый ЗаписьXML;
    ЗаписьХМЛ.ОткрытьПоток(Поток);
	
	ОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(ХранилищеЗначения);
    ФабрикаXDTO.ЗаписатьXML(ЗаписьХМЛ, ОбъектXDTO);
	ЗаписьХМЛ.Закрыть();
	
	ДД = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	 
	АдресФайлаДляСкачивания = ПоместитьВоВременноеХранилище(ДД, );
	
	Возврат АдресФайлаДляСкачивания;
	
КонецФункции // ЭкспортНастроекНаСервере()

Функция НастройкиИмпортНаСервере(Знач ДвоичныеДанные) Экспорт
	
	Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьПоток(Поток);
	
	ХранилищеЗначения = СериализаторXDTO.ПрочитатьXML(ЧтениеХМЛ);
	ЧтениеХМЛ.Закрыть();
	
	НастройкиВыгрузки = ХранилищеЗначения.Получить();
	
	НастройкиВыгрузки = Серриализация_Загрузка(НастройкиВыгрузки); // Получаем корректные данные
	
	Возврат НастройкиВыгрузки;
	
КонецФункции // НастройкиИмпортНаСервере()

#КонецОбласти

Функция ВсеПроизводители(Знач ВозвращатьСоответствие = Ложь) Экспорт

	Перем ВсеПроизводители, ВсеПроизводителиСоответствие;

	ВсеПроизводители	= Новый Массив;
	ВсеПроизводителиСоответствие = Новый Соответствие;
	
	ПроизводительОписание = Новый Структура;

	ПроизводительОписание.Вставить("manfid", 6009);
	ПроизводительОписание.Вставить("Наименование", "Ekoprom");
	ПроизводительОписание.Вставить("ДопустимыНулевыеКоличества", Ложь);
	ПроизводительОписание.Вставить("НаименованиеОбезличенногоФизлица", "");
	ПроизводительОписание.Вставить("ВыделятьБесплатныйТовар", Ложь);
	ПроизводительОписание.Вставить("ПорогОкругленияБесплатногоТовара", 0);
	ПроизводительОписание.Вставить("ПериодВыгрузкиДней", 45);

	СписокЗначений = Новый СписокЗначений;
	ПроизводительОписание.Вставить("Версии", СписокЗначений);

	СписокЗначений = Новый СписокЗначений;	
	СписокЗначений.Добавить(0, "6", Ложь);
	ПроизводительОписание.Вставить("КоличествоФайловСписок", СписокЗначений);
	ПроизводительОписание.Вставить("ФТП_Сервер", "ftp.cislinkdts.com");
	ПроизводительОписание.Вставить("ФТП_Порт", 21);
	ПроизводительОписание.Вставить("ФТП_Каталог", "Ecoprom/in");
	ПроизводительОписание.Вставить("HTTP_Сервер", "dapi.cislinkdts.com");
	ПроизводительОписание.Вставить("ИспользоватьКодУпаковкиВместоКодаШтуки", Ложь);	
	
	ВсеПроизводители.Добавить(ПроизводительОписание);
	ВсеПроизводителиСоответствие.Вставить(ПроизводительОписание.manfid, ПроизводительОписание);
	
	Если ВозвращатьСоответствие Тогда
		
		Возврат ВсеПроизводителиСоответствие;
	
	КонецЕсли;
	
	Возврат ВсеПроизводители;

КонецФункции // ВсеПроизводители()

Функция Версия2Цифры(Знач Версия)

	Версия = СтрРазделитьЕх(Версия, ".", Ложь);
	
	Для х = -Версия.ВГраница() По -2 Цикл
	
		Версия.Удалить(-х);
	
	КонецЦикла;
	
	Возврат СтрСоединитьЕх(Версия, ".");

КонецФункции // Версия2Цифры()

Функция UserAgent()

	Перем СведенияОВнешнейОбработке;
	
	СведенияОВнешнейОбработке	= СведенияОВнешнейОбработке();
	СистемнаяИнформация			= Новый СистемнаяИнформация;

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"1C+Enterprise/%1/%2 v%3/%4 v%5"
		, Версия2Цифры(СистемнаяИнформация.ВерсияПриложения)	// 1
		, Метаданные.Имя										// 2
		, Версия2Цифры(Метаданные.Версия)						// 3
		, КонфигурацияКод()										// 4
		, СведенияОВнешнейОбработке.Версия						// 5
	)	

КонецФункции // UserAgent()

Функция ВсеКонстанты() Экспорт

	Перем ВсеКонстанты, КонфигурацияКод, СведенияОВнешнейОбработке;
	
	КонфигурацияКод				= КонфигурацияКод();
	КонфигурацияПредставление	= ВсеКонфигурации().НайтиПоЗначению(КонфигурацияКод).Представление;
	
	ВсеКонстанты = Новый Структура;
	ВсеКонстанты.Вставить("КонфигурацияКод"				, КонфигурацияКод());
	ВсеКонстанты.Вставить("КонфигурацияПредставление"	, КонфигурацияПредставление);
	ВсеКонстанты.Вставить("БСП_СтаройВерсии"			, БСП_СтаройВерсии());
	ВсеКонстанты.Вставить("РазделительСтрок"			, РазделительСтрок());
	ВсеКонстанты.Вставить("UserAgent"					, UserAgent());
	ВсеКонстанты.Вставить("КодировкаТекста"				, Новый СписокЗначений);
	ВсеКонстанты.КодировкаТекста.Добавить(КодировкаТекста.ANSI, "ANSI");
	ВсеКонстанты.КодировкаТекста.Добавить(КодировкаТекста.UTF8, "UTF-8");
	
	ВсеКонстанты.Вставить("Релиз"						, Истина);
	
	#Область ТипыДокументов
	
	ТипыДокументов = Новый СписокЗначений;
	
	#Область Конфигурация_UT11
	Если ВсеКонстанты.КонфигурацияКод = Конфигурация_UT11() Тогда
	
		ТипыДокументов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"),, Истина, БиблиотекаКартинок.Документ);
		ТипыДокументов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтКлиента"),, Истина, БиблиотекаКартинок.Документ);
		ТипыДокументов.Добавить(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"),, Истина, БиблиотекаКартинок.Документ);
		ТипыДокументов.Добавить(Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"),, Ложь, БиблиотекаКартинок.Документ);
		ТипыДокументов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"),, Истина, БиблиотекаКартинок.Документ);
		ТипыДокументов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"),, Истина, БиблиотекаКартинок.Документ);
		
		Если ЕстьДокумент("ПередачаТоваровХранителю") Тогда
		
			ТипыДокументов.Добавить(Тип("ДокументСсылка.ПередачаТоваровХранителю"),"Передача товаров хранителю", Истина, БиблиотекаКартинок.Документ);
			
		КонецЕсли;
		
		Если ЕстьДокумент("ЧекККМ") Тогда
		
			ТипыДокументов.Добавить(Тип("ДокументСсылка.ЧекККМ"),, Ложь, БиблиотекаКартинок.Документ);
			
		КонецЕсли;
		
		Если ЕстьДокумент("ЧекККМВозврат") Тогда
		
			ТипыДокументов.Добавить(Тип("ДокументСсылка.ЧекККМВозврат"),, Ложь, БиблиотекаКартинок.Документ);
			
		КонецЕсли;
		
		Если ЕстьДокумент("ПриобретениеТоваровУслуг") Тогда
		
			ТипыДокументов.Добавить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"),, Истина, БиблиотекаКартинок.Документ);
			
		Иначе
			
			ТипыДокументов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"),, Истина, БиблиотекаКартинок.Документ);
			
		КонецЕсли;
		ТипыДокументов.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"),, Истина, БиблиотекаКартинок.Документ);
		ТипыДокументов.Добавить(Тип("ДокументСсылка.ПеремещениеТоваров"),, Ложь, БиблиотекаКартинок.Документ);
	
	КонецЕсли;
	#КонецОбласти
	
	ВсеКонстанты.Вставить("ТипыДокументов", ТипыДокументов);
	
	#КонецОбласти
	
	#Область ТорговойТочкойЯвляется
	
	ТорговойТочкойЯвляется = Новый СписокЗначений;
	
	#Область Конфигурация_UT11
	Если КонфигурацияКод = Конфигурация_UT11() Тогда
	
		ТорговойТочкойЯвляется.Добавить("Партнер"			, "Клиент - это контрагент, точка доставки - это партнер");
		ТорговойТочкойЯвляется.Добавить("Контрагент"		, "Клиент - это партнер, точка доставки - это контрагент");
		ТорговойТочкойЯвляется.Добавить("Перевозчик"		, "Клиент - это контрагент, точка доставки - это перевозчик");
		ТорговойТочкойЯвляется.Добавить("АдресДоставки"		, "Клиент - это контрагент, точка доставки - это адрес доставки в документе");
		ТорговойТочкойЯвляется.Добавить("Склад"				, "Клиент - это контрагент, точка доставки - это склад");
		ТорговойТочкойЯвляется.Добавить("Договор"			, "Клиент - это контрагент, точка доставки - это договор");
		ТорговойТочкойЯвляется.Добавить("Отсутствует"		, "Клиент - это контрагент, точка доставки отсутствует");
		ТорговойТочкойЯвляется.Добавить("БезКлиента"		, "Клиент не определен");
	
	КонецЕсли;
	#КонецОбласти
	
	Для каждого ТорговойТочкойЯвляетсяСтрока Из ТорговойТочкойЯвляется Цикл
	
		ТорговойТочкойЯвляетсяСтрока.Представление =
			Строка(1 + ТорговойТочкойЯвляется.Индекс(ТорговойТочкойЯвляетсяСтрока))
			+ ". " + ТорговойТочкойЯвляетсяСтрока.Представление
		;
	
	КонецЦикла;
	
	ВсеКонстанты.Вставить("ТорговойТочкойЯвляется", ТорговойТочкойЯвляется);
	
	#КонецОбласти
	
	#Область ТорговыйПредставитель
	
	ТорговыйПредставитель = Новый СписокЗначений;
	
	#Область Конфигурация_UT11
	Если КонфигурацияКод = Конфигурация_UT11() Тогда
	
		ТорговыйПредставитель.Добавить("МенеджерВДокументе"	, "Менеджер (указан в документе)", , БиблиотекаКартинок.Пользователь);
		ТорговыйПредставитель.Добавить("МенеджерВПартнере"	, "Менеджер (указан в партнере)", , БиблиотекаКартинок.Пользователь);
		ТорговыйПредставитель.Добавить("НеИспользуется"		, "Не используется");
	
	КонецЕсли;
	#КонецОбласти
	
	ВсеКонстанты.Вставить("ТорговыйПредставитель", ТорговыйПредставитель);
	
	#КонецОбласти
	
	#Область ДобавлятьКНомерам
	
	ДобавлятьКНомерам = Новый СписокЗначений;
	
	ДобавлятьКНомерам.Добавить(""			, "Не добавлять");
	ДобавлятьКНомерам.Добавить("yyyy"		, "Год");
	ДобавлятьКНомерам.Добавить("yyyyMM"		, "Год, месяц");
	ДобавлятьКНомерам.Добавить("yyyyMMdd"	, "Год, месяц, день");
	
	ВсеКонстанты.Вставить("ДобавлятьКНомерам", ДобавлятьКНомерам);
	
	#КонецОбласти
	
	Возврат ВсеКонстанты;

КонецФункции // ВсеКонстанты()

Функция ВсеКонфигурации() Экспорт
	
	Перем ВсеКонфигурации;
	
	ВсеКонфигурации = Новый СписокЗначений;
	
	#Область Конфигурация_UT11
	ВсеКонфигурации.Добавить(Конфигурация_UT11(), "UT 11, КА 2, ERP");
	#КонецОбласти
	
	Возврат ВсеКонфигурации;
	
КонецФункции // ВсеКонфигурации()

Функция ШаблонНастроек() Экспорт

	Перем ТаблицаПересчета, ТаблицаТранслита;
	
	// Колонки с именами "Отбор<...>_<СправочникВид>" появятся на форме в виде произвольных отборов СКД.
	//	Порядок и заголовки отборов будут соответствовать колонкам таблицы "Настройка"
	
	КЧ = Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный);
	КС = Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная);
	КД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	
	#Область Настройка
	
	КонфигурацияКод = КонфигурацияКод();
	
	Настройка = Новый ТаблицаЗначений;
	
	ТипФилиала = Новый Массив;
	ТипФилиала.Добавить(Тип("СправочникСсылка.Организации"));
	
	#Область Конфигурация_UT11
	Если КонфигурацияКод = Конфигурация_UT11() Тогда
		ТипФилиала.Добавить(Тип("СправочникСсылка.Склады"));
		ТипФилиала.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	#КонецОбласти
	
	Настройка.Колонки.Добавить("ОсновнаяОрганизация"											, Новый ОписаниеТипов(ТипФилиала), "Сводно по одному филиалу");
	
	Настройка.Колонки.Добавить("ОтборНоменклатура_Номенклатура"									, Новый ОписаниеТипов("Массив"), "Номенклатура");
	Настройка.Колонки.Добавить("ОтборОрганизации_Организации"									, Новый ОписаниеТипов("Массив"), "Организации");
	
	СправочникСкладыИдентификатор = "Склады";
	Настройка.Колонки.Добавить("ОтборСклады_" + СправочникСкладыИдентификатор					, Новый ОписаниеТипов("Массив"), "Склады");
	
	Настройка.Колонки.Добавить("ОтборПоставщики_Контрагенты"									, Новый ОписаниеТипов("Массив"), "Поставщики");
	Настройка.Колонки.Добавить("ОтборИсключаемыеКонтрагенты_Контрагенты"						, Новый ОписаниеТипов("Массив"), "Исключаемые контрагенты");
	
	#Область Конфигурация_UT11
	Если КонфигурацияКод = Конфигурация_UT11() Тогда
	
		Настройка.Колонки.Добавить("ОтборФилиалыСклады_Склады__СтруктураПредприятия", Новый ОписаниеТипов("Массив"), "Филиалы: склады, подразделения");
		Настройка.Колонки.Добавить("ОтборКлиентыБезПерсональныхДанныхМассив_Контрагенты__Партнеры", Новый ОписаниеТипов("Массив"), "Клиенты без персональных данных");
		Настройка.Колонки.Добавить("ОтборРозничныеМагазины_Склады"				, Новый ОписаниеТипов("Массив"), "Розничные магазины");
		Настройка.Колонки.Добавить("ОтборСкидки_СкидкиНаценки"					, Новый ОписаниеТипов("Массив"), "Промо акции");
		Настройка.Колонки.Добавить("ОтборСегментыПартнеров_СегментыПартнеров"	, Новый ОписаниеТипов("Массив"), "Сегменты клиентов");
		
		Настройка.Колонки.Добавить("ОтборКлиентыБезТочекДоставки_Контрагенты__Партнеры", Новый ОписаниеТипов("Массив"), "Клиенты без точек доставки");
	
	КонецЕсли;
	#КонецОбласти
	
	Настройка.Колонки.Добавить("КаталогВыгрузки"							, Новый ОписаниеТипов("Строка", , , , КС), "Каталог выгрузки");
	
	Настройка.Колонки.Добавить("ФТП_Использовать"							, Новый ОписаниеТипов("Булево"), "ФТП используется");
	Настройка.Колонки.Добавить("ФТП_Логин"									, Новый ОписаниеТипов("Строка", , , , КС), "ФТП логин");
	Настройка.Колонки.Добавить("ФТП_Пароль"									, Новый ОписаниеТипов("Строка", , , , КС), "ФТП пароль");
	
	Настройка.Колонки.Добавить("HTTP_Использовать"							, Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)), "HTTP используется");
	Настройка.Колонки.Добавить("HTTP_API_KEY"								, Новый ОписаниеТипов("Строка", , , , КС), "API KEY");
	Настройка.Колонки.Добавить("HTTP_ПартнерИмя"							, Новый ОписаниеТипов("Строка", , , , КС), "Имя партнера");
	
	Настройка.Колонки.Добавить("БезНомеровТТН"								, Новый ОписаниеТипов("Булево"), "Без номеров ТТН");
	Настройка.Колонки.Добавить("НастройкаИмя"								, Новый ОписаниеТипов("Строка", , , , КС), "Имя настройки");
	Настройка.Колонки.Добавить("НастройкаИспользуется"						, Новый ОписаниеТипов("Булево"), "Настройка используется");
	Настройка.Колонки.Добавить("manfid"										, Новый ОписаниеТипов("Число", , , КЧ));
	Настройка.Колонки.Добавить("Версия"										, Новый ОписаниеТипов("Число", , , КЧ), "Версия");
	Настройка.Колонки.Добавить("ПериодВыгрузкиДней"							, Новый ОписаниеТипов("Число", , , КЧ), "Дней выгрузки");
	
	Настройка.Колонки.Добавить("ДатаНач"									, Новый ОписаниеТипов("Дата", , , , , КД), "Дата начала выгрузки");
	Настройка.Колонки.Добавить("ДатаКон"									, Новый ОписаниеТипов("Дата", , , , , КД), "Дата окончания выгрузки");
	
	#Область Конфигурация_UT11
	Если КонфигурацияКод = Конфигурация_UT11() Тогда
		Настройка.Колонки.Добавить("ВидЦеныРозничная"						, Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"), "Розничный прайс (для оценки перемещений)");
	КонецЕсли;
	#КонецОбласти
	
	#КонецОбласти

	#Область НастройкиОбщие
	
	НастройкиОбщие = Новый ТаблицаЗначений;
	
	НастройкиОбщие.Колонки.Добавить("РежимРаботыКлиент"						, Новый ОписаниеТипов("Булево"), "Режим работы ""На клиенте""");
	НастройкиОбщие.Колонки.Добавить("ТорговойТочкойЯвляется"				, Новый ОписаниеТипов("Строка", , , , КС), "Торговой точкой является");
	
	НастройкиОбщие.Колонки.Добавить("ТипыДокументов"						, Новый ОписаниеТипов("СписокЗначений"), "Типы документов");
	НастройкиОбщие.Колонки.Добавить("ТорговыйПредставитель"					, Новый ОписаниеТипов("Строка", , , , КС), "Торговый представитель");
	НастройкиОбщие.Колонки.Добавить("ТаблицаПересчета"						, Новый ОписаниеТипов("Массив"), "Таблица пересчета");
	НастройкиОбщие.Колонки.Добавить("ТаблицаТранслита"						, Новый ОписаниеТипов("Массив"), "Таблица транслита");
	НастройкиОбщие.Колонки.Добавить("СобственныйКонвертер_в_ANSI"			, Новый ОписаниеТипов("Булево")
		, "Использовать собственный конвертер текста в ANSI (если ваша система не поддерживает эту кодировку)"
	);
	НастройкиОбщие.Колонки.Добавить("HTTP_Использовать"						, Новый ОписаниеТипов("Булево"), "HTTP используется");
	НастройкиОбщие.Колонки.Добавить("HTTP_API_KEY"							, Новый ОписаниеТипов("Строка", , , , КС), "API KEY");
	НастройкиОбщие.Колонки.Добавить("КодировкаТекста"						, Новый ОписаниеТипов("КодировкаТекста"), "Кодировка текста");
	
	НастройкиОбщие.Колонки.Добавить("Округлять"								, Новый ОписаниеТипов("Булево"), "Округлять числовые показатели");
	НастройкиОбщие.Колонки.Добавить("НеВыгружатьСерии"						, Новый ОписаниеТипов("Булево"), "Не выгружать серии");
	НастройкиОбщие.Колонки.Добавить("ПеремещенияКакПродажи"					, Новый ОписаниеТипов("Булево"), "Перемещения считать продажами");
	НастройкиОбщие.Колонки.Добавить("КлиентыБезПерсональныхДанных"			, Новый ОписаниеТипов("Булево"), "Выгружать клиентов без персональных данных");
	НастройкиОбщие.Колонки.Добавить("ПродажиПоЗакупочнымЦенам"				, Новый ОписаниеТипов("Булево"), "Продажи по закупочным ценам");
	
	НастройкиОбщие.Колонки.Добавить("ДатаНачалаУчета"						, Новый ОписаниеТипов("Дата", , , , , КД), "Дата начала учета");
	
	#Область Конфигурация_UT11
	Если КонфигурацияКод = Конфигурация_UT11() Тогда
		
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	МассивТипов.Добавить(Тип("Строка"));
	НастройкиОбщие.Колонки.Добавить("СвойствоКаналРынка", Новый ОписаниеТипов(МассивТипов), "Свойство партнера / сегмента партнеров / бизнес-региона / организации ""Канал рынка""");
	
	НастройкиОбщие.Колонки.Добавить("СвойствоЗамещающийКлиент", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"), "Свойство партнера / контрагента ""Замещающий клиент""");
	
	НастройкиОбщие.Колонки.Добавить("ВидЦеныЗакупочная", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"), "Закупочный прайс (выбирать только, если он актуален)");
	
	НастройкиОбщие.Колонки.Добавить("ИспользоватьВнутренниеКодыХарактеристик", Новый ОписаниеТипов("Булево"), "Использовать внутренние коды характеристик");
		
	НастройкиОбщие.Колонки.Добавить("ТипыФилиалов"				, Новый ОписаниеТипов("Массив"), "Типы филиалов");
	
	КонецЕсли;
	#КонецОбласти

	#КонецОбласти
	
	#Область ТаблицаПересчета
	
	ТаблицаПересчета = Новый ТаблицаЗначений;
	ТаблицаПересчета.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
	ТаблицаПересчета.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПересчета.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 3, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПересчета.Колонки.Добавить("ru", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
	
	#КонецОбласти
	
	#Область ТаблицаТранслита
	
	ТаблицаТранслита = Новый ТаблицаЗначений;
	ТаблицаТранслита.Колонки.Добавить("БукваАлфавита"			, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1, ДопустимаяДлина.Переменная)));
	ТаблицаТранслита.Колонки.Добавить("БукваАлфавитаТранслит"	, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(5, ДопустимаяДлина.Переменная)));
	
	#КонецОбласти
	
	#Область ДополнительныеСведения
	
	ДополнительныеСведения = Новый ТаблицаЗначений;
	ДополнительныеСведения.Колонки.Добавить("Используется"	, Новый ОписаниеТипов("Булево"));
	ДополнительныеСведения.Колонки.Добавить("Объект"		, Справочники.ТипВсеСсылки());
	ДополнительныеСведения.Колонки.Добавить("Свойство"		, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ДополнительныеСведения.Колонки.Добавить("Значение"		, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	
	#КонецОбласти
	
	#Область ТипыФилиалов
	
	ТипыФилиалов = Новый ТаблицаЗначений;
	ТипыФилиалов.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
	ТипыФилиалов.Колонки.Добавить("Филиал"		, Новый ОписаниеТипов(ТипФилиала));
	ТипыФилиалов.Колонки.Добавить("whtype"		, Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)), "Тип филиала");
	
	#КонецОбласти

	#Область ВиртуальныеКлиенты
	
	ВиртуальныеКлиенты = Новый ТаблицаЗначений;
	
	ВиртуальныеКлиенты.Колонки.Добавить("Используется"	, Новый ОписаниеТипов("Булево"));
	
	ВиртуальныеКлиенты.Колонки.Добавить("clientcode"	, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36, ДопустимаяДлина.Переменная)), "clientcode");
	ВиртуальныеКлиенты.Колонки.Добавить("clientname"	, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)), "clientname");
	ВиртуальныеКлиенты.Колонки.Добавить("inn"			, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)), "inn");
	ВиртуальныеКлиенты.Колонки.Добавить("kpp"			, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)), "kpp");
	ВиртуальныеКлиенты.Колонки.Добавить("address_ur"	, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(512, ДопустимаяДлина.Переменная)), "address_ur");
	ВиртуальныеКлиенты.Колонки.Добавить("address"		, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(512, ДопустимаяДлина.Переменная)), "address");
	
	ВиртуальныеКлиенты.Колонки.Добавить("spocode"		, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36, ДопустимаяДлина.Переменная)), "spocode");
	ВиртуальныеКлиенты.Колонки.Добавить("sponame"		, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)), "sponame");
	ВиртуальныеКлиенты.Колонки.Добавить("spoaddress"	, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(512, ДопустимаяДлина.Переменная)), "spoaddress");
	
	ВиртуальныеКлиенты.Колонки.Добавить("kladrcode"		, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	ВиртуальныеКлиенты.Колонки.Добавить("zip_code"		, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	ВиртуальныеКлиенты.Колонки.Добавить("fdistrict"		, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ВиртуальныеКлиенты.Колонки.Добавить("city"			, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ВиртуальныеКлиенты.Колонки.Добавить("notdeliver"	, Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	ВиртуальныеКлиенты.Колонки.Добавить("manfclient"	, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36, ДопустимаяДлина.Переменная)));
	ВиртуальныеКлиенты.Колонки.Добавить("tpcode"		, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36, ДопустимаяДлина.Переменная)));
	ВиртуальныеКлиенты.Колонки.Добавить("percentexp"	, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36, ДопустимаяДлина.Переменная)));
	ВиртуальныеКлиенты.Колонки.Добавить("cx"			, Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(20, 5, ДопустимыйЗнак.Неотрицательный)));
	ВиртуальныеКлиенты.Колонки.Добавить("cy"			, Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(20, 5, ДопустимыйЗнак.Неотрицательный)));
	ВиртуальныеКлиенты.Колонки.Добавить("creditdays"	, Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	ВиртуальныеКлиенты.Колонки.Добавить("creditlim"		, Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(20, 2, ДопустимыйЗнак.Неотрицательный)));
	ВиртуальныеКлиенты.Колонки.Добавить("credit"		, Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(20, 2, ДопустимыйЗнак.Неотрицательный)));
	ВиртуальныеКлиенты.Колонки.Добавить("cr_overdue"	, Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	ВиртуальныеКлиенты.Колонки.Добавить("license_no"	, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ВиртуальныеКлиенты.Колонки.Добавить("licenseexp"	, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ВиртуальныеКлиенты.Колонки.Добавить("phone_no"		, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ВиртуальныеКлиенты.Колонки.Добавить("street"		, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ВиртуальныеКлиенты.Колонки.Добавить("building"		, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(30, ДопустимаяДлина.Переменная)));
	ВиртуальныеКлиенты.Колонки.Добавить("mccode"		, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36, ДопустимаяДлина.Переменная)));
	ВиртуальныеКлиенты.Колонки.Добавить("mcname"		, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	
	#КонецОбласти
	
	#Область ЗамещающиеКлиенты
	
		ЗамещающиеКлиенты = Новый ТаблицаЗначений;
		ЗамещающиеКлиенты.Колонки.Добавить("Используется"	, Новый ОписаниеТипов("Булево"));
		
	#КонецОбласти
	
	ШаблонНастроек = Новый Структура;
	ШаблонНастроек.Вставить("Настройка"				, Настройка);
	ШаблонНастроек.Вставить("НастройкиОбщие"		, НастройкиОбщие);
	ШаблонНастроек.Вставить("ТаблицаПересчета"		, ТаблицаПересчета);
	ШаблонНастроек.Вставить("ТаблицаТранслита"		, ТаблицаТранслита);
	ШаблонНастроек.Вставить("ТипыФилиалов"			, ТипыФилиалов);
	ШаблонНастроек.Вставить("ВиртуальныеКлиенты"	, ВиртуальныеКлиенты);
	ШаблонНастроек.Вставить("ЗамещающиеКлиенты"		, ЗамещающиеКлиенты);
	
	Возврат ШаблонНастроек;
	
КонецФункции // ШаблонНастроек()

Функция РежимРаботыВОблаке() Экспорт
	//Возврат Истина;

	#Область НеРежимРаботыВОблаке
	Возврат Ложь;
	#КонецОбласти
	
КонецФункции // РежимРаботыВОблаке()

Функция Фтп(Знач ФТП_Сервер, Знач ФТП_Порт, Знач ФТП_Логин, Знач ФТП_Пароль, Знач ФТП_Каталог, Знач Таймаут = 180)
	Перем Прокси, ФТП;
	
	Попытка
	
		Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("FTP");
		
	Исключение
		
		Прокси = Неопределено;
		
	КонецПопытки;
	
	ФТП = Новый FTPСоединение(
			СокрЛП(ФТП_Сервер)
		,	ФТП_Порт
		,	СокрЛП(ФТП_Логин)
		,	СокрЛП(ФТП_Пароль)
		,	Прокси
		,	Истина
		,	Таймаут
	);
	
	Разделитель		= "/";
	КаталогПолный	= "";

	Для каждого ФТП_Каталог Из РазложитьСтрокуВМассивПодстрок(ФТП_Каталог, Разделитель, Истина, Истина) Цикл
		
		КаталогПолный = КаталогПолный + ФТП_Каталог + Разделитель;
		
		Попытка
		
			ФТП.УстановитьТекущийКаталог(ФТП_Каталог);
		
		Исключение
			
			ВызватьИсключение "Авторизация на ФТП пройдена, но при чтении каталога """ + Лев(КаталогПолный, СтрДлина(КаталогПолный) - 1) + """ произошла ошибка: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
		КонецПопытки;
	
	КонецЦикла;

	Возврат ФТП;
	
КонецФункции // ФТП()

Функция ЗаписьЖурналаРегистрацииСервер(Знач Уровень, Знач ОбъектМетаданных, Знач Данные, Знач Комментарий, Знач РежимТранзакции, Знач ПроизводительНаименование)

	Комментарий = "(Сервер) " + Комментарий;
	
	СообщитьПользователю(Комментарий);
	
	ЗаписьЖурналаРегистрации(
			"CISLINK." + ПроизводительНаименование
		,	Уровень
		,	ОбъектМетаданных
		,	Данные
		,	Комментарий
		,	РежимТранзакции
	);
	
КонецФункции // ЗаписьЖурналаРегистрацииСервер()

Функция ЗаписьЖурналаРегистрацииКлиент(Знач Уровень, Знач ОбъектМетаданных, Знач Данные, Знач Комментарий, Знач РежимТранзакции, Знач ПроизводительНаименование) Экспорт

	Комментарий = "(Клиент) " + Комментарий;
	
	СообщитьПользователю(Комментарий);
	
	ЗаписьЖурналаРегистрации(
			"CISLINK." + ПроизводительНаименование
		,	УровеньЖурналаРегистрации[Уровень]
		,	ОбъектМетаданных
		,	Данные
		,	Комментарий
		,	РежимТранзакцииЗаписиЖурналаРегистрации[РежимТранзакции]
	);

КонецФункции // ЗаписьЖурналаРегистрацииКлиент()

Функция КаталогВыгрузкиДоступен(Знач КаталогВыгрузки) Экспорт
	
	#Область НеРежимРаботыВОблаке
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Файл = Новый Файл(СокрЛП(КаталогВыгрузки));
	
	Если Не Файл.Существует() Тогда
		
		СообщитьПользователю(ИмяКомпьютера() + ". Выбранный путь не существует!");
		Возврат Ложь;
		
	ИначеЕсли Не Файл.ЭтоКаталог() Тогда
		
		СообщитьПользователю(ИмяКомпьютера() + ". Выбранный путь не является каталогом!");
		Возврат Ложь;
		
	КонецЕсли;
	
	ВременныйФайл = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Файл.ПолноеИмя) + СтрЗаменить(Новый УникальныйИдентификатор, "-", "") + ".tmp";
	
	Попытка
		
		ЗаписьТекста = Новый ЗаписьТекста(ВременныйФайл);
		ЗаписьТекста.ЗаписатьСтроку(ТекущаяДата());
		ЗаписьТекста.Закрыть();
		
		УдалитьФайлы(ВременныйФайл);
		
	Исключение
		
		СообщитьПользователю(ИмяКомпьютера() + ". Не могу записать тестовый файл в " + КаталогВыгрузки+"!");
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	#КонецОбласти
	
КонецФункции // КаталогВыгрузкиДоступен()

Функция ТипизироватьПоШаблону(Знач ШаблонНастроек, Знач СтруктураДанных = Неопределено) Экспорт

	ОТ = Новый ОписаниеТипов("Структура");
	СтруктураДанных = ОТ.ПривестиЗначение(СтруктураДанных);

	СтруктураДанныхКорректная = Новый Структура;
	Для каждого Колонка Из ШаблонНастроек.Колонки Цикл
	
		СтруктураДанныхКорректная.Вставить(Колонка.Имя, Колонка.ТипЗначения.ПривестиЗначение(""));
	
	КонецЦикла;
	
	ШаблонНастроек = ШаблонНастроек.Добавить();

	ЗаполнитьЗначенияСвойств(ШаблонНастроек, СтруктураДанных); // Типизируем данные по шаблону
	ЗаполнитьЗначенияСвойств(СтруктураДанныхКорректная, ШаблонНастроек);
	
	Возврат СтруктураДанныхКорректная;
	
КонецФункции // ТипизироватьПоШаблону()

Процедура СписокЗначенийСверитьСЭталоном(Знач СписокЗначений, Знач СписокЗначенийЭталон)

	Для х = -СписокЗначений.Количество() + 1 По 0 Цикл
	
		СписокЗначенийСтрока	= СписокЗначений[-х];
		Значение				= СписокЗначенийСтрока.Значение;
		
		Если СписокЗначенийЭталон.НайтиПоЗначению(Значение) = Неопределено Тогда
		
			СписокЗначений.Удалить(СписокЗначенийСтрока);
		
		КонецЕсли;
	
	КонецЦикла;
	
	Добавлять = Не СписокЗначений.Количество();
	
	Для каждого СписокЗначенийЭталонСтрока Из СписокЗначенийЭталон Цикл
		
		Значение		= СписокЗначенийЭталонСтрока.Значение;
		Представление	= СписокЗначенийЭталонСтрока.Представление;
		
		СписокЗначенийСтрока = СписокЗначений.НайтиПоЗначению(Значение);
		
		Если СписокЗначенийСтрока = Неопределено Тогда
			
			Если Не Добавлять Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			СписокЗначенийСтрока = СписокЗначений.Добавить(Значение, , СписокЗначенийЭталонСтрока.Пометка);
			
		КонецЕсли;
		
		СписокЗначенийСтрока.Представление	= ?(Не ПустаяСтрока(Представление), Представление, СокрЛП(Значение));
		СписокЗначенийСтрока.Картинка		= СписокЗначенийЭталонСтрока.Картинка;
	
	КонецЦикла;

КонецПроцедуры // СписокЗначенийСверитьСЭталоном()

Функция ПроизводительОписание(Знач ВсеПроизводители, Знач manfid, Знач ВызыватьИсключениеЕслиНеНайден = Истина)

	Для каждого ПроизводительОписание Из ВсеПроизводители Цикл
	
		Если ПроизводительОписание.manfid = manfid Тогда
		
			Возврат ПроизводительОписание;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Если ВызыватьИсключениеЕслиНеНайден Тогда
	
		ВызватьИсключение "Производитель """ + manfid + """ не найден!";
	
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции // ПроизводительОписание()

Функция ПолучитьСвойство(Знач Источник, Знач Путь)

	Если	ТипЗнч(Источник) <> Тип("Структура")
		и	ТипЗнч(Источник) <> Тип("ФиксированнаяСтруктура")
	Тогда
	
		Возврат Неопределено;
	
	КонецЕсли;

	НомПоз = СтрНайтиЕх(Путь, ".");
	
	Если НомПоз Тогда
	
		Реквизит	= Лев(Путь, НомПоз - 1);
		Путь		= Сред(Путь, НомПоз + 1);
	
	Иначе
	
		Реквизит	= Путь;
		Путь		= "";
	
	КонецЕсли;
	
	Если Не Источник.Свойство(Реквизит, Реквизит) Тогда
	
		Возврат Неопределено;
	
	КонецЕсли;
	
	Если ПустаяСтрока(Путь) Тогда
	
		Возврат Реквизит;
	
	КонецЕсли;

	Возврат ПолучитьСвойство(Реквизит, Путь);
КонецФункции // ПолучитьСвойство()

Функция РежимРаботыСервер(Знач ПараметрыВыгрузки)
	Перем РежимРаботыКлиент, НастройкиОбщие;
	
	Если ТипЗнч(ПараметрыВыгрузки) = Тип("Булево") Тогда
	
		РежимРаботыКлиент = ПараметрыВыгрузки;
		
	ИначеЕсли ТипЗнч(ПараметрыВыгрузки) = Тип("Структура") Тогда
		
		Если Не ПараметрыВыгрузки.Свойство("НастройкиОбщие", НастройкиОбщие) Тогда
		
			НастройкиОбщие = ПараметрыВыгрузки;
		
		КонецЕсли;
		
		РежимРаботыКлиент = НастройкиОбщие.РежимРаботыКлиент;
		
	Иначе
		
		ВызватьИсключение "::РежимРаботыСервер() - Некорректный аргумент """ + РежимРаботыКлиент + """";
		
	КонецЕсли;
	
	Возврат Не РежимРаботыКлиент;

КонецФункции // РежимРаботыСервер()

Функция Серриализация_Загрузка(Знач ХранилищеНастроек = Неопределено) Экспорт
	Перем Настройка, ВнешняяОбработкаСсылка, ТаблицаПересчета, ВиртуальныеКлиенты, ЗамещающиеКлиенты;
	
	Перем ФормыОбычные;
	
	ФормыОбычные = ФормыОбычные();
	
	Если ХранилищеНастроек = Неопределено Тогда
	
		ВнешняяОбработкаСсылка	= ВнешняяОбработкаСсылка();
		
		Если Не ЗначениеЗаполнено(ВнешняяОбработкаСсылка) Тогда
		
			ХранилищеНастроек = Неопределено;
			
		#Область ФормыУправляемые
		ИначеЕсли Не ФормыОбычные Тогда
			
			ХранилищеНастроек = ВнешняяОбработкаСсылка.ХранилищеНастроек.Получить();
			
		#КонецОбласти
			
		КонецЕсли;
		
	КонецЕсли;
	
	//ХранилищеНастроек = Новый Структура; Сообщить("ВНИМАНИЕ!!! ТЕСТ!!!");
	
	ШаблонНастроек			= ШаблонНастроек();
	ВсеПроизводители		= ВсеПроизводители();
	ВсеКонстанты			= ВсеКонстанты();
	
	НастройкиВыгрузки		= Новый Структура;
	НастройкиВыгрузки.Вставить("Настройки"		, Новый Массив);
	НастройкиВыгрузки.Вставить("НастройкиОбщие"	, );
	
	Если ТипЗнч(ХранилищеНастроек) = Тип("Массив") Тогда
	
		НастройкиВыгрузки.Настройки	= ХранилищеНастроек;
		Если НастройкиВыгрузки.Настройки.Количество() Тогда
		
			НастройкиВыгрузки.НастройкиОбщие = НастройкиВыгрузки.Настройки[0];
		
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ХранилищеНастроек) = Тип("Структура") Тогда 
		
		Если ХранилищеНастроек.Свойство("Настройки", ) и ТипЗнч(ХранилищеНастроек.Настройки) = Тип("Массив") Тогда
		
			НастройкиВыгрузки.Настройки = ХранилищеНастроек.Настройки;
			
			Если ХранилищеНастроек.Свойство("НастройкиОбщие", ) Тогда
			
				НастройкиВыгрузки.НастройкиОбщие = ХранилищеНастроек.НастройкиОбщие;
			
			КонецЕсли;
			
		Иначе
			
			НастройкиВыгрузки.НастройкиОбщие = ХранилищеНастроек;
			НастройкиВыгрузки.Настройки.Добавить(ХранилищеНастроек);
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если Не НастройкиВыгрузки.Настройки.Количество() Тогда
		
		Для х = 0 По ВсеПроизводители.ВГраница() Цикл
		
			ПроизводительОписание = ВсеПроизводители[х];
		
			Настройка = ТипизироватьПоШаблону(ШаблонНастроек.Настройка, Неопределено);
			Настройка.manfid					= ПроизводительОписание.manfid;
			Настройка.НастройкаИмя				= "Настройка №" + (х + 1) + ". " + ПроизводительОписание.Наименование;
			Настройка.НастройкаИспользуется		= Истина;
			
			НастройкиВыгрузки.Настройки.Добавить(Настройка);
		
		КонецЦикла;
	
	КонецЕсли;
	
	ТорговойТочкойЯвляется		= ПолучитьСвойство(НастройкиВыгрузки.НастройкиОбщие, "ТорговойТочкойЯвляется");
	ТорговыйПредставитель		= ПолучитьСвойство(НастройкиВыгрузки.НастройкиОбщие, "ТорговыйПредставитель");
	КаталогВыгрузкиКлиентСервер	= ПолучитьСвойство(НастройкиВыгрузки.НастройкиОбщие, "КаталогВыгрузкиКлиентСервер");
	
	НастройкиВыгрузки.НастройкиОбщие = ТипизироватьПоШаблону(ШаблонНастроек.НастройкиОбщие, НастройкиВыгрузки.НастройкиОбщие);
	
	ТаблицаПересчета = НастройкиВыгрузки.НастройкиОбщие.ТаблицаПересчета;
	Для х = 0 По ТаблицаПересчета.ВГраница() Цикл
		
		ТаблицаПересчета[х] = ТипизироватьПоШаблону(ШаблонНастроек.ТаблицаПересчета, ТаблицаПересчета[х]);
	
	КонецЦикла;
	
	Если НастройкиВыгрузки.НастройкиОбщие.Свойство("ВиртуальныеКлиенты", ВиртуальныеКлиенты) Тогда
	
		Для х = 0 По ВиртуальныеКлиенты.ВГраница() Цикл
			
			ВиртуальныеКлиенты[х] = ТипизироватьПоШаблону(ШаблонНастроек.ВиртуальныеКлиенты, ВиртуальныеКлиенты[х]);
		
		КонецЦикла;
	
	КонецЕсли;
	
	Если НастройкиВыгрузки.НастройкиОбщие.Свойство("ЗамещающиеКлиенты", ЗамещающиеКлиенты) Тогда
	
		Для х = 0 По ЗамещающиеКлиенты.ВГраница() Цикл
			
			ЗамещающиеКлиенты[х] = ТипизироватьПоШаблону(ШаблонНастроек.ЗамещающиеКлиенты, ЗамещающиеКлиенты[х]);
		
		КонецЦикла;
	
	КонецЕсли;
	
	#Область ТорговойТочкойЯвляется
	
	Если НастройкиВыгрузки.НастройкиОбщие.Свойство("ТорговойТочкойЯвляется", ) Тогда
	
		// В старых версиях настроек "ТорговойТочкойЯвляется" мог быть списком. Проверим...
		Если ТипЗнч(ТорговойТочкойЯвляется) = Тип("СписокЗначений") Тогда
			
			Для каждого ТорговойТочкойЯвляетсяСтрока Из ТорговойТочкойЯвляется Цикл
			
				Если ТорговойТочкойЯвляетсяСтрока.Пометка Тогда
				
					НастройкиВыгрузки.НастройкиОбщие.ТорговойТочкойЯвляется = ТорговойТочкойЯвляетсяСтрока.Значение;
					Прервать;
				
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;
		
		Если ВсеКонстанты.ТорговойТочкойЯвляется.НайтиПоЗначению(НастройкиВыгрузки.НастройкиОбщие.ТорговойТочкойЯвляется) = Неопределено Тогда
			
			НастройкиВыгрузки.НастройкиОбщие.ТорговойТочкойЯвляется = СписокЗначенийЗначениеПоУмолчанию(ВсеКонстанты.ТорговойТочкойЯвляется);
		
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	Если Не ЗначениеЗаполнено(НастройкиВыгрузки.НастройкиОбщие.КодировкаТекста) Тогда
	
		НастройкиВыгрузки.НастройкиОбщие.КодировкаТекста = ВсеКонстанты.КодировкаТекста[0].Значение;
	
	КонецЕсли;
	
	#Область ТорговыйПредставитель
	
	Если НастройкиВыгрузки.НастройкиОбщие.Свойство("ТорговыйПредставитель", ) Тогда
	
		// В старых версиях настроек "ТорговыйПредставитель" мог быть списком. Проверим...
		Если ТипЗнч(ТорговыйПредставитель) = Тип("СписокЗначений") Тогда
			
			Для каждого ТорговыйПредставительСтрока Из ТорговыйПредставитель Цикл
			
				Если ТорговыйПредставительСтрока.Пометка Тогда
				
					НастройкиВыгрузки.НастройкиОбщие.ТорговойТочкойЯвляется = ТорговыйПредставительСтрока.Значение;
					Прервать;
				
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;
		
		Если ВсеКонстанты.ТорговыйПредставитель.НайтиПоЗначению(НастройкиВыгрузки.НастройкиОбщие.ТорговыйПредставитель) = Неопределено Тогда
			
			НастройкиВыгрузки.НастройкиОбщие.ТорговыйПредставитель = СписокЗначенийЗначениеПоУмолчанию(ВсеКонстанты.ТорговыйПредставитель);
		
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	Если КаталогВыгрузкиКлиентСервер = 1 или КаталогВыгрузкиКлиентСервер = 0 Тогда
	
		НастройкиВыгрузки.НастройкиОбщие.РежимРаботыКлиент = Булево(КаталогВыгрузкиКлиентСервер);
	
	КонецЕсли;
	СписокЗначенийСверитьСЭталоном(НастройкиВыгрузки.НастройкиОбщие.ТипыДокументов, ВсеКонстанты.ТипыДокументов);
	НастройкиВыгрузки.НастройкиОбщие.ТипыДокументов.СортироватьПоПредставлению();
	
	Если РежимРаботыВОблаке() и РежимРаботыСервер(НастройкиВыгрузки) Тогда
	
		// Режим работы на сервере, в "облаке"
		
		Для каждого Настройка Из НастройкиВыгрузки.Настройки Цикл
		
			Настройка.КаталогВыгрузки = "";
		
		КонецЦикла;
		
	КонецЕсли;
	
	НомерНастройки	= 1;
	ИменаНастроек	= Новый Соответствие;
	
	Для х = 0 По НастройкиВыгрузки.Настройки.ВГраница() Цикл
		
		Настройка = НастройкаПроверить(ШаблонНастроек, НастройкиВыгрузки.Настройки[х]);
		
		Попытка
		
			ПроизводительОписание = ПроизводительОписание(ВсеПроизводители, Настройка.manfid);
		
		Исключение
			
			ПроизводительОписание	= ВсеПроизводители[0];
			Настройка.manfid		= ПроизводительОписание.manfid;
			
		КонецПопытки;
		
		Если ПроизводительОписание.КоличествоФайловСписок.НайтиПоЗначению(Настройка.Версия) = Неопределено Тогда
		
			Настройка.Версия = ПроизводительОписание.КоличествоФайловСписок[0].Значение;
		
		КонецЕсли;
		
		Если Настройка.ПериодВыгрузкиДней <= 0 Тогда
		
			Настройка.ПериодВыгрузкиДней = ПроизводительОписание.ПериодВыгрузкиДней;
		
		КонецЕсли;
	
		ТД = ТекущаяДата();
		
		Настройка.ДатаНач	= НачалоДня(ТД) - (Настройка.ПериодВыгрузкиДней - 1) * 24 * 3600;
		Настройка.ДатаКон	= КонецДня(ТД);
		
		Если ЗначениеЗаполнено(НастройкиВыгрузки.НастройкиОбщие.ДатаНачалаУчета) Тогда
		
			Настройка.ДатаНач = Макс(Настройка.ДатаНач, НастройкиВыгрузки.НастройкиОбщие.ДатаНачалаУчета);
		
		КонецЕсли;
		
		НастройкиВыгрузки.Настройки[х]	= Настройка;
		НастройкаИмя					= Настройка.НастройкаИмя;
		
		Если ПустаяСтрока(НастройкаИмя) или ИменаНастроек[НастройкаИмя] <> Неопределено Тогда
			
			Пока ИменаНастроек["Настройка №" + НомерНастройки] <> Неопределено Цикл // Избавляемся от дублей наименований настроек
				
				НомерНастройки = НомерНастройки + 1;
			
			КонецЦикла;
			
			Настройка.НастройкаИмя = "Настройка №" + НомерНастройки + ". " + ПроизводительОписание.Наименование;
			
		КонецЕсли;
		
		ИменаНастроек.Вставить(Настройка.НастройкаИмя, Настройка);
		
	КонецЦикла;
	
	Возврат НастройкиВыгрузки;
КонецФункции // Серриализация_Загрузка()

Функция НастройкаПроверить(Знач ШаблонНастроек, Знач Настройка = Неопределено) Экспорт
	Перем НастройкаКорректная;

	Если ТипЗнч(Настройка) <> Тип("Структура") Тогда
	
		Настройка = Новый Структура;
	
	КонецЕсли;
	
	//НастройкаКорректная = ТипизироватьПоШаблону(ШаблонНастроек().Настройка, Настройка);
	НастройкаКорректная = ТипизироватьПоШаблону(ШаблонНастроек.Настройка, Настройка);
	
	НастройкаКорректная.КаталогВыгрузки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(НастройкаКорректная.КаталогВыгрузки);
	
	// + Совместимость с прошлой версией сохраненных параметров
	ВосстановитьОтборСкдИзСтаройНастройки(НастройкаКорректная.ОтборОрганизации_Организации, "Организации", Настройка);
	ВосстановитьОтборСкдИзСтаройНастройки(НастройкаКорректная.ОтборОрганизации_Организации, "ОтборОрганизации", Настройка);
	
	ВосстановитьОтборСкдИзСтаройНастройки(НастройкаКорректная.ОтборНоменклатура_Номенклатура, "Номенклатура", Настройка);
	ВосстановитьОтборСкдИзСтаройНастройки(НастройкаКорректная.ОтборНоменклатура_Номенклатура, "ОтборНоменклатура", Настройка);
	
	Если НастройкаКорректная.Свойство("ОтборСклады_Склады") Тогда
	
		ВосстановитьОтборСкдИзСтаройНастройки(НастройкаКорректная.ОтборСклады_Склады, "Склады", Настройка);
	
	КонецЕсли;
	
	ВосстановитьОтборСкдИзСтаройНастройки(НастройкаКорректная.ОтборИсключаемыеКонтрагенты_Контрагенты, "СпИсклКонтрагентов", Настройка);
	ВосстановитьОтборСкдИзСтаройНастройки(НастройкаКорректная.ОтборИсключаемыеКонтрагенты_Контрагенты, "КонтрагентыИсключаемые", Настройка);
	
	ВосстановитьОтборСкдИзСтаройНастройки(НастройкаКорректная.ОтборПоставщики_Контрагенты, "Поставщики", Настройка);
	// + Совместимость с прошлой версией сохраненных параметров
	//
	//ТД = ТекущаяДата();
	//
	//НастройкаКорректная.ДатаНач	= НачалоДня(ТД) - (НастройкаКорректная.ПериодВыгрузкиДней - 1) * 24 * 3600;
	//НастройкаКорректная.ДатаКон	= КонецДня(ТД);
	
	Возврат НастройкаКорректная;

КонецФункции // НастройкаПроверить()

Функция РаспарситьСерверПорт(Знач Сервер, Знач ПортПоУмолчанию = 443)

	Результат = Новый Структура("Сервер, Порт", Сервер, ПортПоУмолчанию);
	
	НомПоз = СтрНайтиЕх(Сервер, ":");
	
	Если НомПоз Тогда
	
		Результат.Сервер	= СокрЛП(Лев(Сервер		, НомПоз - 1));
		Результат.Порт		= Число(СокрЛП(Сред(Сервер	, НомПоз + 1)));
	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // РаспарситьСерверПорт()

Функция HTTP_Сервер_МассивПартнеров(Знач HTTP_Сервер, Знач API_KEY, Знач Отбор_ManfID = 0) Экспорт

	Если Не ЗначениеЗаполнено(HTTP_Сервер) Тогда
	
		ВызватьИсключение "HTTP сервер не указан";
	
	КонецЕсли;

	Если Не ЗначениеЗаполнено(API_KEY) Тогда
	
		ВызватьИсключение "API KEY не указан";
	
	КонецЕсли;
	
	SSL			= Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(), Новый СертификатыУдостоверяющихЦентровWindows());
	СерверПорт	= РаспарситьСерверПорт(HTTP_Сервер);
	НТТР		= Новый HTTPСоединение(СерверПорт.Сервер, СерверПорт.Порт, , , , , SSL, Истина);
	
	ЗаголовокHTTP = Новый Соответствие;
	ЗаголовокHTTP.Вставить("X-API-Key"		, API_KEY);
	ЗаголовокHTTP.Вставить("User-Agent"		, UserAgent());
	ЗаголовокHTTP.Вставить("Content-Type"	, "application/json");

	ЗапросHTTP		= Новый HTTPЗапрос("/api/v1/partners", ЗаголовокHTTP);
	
	Ответ			= НТТР.ВызватьHTTPМетод("GET", ЗапросHTTP);
	ПартнерыСтрокой = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 200 Тогда
	
		ВызватьИсключение ПартнерыСтрокой;
	
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ПартнерыСтрокой);

	partners	= ПрочитатьJSON(ЧтениеJSON);
	partnersТип = ТипЗнч(partners);
	
	Если partnersТип <> Тип("Массив") Тогда
	
		ВызватьИсключение "Неожиданный тип результата: " + partnersТип;
	
	КонецЕсли;
	
	Если Отбор_ManfID <> 0 Тогда
	
		Для х = -partners.ВГраница() По 0 Цикл
		
			Если partners[-х].ManfID <> Отбор_ManfID Тогда
			
				partners.Удалить(-х);
			
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат partners;

КонецФункции // HTTP_Сервер_МассивПартнеров()

Функция HTTP_Сервер_Доступен(Знач HTTP_Сервер, Знач API_KEY) Экспорт

	Если Не ЗначениеЗаполнено(HTTP_Сервер) Тогда
	
		ВызватьИсключение "HTTP сервер не указан";
	
	КонецЕсли;

	Если Не ЗначениеЗаполнено(API_KEY) Тогда
	
		ВызватьИсключение "API KEY не указан";
	
	КонецЕсли;
	
	SSL			= Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(), Новый СертификатыУдостоверяющихЦентровWindows());
	СерверПорт	= РаспарситьСерверПорт(HTTP_Сервер);
	НТТР		= Новый HTTPСоединение(СерверПорт.Сервер, СерверПорт.Порт, , , , , SSL, Истина);
	
	ЗаголовокHTTP = Новый Соответствие;
	ЗаголовокHTTP.Вставить("X-API-Key"		, API_KEY);
	ЗаголовокHTTP.Вставить("User-Agent"		, UserAgent());
	ЗаголовокHTTP.Вставить("Content-Type"	, "application/json");

	ЗапросHTTP		= Новый HTTPЗапрос("/api/v1/version", ЗаголовокHTTP);
	
	Ответ			= НТТР.ВызватьHTTPМетод("GET", ЗапросHTTP);
	Результат 		= Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 200 Тогда
	
		ВызватьИсключение Результат;
	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // HTTP_Сервер_Доступен()

Функция HTTP_Сервер_ОтправитьФайлы(Знач HTTP_ПартнерИмя, Знач HTTP_Сервер, Знач HTTP_API_KEY, Знач ФайлыДляОтправкиМассив) Экспорт

	Если Не ЗначениеЗаполнено(HTTP_Сервер) Тогда
	
		ВызватьИсключение "HTTP сервер не указан";
	
	КонецЕсли;

	Если Не ЗначениеЗаполнено(HTTP_API_KEY) Тогда
	
		ВызватьИсключение "API KEY не указан";
	
	КонецЕсли;

	Если Не ЗначениеЗаполнено(HTTP_ПартнерИмя) Тогда
	
		ВызватьИсключение "API KEY не указан";
	
	КонецЕсли;
	
	SSL			= Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(), Новый СертификатыУдостоверяющихЦентровWindows());
	СерверПорт	= РаспарситьСерверПорт(HTTP_Сервер);
	НТТР		= Новый HTTPСоединение(СерверПорт.Сервер, СерверПорт.Порт, , , , , SSL, Истина);
	
	РазделительФайлов	= СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	РазделительСтрокДД	= ПолучитьДвоичныеДанныеИзСтроки(РазделительСтрок(), КодировкаТекста.ANSI);
	
	Поток			= Новый ПотокВПамяти;
	ЗаписьДанных	= Новый ЗаписьДанных(Поток, КодировкаТекста.ANSI, , , , Ложь);
	
	Для каждого ФайлОписание Из ФайлыДляОтправкиМассив Цикл
		
		ЗаписьДанных.ЗаписатьСимволы("--" + РазделительФайлов);
		ЗаписьДанных.Записать(РазделительСтрокДД);
		ЗаписьДанных.ЗаписатьСимволы("Content-Disposition: form-data; filename=""");
		
		ЗаписьДанных.ЗаписатьСимволы(ФайлОписание.ФайлИмя);
		ЗаписьДанных.ЗаписатьСимволы("""");
		ЗаписьДанных.Записать(РазделительСтрокДД);
		ЗаписьДанных.ЗаписатьСимволы("Content-Type: text/plane");
		ЗаписьДанных.Записать(РазделительСтрокДД);
		ЗаписьДанных.Записать(РазделительСтрокДД);
		
		ЗаписьДанных.Записать(ФайлОписание.ФайлДвоичныеДанные);
		ЗаписьДанных.Записать(РазделительСтрокДД);
		
	КонецЦикла;
	
	ЗаписьДанных.Записать(РазделительСтрокДД);
	ЗаписьДанных.ЗаписатьСимволы("--" + РазделительФайлов + "--");
	ЗаписьДанных.Записать(РазделительСтрокДД);
	
	ЗаписьДанных.Закрыть();
	
	ТелоЗапросаДД = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	ЗаголовокHTTP = Новый Соответствие;
	
	ЗаголовокHTTP.Вставить("X-API-Key"		, HTTP_API_KEY);
	ЗаголовокHTTP.Вставить("User-Agent"		, UserAgent());
	ЗаголовокHTTP.Вставить("Content-Type"	, "multipart/form-data; boundary=" + РазделительФайлов);
	
	ЗапросHTTP = Новый HTTPЗапрос("/api/v1/files?partnerName=" + HTTP_ПартнерИмя, ЗаголовокHTTP);
	
	ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ТелоЗапросаДД);
	
	Ответ				= НТТР.ВызватьHTTPМетод("POST", ЗапросHTTP);
	СообщениеСервера	= Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 200 Тогда
	
		ВызватьИсключение СообщениеСервера;
	
	КонецЕсли;
	
	Возврат СообщениеСервера;
	
КонецФункции // HTTP_Сервер_ОтправитьФайлы()

#Область Производитель_Не_8052
// Не Coca Cola

Функция ТЗ_в_Текст(Знач ТЗ, Знач ПрогрессВыполнения, Знач Параметры)
	Перем Кэш;
	
	Строки	= Новый Массив;
	
	Колонки	= Новый Массив;
	Для каждого Колонка Из ТЗ.Колонки Цикл
	
		Колонки.Добавить(Колонка.Имя);	
	
	КонецЦикла;
	КолонкиВГраница	= Колонки.ВГраница();
	
	Если Не Колонки.Количество() Тогда
	
		Возврат "";
	
	КонецЕсли;
	
	КолонкаИмя = Колонки[0];
	Строки.Добавить(КолонкаИмя);
	
	Для х = 1 По КолонкиВГраница Цикл
		
		КолонкаИмя = Колонки[х];
		
		Строки.Добавить(Символы.Таб);
		Строки.Добавить(КолонкаИмя);
		
	КонецЦикла;
	
	Параметры.ДлительныеОперацииКоличество			= ТЗ.Количество();
	Параметры.ДлительныеОперацииТекущаяОперация		= 0;
	
	РазделительСтрок = РазделительСтрок(); // Символы.ПС
	
	ШагПрогресса		= Макс(1, Цел(ТЗ.Количество() / 100));
	ШагПрогрессаТекущий	= 0;
	
	Для каждого СтрТЗ Из ТЗ Цикл
		КолонкаИмя = Колонки[0];
	
		ШагПрогрессаТекущий	= ШагПрогрессаТекущий + 1;
		Если ШагПрогрессаТекущий = ШагПрогресса Тогда
		
			СообщитьПрогресс(Параметры, ПрогрессВыполнения, ШагПрогресса);
			ШагПрогрессаТекущий = 0;
		
		КонецЕсли;
		
		Строки.Добавить(РазделительСтрок);
		Строки.Добавить(ПредставлениеЗначения(СтрТЗ[КолонкаИмя], Кэш, , Параметры.ТаблицаТранслита));
		
		Для х = 1 По КолонкиВГраница Цикл
			
			КолонкаИмя = Колонки[х];
			
			Строки.Добавить(Символы.Таб);
			Строки.Добавить(ПредставлениеЗначения(СтрТЗ[КолонкаИмя], Кэш, , Параметры.ТаблицаТранслита));
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтрСоединитьЕх(Строки);
	
КонецФункции // ТЗ_в_Текст()
		
Функция ПредставлениеЗначения(Знач Зн, Кэш, Знач ХешФункцияДляСтрок, Знач ТаблицаТранслита)
	Перем Представление, МассивСигнатурЗамены, СигнатураЗамены;
	
	Если Зн = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(Кэш) <> Тип("Соответствие") Тогда
	
		Кэш = Новый Соответствие;
	
	КонецЕсли;
	
	Представление = Кэш[Зн];
	
	Если Представление <> Неопределено Тогда
	
		Возврат Представление;
	
	КонецЕсли;
	
	ТипЗнчЗн = ТипЗнч(Зн);
	Если ТипЗнчЗн = Тип("Число") Тогда
		Представление = Формат(Зн,"ЧРД=.; ЧН=; ЧГ=0");
		
	ИначеЕсли ТипЗнчЗн = Тип("Дата") Тогда
		Представление = Формат(НачалоДня(Зн),"ДФ=yyyyMMdd");
		
	ИначеЕсли Не ЗначениеЗаполнено(Зн) Тогда
		Представление = "";
		
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнчЗн) Тогда
		Представление = УникальныйИдентификаторПредставление(Зн.УникальныйИдентификатор());
		
	Иначе
		
		Представление = СокрЛП(Зн);
		
		Если ХешФункцияДляСтрок <> Неопределено Тогда
		
			Хэш = Новый ХешированиеДанных(ХешФункцияДляСтрок);
			Хэш.Добавить(ВРег(Зн));
			Представление = Формат(Хэш.ХешСумма, "ЧГ=0");
			
		Иначе
			
			МассивСигнатурЗамены = Новый Массив;
			МассивСигнатурЗамены.Добавить(Символы.Таб);
			МассивСигнатурЗамены.Добавить(Символы.ВТаб);
			МассивСигнатурЗамены.Добавить(Символы.ПС);
			МассивСигнатурЗамены.Добавить(Символы.ВК);
			МассивСигнатурЗамены.Добавить(Символ(22));
			
			Для Каждого СигнатураЗамены Из МассивСигнатурЗамены Цикл
				
				Представление = СокрЛП(СтрЗаменить(Представление, СигнатураЗамены," "));
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаТранслита.Количество() Тогда
	
		БуквыАлфавита = Новый Массив;
		Для х = 1 По СтрДлина(Представление) Цикл
		
			БукваАлфавита			= Сред(Представление, х, 1);
			БукваАлфавитаТранслит	= ТаблицаТранслита[БукваАлфавита];
			
			БуквыАлфавита.Добавить(?(БукваАлфавитаТранслит <> Неопределено, БукваАлфавитаТранслит, БукваАлфавита));
			
		КонецЦикла;
		
		Представление = СтрСоединитьЕх(БуквыАлфавита, "");
	
	КонецЕсли;
	
	Кэш.Вставить(Зн, Представление);
	
	Возврат Представление;
	
КонецФункции // ПредставлениеЗначения()

Функция УникальныйИдентификаторПредставление(Знач Зн) Экспорт
	
	Если Не ЗначениеЗаполнено(Зн) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат НРег(СтрЗаменить(СокрЛП(Зн),"-", ""));
	
КонецФункции // УникальныйИдентификаторПредставление()

#КонецОбласти

Функция ВнешняяОбработкаСсылка() Экспорт
	
	Перем ФормыОбычные;
	
	ФормыОбычные = ФормыОбычные();
	
	Запрос = Новый Запрос;
	
	#Область ФормыУправляемые
	
	Если Не ФормыОбычные Тогда
	
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	ДополнительныеОтчетыИОбработки.Ссылка КАК ВнешняяОбработкаСсылка
			|ИЗ
			|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
			|ГДЕ
			|	ДополнительныеОтчетыИОбработки.Вид = &Вид
			|	И ДополнительныеОтчетыИОбработки.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)
			//|	И ДополнительныеОтчетыИОбработки.Информация ПОДОБНО &Информация + ""%""
			|	И НЕ ДополнительныеОтчетыИОбработки.ПометкаУдаления
			|	И ДополнительныеОтчетыИОбработки.ИмяОбъекта = &ИмяОбъекта"
		;
		
		СведенияОВнешнейОбработке = СведенияОВнешнейОбработке();
		
		Запрос.УстановитьПараметр("Вид"			, Перечисления.ВидыДополнительныхОтчетовИОбработок[СведенияОВнешнейОбработке.Вид]);
		Запрос.УстановитьПараметр("ИмяОбъекта"	, Метаданные().Имя);
		
	КонецЕсли;
	
	#КонецОбласти

	ТЗ				= Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	ТзКоличество	= ТЗ.Количество();
	
	Если Не ТзКоличество Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТзКоличество > 1 Тогда
		СообщитьПользователю("ВНИМАНИЕ! Найдено несколько внешних обработок!");
	КонецЕсли;
	
	Возврат ТЗ[0].ВнешняяОбработкаСсылка;
	
КонецФункции // ВнешняяОбработкаСсылка()

#Область ТаблицыОбщие

Процедура СоздатьВременныеТаблицы(Запрос)
	
	КонфигурацияКод = КонфигурацияКод();
	
	#Область Конфигурация_UT11
	Если КонфигурацияКод = Конфигурация_UT11() Тогда
	
		Конфигурация_UT11_СоздатьВременныеТаблицы(Запрос);
		
		Возврат;
		
	КонецЕсли;
	#КонецОбласти
	
	ВызватьИсключение "Не поддерживаемая конфигурация """ + КонфигурацияКод + """!";
	
КонецПроцедуры // СоздатьВременныеТаблицы()

Функция ВыполнитьЗапросОстатки(Знач Запрос, Знач КорректныйManfid, Знач ЗапросТекст)
	Перем КонфигурацияКод;
	
	ПроверитьManfid(Запрос, КорректныйManfid);
	
	КонфигурацияКод = КонфигурацияКод();
	
	#Область Конфигурация_UT11
	Если КонфигурацияКод = Конфигурация_UT11() Тогда
	
		Возврат Конфигурация_UT11_ВыполнитьЗапросОстатки(Запрос, ЗапросТекст);
	
	КонецЕсли;
	#КонецОбласти
	
	ВызватьИсключение "Не поддерживаемая конфигурация """ + КонфигурацияКод + """!";
КонецФункции // ВыполнитьЗапросОстатки()

#Область Конфигурация_UT11
Функция Конфигурация_UT11_ПрефиксНомераДокументаВЗапросе(Знач ПолеМета, Знач ПолеЗапроса)
	
	Если ПолеМета = Неопределено Тогда
	
		Возврат """""";
	
	КонецЕсли;
	
	ПрефиксыДокументов = Новый СписокЗначений;
	ПрефиксыДокументов.Добавить("РеализацияТоваровУслуг"			, "РТУ_");
	ПрефиксыДокументов.Добавить("ВозвратТоваровОтКлиента"			, "ВТК_");
	ПрефиксыДокументов.Добавить("ПередачаТоваровМеждуОрганизациями"	, "ПТМО_");
	ПрефиксыДокументов.Добавить("ПриобретениеТоваровУслуг"			, "ПТУ_");
	ПрефиксыДокументов.Добавить("ПоступлениеТоваровУслуг"			, "ПТУ_");
	ПрефиксыДокументов.Добавить("ВозвратТоваровПоставщику"			, "ВТП_");
	ПрефиксыДокументов.Добавить("ПередачаТоваровХранителю"			, "ПТХ_");
	ПрефиксыДокументов.Добавить("ЧекККМ"							, "ЧККМ_");
	ПрефиксыДокументов.Добавить("ЧекККМВозврат"						, "ЧККМВ_");
	ПрефиксыДокументов.Добавить("КорректировкаРеализации"			, "КОР_");
	ПрефиксыДокументов.Добавить("ОтчетОРозничныхПродажах"			, "ОРП_");
	ПрефиксыДокументов.Добавить("ОтчетКомиссионера"					, "ОК_");
	ПрефиксыДокументов.Добавить("ПеремещениеТоваров"				, "ПТ_");
	
	ВыраженияЗапроса = Новый Массив;
	
	Для х = -ПрефиксыДокументов.Количество() + 1 По 0 Цикл
	
		ПрефиксыДокументовСтрока = ПрефиксыДокументов[-х];
		
		ДокументМета = Метаданные.Документы.Найти(ПрефиксыДокументовСтрока.Значение);
		
		Если ДокументМета = Неопределено Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		ПолеТип = Тип("ДокументСсылка." + ДокументМета.Имя);
		
		ПрефиксыДокументовСтрока.Значение = ПолеТип;
		
		Если Не ПолеМета.Тип.СодержитТип(ПолеТип) Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		ВыраженияЗапроса.Добавить(СтрШаблон(
			"		КОГДА %1 ССЫЛКА Документ.%2 ТОГДА ""%3"""
			, ПолеЗапроса								// 1
			, ДокументМета.Имя							// 2
			, ПрефиксыДокументовСтрока.Представление	// 3
		));
	
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ВыраженияЗапроса) Тогда
	
		Возврат """""";
	
	КонецЕсли;
	
	ВыраженияЗапроса.Вставить(0, "ВЫБОР");
	ВыраженияЗапроса.Добавить("	ИНАЧЕ """" КОНЕЦ");
	
	Возврат СтрСоединитьЕх(ВыраженияЗапроса, Символы.ПС);
	
КонецФункции // Конфигурация_UT11_ПрефиксНомераДокументаВЗапросе()
	
Функция Конфигурация_UT11()

	Возврат "UT11";

КонецФункции // Конфигурация_UT11()

Процедура Конфигурация_UT11_СоздатьВременныеТаблицы(Запрос)
	Перем Кэш, ПоступлениеТоваровУслуг;
	
	ПоступлениеТоваровУслуг = Не ЕстьДокумент("ПриобретениеТоваровУслуг");
	
	РегистрОстатков = "ТоварыОрганизаций";
	Для каждого ДокументИмя Из СтрРазделитьЕх("ЧекККМ,ЧекККМВозврат", ",") Цикл
	
		Если ЕстьДокумент(ДокументИмя) Тогда
			
			Настройки_ЧекККМ = Запрос.Параметры.ТипыДокументов.НайтиПоЗначению(Тип("ДокументСсылка." + ДокументИмя));
			
			Если Настройки_ЧекККМ <> Неопределено И Настройки_ЧекККМ.Пометка Тогда
			
				РегистрОстатков = "ТоварыНаСкладах";
				
				Прервать;
				
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЦикла;
	Запрос.УстановитьПараметр("РегистрОстатков", РегистрОстатков);
	
	Если РегистрОстатков = "ТоварыНаСкладах" И Не ЗначениеЗаполнено(Запрос.Параметры.ОсновнаяОрганизация) Тогда
	
		Ошибка = Запрос.Параметры.НастройкаИмя + " - не указана основная организация";
		
		СообщитьПользователю(
				Ошибка
			,,	"ОсновнаяОрганизация"
		);
		
		ВызватьИсключение Ошибка;
	
	КонецЕсли;
	
	#Область ВТ_РозничныеМагазины
	//СообщитьПрогресс(Запрос.Параметры, "ВТ_РозничныеМагазины");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РозничныеМагазины.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_РозничныеМагазины
		|ИЗ
		|	Справочник.Склады КАК РозничныеМагазины
		|ГДЕ
		|	НЕ РозничныеМагазины.ПометкаУдаления
		|	И РозничныеМагазины.Ссылка В(&РозничныеМагазины)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка"
	;
	
	Если Запрос.Параметры.ПеремещенияКакПродажи и Запрос.Параметры.РозничныеМагазины = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст
			, "И РозничныеМагазины.Ссылка В(&РозничныеМагазины)"
			, "И РозничныеМагазины.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)"
		);
	КонецЕсли;
	
	Запрос.Выполнить(); // ВТ_РозничныеМагазины
	
	#КонецОбласти

	#Область ВТ_СегментыПартнеровОтбор
	
	Если Запрос.Параметры.СегментыПартнеров <> Неопределено Тогда
	
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПартнерыСегмента.Партнер КАК Партнер
			|ПОМЕСТИТЬ ВТ_СегментыПартнеровОтбор
			|ИЗ
			|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
			|ГДЕ
			|	ПартнерыСегмента.Сегмент В(&СегментыПартнеров)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Партнер";
		
		Запрос.Выполнить(); // ВТ_СегментыПартнеровОтбор
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВТ_Организации
	СообщитьПрогресс(Запрос.Параметры, "ВТ_Организации");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА &ОсновнаяОрганизация = НЕОПРЕДЕЛЕНО
		|			ТОГДА Организации.Ссылка
		|		ИНАЧЕ &ОсновнаяОрганизация
		|	КОНЕЦ КАК Филиал,
		|	ВЫБОР
		|		КОГДА &ОсновнаяОрганизация = НЕОПРЕДЕЛЕНО
		|			ТОГДА Организации.Ссылка
		|		ИНАЧЕ &ОсновнаяОрганизация
		|	КОНЕЦ КАК whcode
		|ПОМЕСТИТЬ ВТ_Организации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|	И Организации.Ссылка В(&Организации)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка"
	;
	
	Если Запрос.Параметры.Организации = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Организации.Ссылка В(&Организации)", "");
	КонецЕсли;
	
	Запрос.Выполнить(); // ВТ_Организации
	
	#КонецОбласти

	#Область ВТ_ФилиалыСклады
	
	Запрос.Текст =
		//"ВЫБРАТЬ
		//|	Филиалы.Ссылка КАК Ссылка,
		//|	ВЫБОР
		//|		КОГДА &ОсновнаяОрганизация = НЕОПРЕДЕЛЕНО
		//|			ТОГДА Филиалы.Ссылка
		//|		ИНАЧЕ &ОсновнаяОрганизация
		//|	КОНЕЦ КАК Филиал,
		//|	ВЫБОР
		//|		КОГДА &ОсновнаяОрганизация = НЕОПРЕДЕЛЕНО
		//|			ТОГДА Филиалы.Ссылка
		//|		ИНАЧЕ &ОсновнаяОрганизация
		//|	КОНЕЦ КАК whcode
		//|ПОМЕСТИТЬ ВТ_ФилиалыСклады
		//|ИЗ
		//|	Справочник.Склады КАК Филиалы
		//|ГДЕ
		//|	НЕ Филиалы.ПометкаУдаления
		//|	И Филиалы.Ссылка В(&ФилиалыСклады)
		//|
		//|ИНДЕКСИРОВАТЬ ПО
		//|	Ссылка"
		"ВЫБРАТЬ
		|	Филиалы.Ссылка КАК Ссылка,
		|	Филиалы.Ссылка КАК whcode
		|ПОМЕСТИТЬ ВТ_ФилиалыСклады
		|ИЗ
		|	Справочник.Склады КАК Филиалы
		|ГДЕ
		|	НЕ Филиалы.ПометкаУдаления
		|	И Филиалы.Ссылка В(&ФилиалыСклады)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка"
	;
	
	Запрос.Выполнить(); // ВТ_ФилиалыСклады
	
	#КонецОбласти
	
	#Область ВТ_ФилиалыПодразделения
	
	Запрос.Текст =
		//"ВЫБРАТЬ
		//|	Филиалы.Ссылка КАК Ссылка,
		//|	ВЫБОР
		//|		КОГДА &ОсновнаяОрганизация = НЕОПРЕДЕЛЕНО
		//|			ТОГДА Филиалы.Ссылка
		//|		ИНАЧЕ &ОсновнаяОрганизация
		//|	КОНЕЦ КАК Филиал,
		//|	ВЫБОР
		//|		КОГДА &ОсновнаяОрганизация = НЕОПРЕДЕЛЕНО
		//|			ТОГДА Филиалы.Ссылка
		//|		ИНАЧЕ &ОсновнаяОрганизация
		//|	КОНЕЦ КАК whcode
		//|ПОМЕСТИТЬ ВТ_ФилиалыПодразделения
		//|ИЗ
		//|	Справочник.СтруктураПредприятия КАК Филиалы
		//|ГДЕ
		//|	НЕ Филиалы.ПометкаУдаления
		//|	И Филиалы.Ссылка В(&ФилиалыСклады)
		//|
		//|ИНДЕКСИРОВАТЬ ПО
		//|	Ссылка"
		"ВЫБРАТЬ
		|	Филиалы.Ссылка КАК Ссылка,
		|	Филиалы.Ссылка КАК whcode
		|ПОМЕСТИТЬ ВТ_ФилиалыПодразделения
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК Филиалы
		|ГДЕ
		|	НЕ Филиалы.ПометкаУдаления
		|	И Филиалы.Ссылка В(&ФилиалыСклады)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка"
	;
	
	Запрос.Выполнить(); // ВТ_ФилиалыПодразделения
	
	#КонецОбласти

	#Область ВТ_СтавкиНДС
	
	Если Метаданные.Справочники.Найти("СтавкиНДС") = Неопределено Тогда
	
		СтавкиНДС = Новый ТаблицаЗначений;
		СтавкиНДС.Колонки.Добавить("Ссылка"				, Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
		СтавкиНДС.Колонки.Добавить("СтавкаНДС"			, Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(4, 2, ДопустимыйЗнак.Неотрицательный)));
		
		ОМ = ОбщийМодуль("УчетНДСПереопределяемый");
		
		Попытка
		
			ОМ.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.БезНДС);
		
		Исключение
			
			ОМ = ОбщийМодуль("УчетНДСУПКлиентСервер"); // Для ERP
		
		КонецПопытки;
		
		Для каждого СтавкаНДС Из Перечисления.СтавкиНДС Цикл
			
			СтавкиНДС_Строка = СтавкиНДС.Добавить();
			
			СтавкиНДС_Строка.Ссылка		= СтавкаНДС;
			СтавкиНДС_Строка.СтавкаНДС	= ОМ.ПолучитьСтавкуНДС(СтавкаНДС);
		
		КонецЦикла;
		
		Запрос.УстановитьПараметр("СтавкиНДС", СтавкиНДС);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СтавкиНДС.Ссылка КАК Ссылка,
			|	СтавкиНДС.СтавкаНДС КАК СтавкаНДС
			|ПОМЕСТИТЬ ВТ_СтавкиНДС
			|ИЗ
			|	&СтавкиНДС КАК СтавкиНДС
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка";
		
	Иначе	
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СтавкиНДС.Ссылка КАК Ссылка,
			|	ЕстьNULL(СтавкиНДС.Ставка, 0) КАК СтавкаНДС
			|ПОМЕСТИТЬ ВТ_СтавкиНДС
			|ИЗ
			|	Справочник.СтавкиНДС КАК СтавкиНДС
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка";
	
	КонецЕсли;
	
	Запрос.Выполнить();
	
	#КонецОбласти
	
	#Область ВТ_Поступления
	
	ЦеныПоПоступлениям = Не ЗначениеЗаполнено(Запрос.Параметры.ВидЦеныЗакупочная);
	
	Если Запрос.Параметры.Номенклатура = Неопределено Или ЦеныПоПоступлениям Тогда
	
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1000000000
			|	Закупки.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
			|	Закупки.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
			|	ВЫБОР
			|		КОГДА &НеВыгружатьСерии
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|		ИНАЧЕ Закупки.АналитикаУчетаНоменклатуры.Серия
			|	КОНЕЦ КАК Серия,
			|	Закупки.Период КАК Период,
			|	ВЫБОР
			|		КОГДА &НеВыгружатьСерии
			|			ТОГДА """"
			|		ИНАЧЕ ВЫРАЗИТЬ(Закупки.Регистратор КАК Документ.ПриобретениеТоваровУслуг).Номер
			|	КОНЕЦ КАК parcel_no,
			|	Закупки.СтоимостьОборот КАК СтоимостьСНДС,
			|	Закупки.СтоимостьБезНДСОборот КАК СтоимостьБезНДС,
			|	Закупки.КоличествоОборот КАК Количество,
			|	ВЫРАЗИТЬ(Закупки.Регистратор КАК Документ.ПриобретениеТоваровУслуг).ЦенаВключаетНДС КАК ЦенаВключаетНДС,
			|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
			|ПОМЕСТИТЬ ВТ_Поступления
			|ИЗ
			|	РегистрНакопления.Закупки.Обороты(
			|			ДОБАВИТЬКДАТЕ(&ДатаНач, ГОД, -1),
			|			&ДатаКон,
			|			Регистратор,
			|			Организация В
			|					(ВЫБРАТЬ
			|						ВТ_Организации.Ссылка
			|					ИЗ
			|						ВТ_Организации КАК ВТ_Организации)
			|				И АналитикаУчетаНоменклатуры.Номенклатура В (&Номенклатура)
			|				И Контрагент В (&Поставщики)) КАК Закупки
			|ГДЕ
			|	Закупки.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
			|	И Закупки.КоличествоОборот > 0
			|	И Закупки.СтоимостьОборот > 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Серия,
			|	Период
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Серия,
			|	НомерЗаписи";
		
		Если Запрос.Параметры.Номенклатура = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И АналитикаУчетаНоменклатуры.Номенклатура В (&Номенклатура)", "");
		КонецЕсли;

		Если Запрос.Параметры.Поставщики = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Контрагент В (&Поставщики)", "");
		КонецЕсли;
		
		Если ПоступлениеТоваровУслуг Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриобретениеТоваровУслуг", "Документ.ПоступлениеТоваровУслуг");
		КонецЕсли;
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВТ_Номенклатура
	СообщитьПрогресс(Запрос.Параметры, "ВТ_Номенклатура");
	
	Если Запрос.Параметры.Номенклатура <> Неопределено Или Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_Поступления") <> Неопределено Тогда
	
		Запрос.Текст = //вес переводим в граммы, объем - в мл, площадь - в см2
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА СпрНоменклатура.Код <> """"
		|			ТОГДА СпрНоменклатура.Код
		|		ИНАЧЕ СпрНоменклатура.Ссылка
		|	КОНЕЦ КАК code,
		|	ВЫБОР
		|		КОГДА НЕ ВТ_ТаблицаПересчета.ru ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|					КОГДА &ИспользоватьКодУпаковкиВместоКодаШтуки
		|							И ВТ_ТаблицаПересчета.ru = 1
		|						ТОГДА 0
		|					ИНАЧЕ ВТ_ТаблицаПересчета.ru
		|				КОНЕЦ
		|		КОГДА СпрНоменклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
		|			ТОГДА 2
		|		КОГДА СпрНоменклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
		|			ТОГДА 4
		|		КОГДА СпрНоменклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)
		|			ТОГДА 5
		|		КОГДА СпрНоменклатура.ЕдиницаИзмерения.Наименование = ""шт""
		|			ТОГДА ВЫБОР
		|					КОГДА &ИспользоватьКодУпаковкиВместоКодаШтуки
		|						ТОГДА 0
		|					ИНАЧЕ 1
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ru,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_ТаблицаПересчета.Коэффициент, 0) > 0
		|			ТОГДА ВТ_ТаблицаПересчета.Коэффициент
		|		ИНАЧЕ ВЫБОР СпрНоменклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
		|					ТОГДА 1000 * СпрНоменклатура.ЕдиницаИзмерения.Числитель / СпрНоменклатура.ЕдиницаИзмерения.Знаменатель
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
		|					ТОГДА 100 * 100 * 100 * СпрНоменклатура.ЕдиницаИзмерения.Числитель / СпрНоменклатура.ЕдиницаИзмерения.Знаменатель
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)
		|					ТОГДА 100 * 100 * СпрНоменклатура.ЕдиницаИзмерения.Числитель / СпрНоменклатура.ЕдиницаИзмерения.Знаменатель
		|				ИНАЧЕ 1
		|			КОНЕЦ
		|	КОНЕЦ КАК Коэффициент,
		|	ВЫБОР
		|		КОГДА СпрНоменклатура.ВесИспользовать
		|				И СпрНоменклатура.ВесЧислитель <> 0
		|				И ЕСТЬNULL(СпрНоменклатура.ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
		|			ТОГДА ВЫРАЗИТЬ(1000 * СпрНоменклатура.ВесЧислитель / СпрНоменклатура.ВесЗнаменатель * СпрНоменклатура.ВесЕдиницаИзмерения.Числитель / СпрНоменклатура.ВесЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(18, 3))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК weight,
		|	ЕСТЬNULL(ВТ_СтавкиНДС.СтавкаНДС, 0) КАК СтавкаНДС
		|ПОМЕСТИТЬ ВТ_Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаПересчета КАК ВТ_ТаблицаПересчета
		|		ПО (ВТ_ТаблицаПересчета.Номенклатура = СпрНоменклатура.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкиНДС КАК ВТ_СтавкиНДС
		|		ПО (ВТ_СтавкиНДС.Ссылка = СпрНоменклатура.СтавкаНДС)
		|ГДЕ
		|	СпрНоменклатура.Ссылка В(&Номенклатура)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка"
		;
	
		Если Запрос.Параметры.Номенклатура = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СпрНоменклатура.Ссылка В(&Номенклатура)", "
			|	СпрНоменклатура.Ссылка В
			|			(ВЫБРАТЬ
			|				ВТ_Поступления.Номенклатура
			|			ИЗ
			|				ВТ_Поступления КАК ВТ_Поступления)		
			|");
		КонецЕсли;
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	ВТ_Номенклатура = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_Номенклатура");
	
	Если ВТ_Номенклатура = Неопределено Или ВТ_Номенклатура.ПолучитьДанные().Пустой() Тогда
	
		Ошибка = "Не удалось определить товары по закупкам выбранных поставщиков за период "
			+ ПредставлениеПериода(ДобавитьМесяц(Запрос.Параметры.ДатаНач, -12), Запрос.Параметры.ДатаКон, "ФП = Истина");
		
		СообщитьПользователю(
				Ошибка
			,,	Запрос.Параметры.СоответствиеПеременныхЗапросаОтборам["Номенклатура"] + ".Настройки.Отбор"
		);
		
		ВызватьИсключение Ошибка;
	
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьПустыеКоды
		|ИЗ
		|	ВТ_Номенклатура КАК ВТ_Номенклатура
		|ГДЕ
		|	ВТ_Номенклатура.code ССЫЛКА Справочник.Номенклатура";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
	
		ВТ_ЗаменитьЗначенияНаКоды(Запрос, "ВТ_Номенклатура", "code", Ложь);
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВТ_ЗакупочныеЦены
	
	СообщитьПрогресс(Запрос.Параметры, "ВТ_ЗакупочныеЦены");
	
	Если ЦеныПоПоступлениям Тогда
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТ_Поступления.Номенклатура КАК Номенклатура,
		|	ВТ_Поступления.Характеристика КАК Характеристика,
		|	ВТ_Поступления.Серия КАК Серия,
		|	СРЕДНЕЕ(ВТ_Поступления.СтоимостьБезНДС / ВТ_Поступления.Количество) КАК ЦенаБезНДС,
		|	СРЕДНЕЕ(ВТ_Поступления.СтоимостьСНДС / ВТ_Поступления.Количество) КАК ЦенаСНДС
		|ПОМЕСТИТЬ ВТ_ЗакупочныеЦены_Средние
		|ИЗ
		|	ВТ_Поступления КАК ВТ_Поступления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Поступления.Номенклатура,
		|	ВТ_Поступления.Серия,
		|	ВТ_Поступления.Характеристика
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Поступления.Номенклатура КАК Номенклатура,
		|	ВТ_Поступления.Характеристика КАК Характеристика,
		|	ВТ_Поступления.Серия КАК Серия,
		|	ВТ_Поступления.СтоимостьБезНДС / ВТ_Поступления.Количество КАК ЦенаБезНДС,
		|	ВТ_Поступления.СтоимостьСНДС / ВТ_Поступления.Количество КАК ЦенаСНДС,
		|	ВТ_ЗакупочныеЦены_Средние.ЦенаБезНДС КАК ЦенаБезНДС_Средняя,
		|	ВТ_ЗакупочныеЦены_Средние.ЦенаСНДС КАК ЦенаСНДС_Средняя,
		|	ВТ_Поступления.parcel_no КАК parcel_no
		|ПОМЕСТИТЬ ВТ_ЗакупочныеЦены
		|ИЗ
		|	ВТ_Поступления КАК ВТ_Поступления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗакупочныеЦены_Средние КАК ВТ_ЗакупочныеЦены_Средние
		|		ПО (ВТ_ЗакупочныеЦены_Средние.Номенклатура = ВТ_Поступления.Номенклатура)
		|			И (ВТ_ЗакупочныеЦены_Средние.Характеристика = ВТ_Поступления.Характеристика)
		|			И (ВТ_ЗакупочныеЦены_Средние.Серия = ВТ_Поступления.Серия)
		|ГДЕ
		|	(ВТ_Поступления.Номенклатура, ВТ_Поступления.Характеристика, ВТ_Поступления.Серия, ВТ_Поступления.НомерЗаписи) В
		|			(ВЫБРАТЬ
		|				ВТ_Поступления_2.Номенклатура,
		|				ВТ_Поступления_2.Характеристика,
		|				ВТ_Поступления_2.Серия,
		|				МАКСИМУМ(ВТ_Поступления_2.НомерЗаписи)
		|			ИЗ
		|				ВТ_Поступления КАК ВТ_Поступления_2
		|			СГРУППИРОВАТЬ ПО
		|				ВТ_Поступления_2.Номенклатура,
		|				ВТ_Поступления_2.Характеристика,
		|				ВТ_Поступления_2.Серия)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Серия";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗакупочныеЦены.Номенклатура КАК Номенклатура,
		|	ЗакупочныеЦены.Характеристика КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
		|	ЗакупочныеЦены.ВидЦены.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ЗакупочныеЦены.Цена КАК Цена,
		|	ЗакупочныеЦены.Номенклатура.СтавкаНДС КАК СтавкаНДС,
		|	"""" КАК parcel_no
		|ПОМЕСТИТЬ ВТ_ЗакупочныеЦены_Врем
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&ДатаКон,
		|			ВидЦены = &ВидЦеныЗакупочная
		|				И Номенклатура В
		|					(ВЫБРАТЬ
		|						ВТ_Номенклатура.Ссылка
		|					ИЗ
		|						ВТ_Номенклатура КАК ВТ_Номенклатура)) КАК ЗакупочныеЦены
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗакупочныеЦеныСредние.Номенклатура КАК Номенклатура,
		|	ЗакупочныеЦеныСредние.Характеристика КАК Характеристика,
		|	СРЕДНЕЕ(ЗакупочныеЦеныСредние.Цена) КАК Цена
		|ПОМЕСТИТЬ ВТ_ЗакупочныеЦены_Средние
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры КАК ЗакупочныеЦеныСредние
		|ГДЕ
		|	ЗакупочныеЦеныСредние.Период МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаНач, ГОД, -1) И &ДатаКон
		|	И ЗакупочныеЦеныСредние.ВидЦены = &ВидЦеныЗакупочная
		|	И (ЗакупочныеЦеныСредние.Номенклатура, ЗакупочныеЦеныСредние.Характеристика) В
		|			(ВЫБРАТЬ
		|				ВТ_ЗакупочныеЦены_Врем.Номенклатура,
		|				ВТ_ЗакупочныеЦены_Врем.Характеристика
		|			ИЗ
		|				ВТ_ЗакупочныеЦены_Врем КАК ВТ_ЗакупочныеЦены_Врем)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗакупочныеЦеныСредние.Характеристика,
		|	ЗакупочныеЦеныСредние.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗакупочныеЦены.Номенклатура КАК Номенклатура,
		|	ЗакупочныеЦены.Характеристика КАК Характеристика,
		|	ЗакупочныеЦены.Серия КАК Серия,
		|	ВЫБОР
		|		КОГДА ЗакупочныеЦены.ЦенаВключаетНДС
		|			ТОГДА ЗакупочныеЦены.Цена / (1 + 0.01 * ЕСТЬNULL(ВТ_СтавкиНДС.СтавкаНДС, 0))
		|		ИНАЧЕ ЗакупочныеЦены.Цена
		|	КОНЕЦ КАК ЦенаБезНДС,
		|	ВЫБОР
		|		КОГДА ЗакупочныеЦены.ЦенаВключаетНДС
		|			ТОГДА ЗакупочныеЦены.Цена
		|		ИНАЧЕ ЗакупочныеЦены.Цена * (1 + 0.01 * ЕСТЬNULL(ВТ_СтавкиНДС.СтавкаНДС, 0))
		|	КОНЕЦ КАК ЦенаСНДС,
		|	ВЫБОР
		|		КОГДА ЗакупочныеЦены.ЦенаВключаетНДС
		|			ТОГДА ЗакупочныеЦены_Средние.Цена / (1 + 0.01 * ЕСТЬNULL(ВТ_СтавкиНДС.СтавкаНДС, 0))
		|		ИНАЧЕ ЗакупочныеЦены_Средние.Цена
		|	КОНЕЦ КАК ЦенаБезНДС_Средняя,
		|	ВЫБОР
		|		КОГДА ЗакупочныеЦены.ЦенаВключаетНДС
		|			ТОГДА ЗакупочныеЦены_Средние.Цена
		|		ИНАЧЕ ЗакупочныеЦены_Средние.Цена * (1 + 0.01 * ЕСТЬNULL(ВТ_СтавкиНДС.СтавкаНДС, 0))
		|	КОНЕЦ КАК ЦенаСНДС_Средняя,
		|	ЗакупочныеЦены.parcel_no КАК parcel_no
		|ПОМЕСТИТЬ ВТ_ЗакупочныеЦены
		|ИЗ
		|	ВТ_ЗакупочныеЦены_Врем КАК ЗакупочныеЦены
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗакупочныеЦены_Средние КАК ЗакупочныеЦены_Средние
		|		ПО ЗакупочныеЦены.Номенклатура = ЗакупочныеЦены_Средние.Номенклатура
		|			И ЗакупочныеЦены.Номенклатура = ЗакупочныеЦены_Средние.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкиНДС КАК ВТ_СтавкиНДС
		|		ПО (ВТ_СтавкиНДС.Ссылка = ЗакупочныеЦены.СтавкаНДС)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ЗакупочныеЦены_Врем
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ЗакупочныеЦены_Средние
		|";
		
	КонецЕсли;
	
	Запрос.Выполнить(); // ВТ_ЗакупочныеЦены
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_Поступления") <> Неопределено Тогда
	
		УничтожитьВременныеТаблицы(Запрос.МенеджерВременныхТаблиц, "ВТ_Поступления");
	
	КонецЕсли;
	
	#КонецОбласти

	#Область ВТ_РозничныеЦены

	Запрос.Текст =
		"ВЫБРАТЬ
		|	Цены.Номенклатура КАК Номенклатура,
		|	Цены.Характеристика КАК Характеристика,
		|	Цены.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_РозничныеЦены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&ДатаКон,
		|			ВидЦены = &ВидЦеныРозничная
		|				И Номенклатура В
		|					(ВЫБРАТЬ
		|						ВТ_Номенклатура.Ссылка
		|					ИЗ
		|						ВТ_Номенклатура КАК ВТ_Номенклатура)) КАК Цены
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика";

	Запрос.Выполнить(); // ВТ_РозничныеЦены
	
	#КонецОбласти
	
	#Область ВТ_Склады
	СообщитьПрогресс(Запрос.Параметры, "ВТ_Склады");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Склады.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Склады
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	НЕ Склады.ПометкаУдаления
		//|	И НЕ Склады.ЭтоГруппа
		|	И Склады.Ссылка В(&Склады)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
	
	Если Запрос.Параметры.Склады = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Склады.Ссылка В(&Склады)", "");
	КонецЕсли;
	Запрос.Выполнить();
	
	#КонецОбласти
	
	#Область ВТ_Характеристики
	СообщитьПрогресс(Запрос.Параметры, "ВТ_Характеристики");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка,
		|	ХарактеристикиНоменклатуры.Наименование КАК Наименование,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК Код
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец В
		|			(ВЫБРАТЬ
		|				ВТ_Номенклатура.Ссылка
		|			ИЗ
		|				ВТ_Номенклатура КАК ВТ_Номенклатура
		|		
		|			ОБЪЕДИНИТЬ ВСЕ
		|		
		|			ВЫБРАТЬ
		|				ВТ_Номенклатура.Ссылка.ВидНоменклатуры
		|			ИЗ
		|				ВТ_Номенклатура КАК ВТ_Номенклатура)";
	
	ХарактеристикиНоменклатуры = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	ПараЗамен = Новый Соответствие;
	ПараЗамен.Вставить(" "			, "");
	ПараЗамен.Вставить("	"		, "");
	ПараЗамен.Вставить(Символы.ПС	, "");
	ПараЗамен.Вставить(""""			, "");
	ПараЗамен.Вставить("."			, "_");
	ПараЗамен.Вставить(","			, "_");
	
	Для каждого СтрТЗ Из ХарактеристикиНоменклатуры Цикл
		
		Если Запрос.Параметры.ИспользоватьВнутренниеКодыХарактеристик Тогда
			
			Код = СтрЗаменитьЕх(СтрТЗ.Ссылка.УникальныйИдентификатор(), "-", "");
		
		Иначе
		
			Код = СокрЛП(СтрТЗ.Наименование);
			
			Для каждого КлючИЗначение Из ПараЗамен Цикл
				Код = СтрЗаменить(Код, КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
		СтрТЗ.Код = Код;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка,
		|	ХарактеристикиНоменклатуры.Код КАК Код
		|ПОМЕСТИТЬ ВТ_Характеристики
		|ИЗ
		|	&ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
	Запрос.Выполнить();
	ХарактеристикиНоменклатуры.Очистить();
	
	#КонецОбласти
	
	#Область ВТ_ОтборОстатки
	
	Если Запрос.Параметры.РегистрОстатков = "ТоварыОрганизаций" Тогда
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Обороты.Регистратор КАК Регистратор,
		|	Обороты.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	Обороты.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТ_ОтборОстатки
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Запись,
		|			АналитикаУчетаНоменклатуры.Номенклатура В
		|					(ВЫБРАТЬ
		|						ВТ_Номенклатура.Ссылка
		|					ИЗ
		|						ВТ_Номенклатура КАК ВТ_Номенклатура)
		|				И Организация В
		|					(ВЫБРАТЬ
		|						ВТ_Организации.Ссылка
		|					ИЗ
		|						ВТ_Организации КАК ВТ_Организации)
		|				И &АналитикаУчетаНоменклатурыМестоХранения В
		|					(ВЫБРАТЬ
		|						ВТ_Склады.Ссылка
		|					ИЗ
		|						ВТ_Склады КАК ВТ_Склады)) КАК Обороты
		|ГДЕ
		|	&ОтборПоТипуДокументов_ТоварыОрганизаций
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Номенклатура,
		|	Характеристика";
	
		Запрос.Текст = СтрЗаменить(Запрос.Текст
		, "&ОтборПоТипуДокументов_ТоварыОрганизаций"
		, ТекстОтбораПоТипуДокументов(
			"Обороты.Регистратор"
			, "ОтчетОРозничныхПродажах,КорректировкаРеализации,ОтчетКомиссионера"
			, Запрос.Параметры.ТипыДокументов
			)
		);

		Запрос.Текст = СтрЗаменить(Запрос.Текст
			, "&АналитикаУчетаНоменклатурыМестоХранения"
			, ?( Метаданные.Справочники.КлючиАналитикиУчетаНоменклатуры.Реквизиты.Найти("МестоХранения") <> Неопределено
				, "АналитикаУчетаНоменклатуры.МестоХранения"
				, "АналитикаУчетаНоменклатуры.Склад"
			));
	
	Иначе // ТоварыНаСкладах
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Обороты.Регистратор КАК Регистратор,
		|	Обороты.Номенклатура КАК Номенклатура,
		|	Обороты.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТ_ОтборОстатки
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Запись,
		|			Номенклатура В
		|					(ВЫБРАТЬ
		|						ВТ_Номенклатура.Ссылка
		|					ИЗ
		|						ВТ_Номенклатура КАК ВТ_Номенклатура)
		|				И Склад В
		|					(ВЫБРАТЬ
		|						ВТ_Склады.Ссылка
		|					ИЗ
		|						ВТ_Склады КАК ВТ_Склады)) КАК Обороты
		|ГДЕ
		|	&ОтборПоТипуДокументов_ТоварыНаСкладах
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Номенклатура,
		|	Характеристика";
	
		Запрос.Текст = СтрЗаменить(Запрос.Текст
		, "&ОтборПоТипуДокументов_ТоварыНаСкладах"
		, ТекстОтбораПоТипуДокументов(
			"Обороты.Регистратор"
			, "ОтчетОРозничныхПродажах,КорректировкаРеализации"
			, Запрос.Параметры.ТипыДокументов
			)
		);
		
	КонецЕсли;
	
	Запрос.Выполнить(); // ВТ_ОтборОстатки
	
	#КонецОбласти
	
	#Область ВТ_Продажи_Врем
	
	СообщитьПрогресс(Запрос.Параметры, "ВТ_Продажи");
	
	#Область КлиентомЯвляется
	ТорговойТочкойЯвляется = Запрос.Параметры.ТорговойТочкойЯвляется;
	
	//("Партнер"		, "Клиент - это контрагент, точка доставки - это партнер");
	//("Контрагент"		, "Клиент - это партнер, точка доставки - это контрагент");
	//("Перевозчик"		, "Клиент - это контрагент, точка доставки - это перевозчик");
	//("АдресДоставки"	, "Клиент - это контрагент, точка доставки - это адрес доставки в документе");
	//("Договор"		, "Клиент - это контрагент, точка доставки - это договор");
	//("Отсутствует"	, "Клиент - это контрагент, точка доставки отсутствует");
	//("БезКлиента"		, "Клиент не определен");
	
	Если ТорговойТочкойЯвляется = "Контрагент" Тогда
	
		КлиентомЯвляется = "Партнер";
	
	ИначеЕсли	ТорговойТочкойЯвляется = "Партнер"
			или	ТорговойТочкойЯвляется = "Перевозчик"
			или	ТорговойТочкойЯвляется = "АдресДоставки"
			или	ТорговойТочкойЯвляется = "Договор"
			или	ТорговойТочкойЯвляется = "Склад"
			или	ТорговойТочкойЯвляется = "Отсутствует"
		Тогда
	
		КлиентомЯвляется = "Контрагент";
		
	ИначеЕсли ТорговойТочкойЯвляется = "БезКлиента" Тогда
		
		КлиентомЯвляется = "БезКлиента";
		
	Иначе
		
		ВызватьИсключение "Недопустимое значение для параметра ""ТорговойТочкойЯвляется"" - """ + ТорговойТочкойЯвляется + """";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КлиентомЯвляется", КлиентомЯвляется);
	
	#КонецОбласти
	
	#Область ВТ_Отбор_Продажи
	
	// Т.к. мы ниже берем аналитику по проведенным документам, а не по регистрам накопления, то надо убедиться, что документы сделали движения по продажам
	//	Не все проведенные реализации отражаются в учете, как продажи. Например, документы могут быть в статусе "Подготовка" и они не должны попасть в отчет
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА Продажи.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|			ТОГДА ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.РеализацияТоваровУслуг).Дата
		|		КОГДА Продажи.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
		|			ТОГДА ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ВозвратТоваровОтКлиента).Дата
		|		КОГДА Продажи.Регистратор ССЫЛКА Документ.ПередачаТоваровМеждуОрганизациями
		|			ТОГДА ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ПередачаТоваровМеждуОрганизациями).Дата
		|	КОНЕЦ КАК Дата,
		|	Продажи.Регистратор КАК Регистратор,
		|	Продажи.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	Продажи.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТ_Отбор_Продажи_Врем
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Запись,
		|			АналитикаУчетаПоПартнерам.Организация В
		|					(ВЫБРАТЬ
		|						ВТ_Организации.Ссылка
		|					ИЗ
		|						ВТ_Организации КАК ВТ_Организации)
		|				И НЕ АналитикаУчетаПоПартнерам.Контрагент В (&ИсключаемыеКонтрагенты)
		//|				И &АналитикаУчетаНоменклатурыМестоХранения В
		|				И &ВыручкаИСебестоимостьПродажМестоХранения В
		|					(ВЫБРАТЬ
		|						ВТ_Склады.Ссылка
		|					ИЗ
		|						ВТ_Склады КАК ВТ_Склады)
		|				И АналитикаУчетаНоменклатуры.Номенклатура.Ссылка В
		|					(ВЫБРАТЬ
		|						ВТ_Номенклатура.Ссылка
		|					ИЗ
		|						ВТ_Номенклатура КАК ВТ_Номенклатура)
		|				И &ОтборСегментыПартнеров) КАК Продажи
		|ГДЕ
		|	&ОтборПоТипуДокументов_ВыручкаИСебестоимостьПродаж
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА Комиссия.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|			ТОГДА ВЫРАЗИТЬ(Комиссия.Регистратор КАК Документ.РеализацияТоваровУслуг).Дата
		|		КОГДА Комиссия.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
		|			ТОГДА ВЫРАЗИТЬ(Комиссия.Регистратор КАК Документ.ВозвратТоваровОтКлиента).Дата
		|		КОГДА Комиссия.Регистратор ССЫЛКА Документ.ПередачаТоваровМеждуОрганизациями
		|			ТОГДА ВЫРАЗИТЬ(Комиссия.Регистратор КАК Документ.ПередачаТоваровМеждуОрганизациями).Дата
		|		КОГДА Комиссия.Регистратор ССЫЛКА Документ.ОтчетКомиссионера
		|			ТОГДА ВЫРАЗИТЬ(Комиссия.Регистратор КАК Документ.ОтчетКомиссионера).Дата
		|	КОНЕЦ,
		|	Комиссия.Регистратор,
		|	Комиссия.АналитикаУчетаНоменклатуры.Номенклатура,
		|	Комиссия.АналитикаУчетаНоменклатуры.Характеристика
		|ИЗ
		|	РегистрНакопления.ТоварыПереданныеНаКомиссию.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Запись,
		|			Организация В
		|					(ВЫБРАТЬ
		|						ВТ_Организации.Ссылка
		|					ИЗ
		|						ВТ_Организации КАК ВТ_Организации)
		|				И &АналитикаУчетаНоменклатурыМестоХранения В
		|					(ВЫБРАТЬ
		|						ВТ_Склады.Ссылка
		|					ИЗ
		|						ВТ_Склады КАК ВТ_Склады)
		|				И АналитикаУчетаНоменклатуры.Номенклатура.Ссылка В
		|					(ВЫБРАТЬ
		|						ВТ_Номенклатура.Ссылка
		|					ИЗ
		|						ВТ_Номенклатура КАК ВТ_Номенклатура)) КАК Комиссия
		|ГДЕ
		|	&ОтборПоТипуДокументов_ТоварыПереданныеНаКомиссию
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтборПродажи.Дата КАК Дата,
		|	ОтборПродажи.Регистратор КАК Регистратор,
		|	ОтборПродажи.Номенклатура КАК Номенклатура,
		|	ОтборПродажи.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТ_Отбор_Продажи
		|ИЗ
		|	ВТ_Отбор_Продажи_Врем КАК ОтборПродажи
		|ГДЕ
		|	ОтборПродажи.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Отбор_Продажи_Врем";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст
	, "&ОтборПоТипуДокументов_ВыручкаИСебестоимостьПродаж"
	, ТекстОтбораПоТипуДокументов(
		"Продажи.Регистратор"
		, "РеализацияТоваровУслуг,ВозвратТоваровОтКлиента,ПередачаТоваровМеждуОрганизациями"
		, Запрос.Параметры.ТипыДокументов
		)
	);
	
	ТипыДокументовОтчетКомиссионера = Запрос.Параметры.ТипыДокументов.НайтиПоЗначению(Тип("ДокументСсылка.ОтчетКомиссионера"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст
	, "&ОтборПоТипуДокументов_ТоварыПереданныеНаКомиссию"
	, ТекстОтбораПоТипуДокументов(
		"Комиссия.Регистратор"
		 // Если указан отчет комиссионера, то передачу на комиссию документом реализациине берем
		, "ВозвратТоваровОтКлиента,ПередачаТоваровМеждуОрганизациями," + ?(ТипыДокументовОтчетКомиссионера <> Неопределено И ТипыДокументовОтчетКомиссионера.Пометка, "ОтчетКомиссионера", "РеализацияТоваровУслуг")
		, Запрос.Параметры.ТипыДокументов
		)
	);
	
	Если Запрос.Параметры.ИсключаемыеКонтрагенты = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ АналитикаУчетаПоПартнерам.Контрагент В (&ИсключаемыеКонтрагенты)", "");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборСегментыПартнеров", ?(Запрос.Параметры.СегментыПартнеров = Неопределено, "",
		"И АналитикаУчетаПоПартнерам.Партнер В (ВЫБРАТЬ ВТ_СегментыПартнеровОтбор.Партнер ИЗ ВТ_СегментыПартнеровОтбор КАК ВТ_СегментыПартнеровОтбор)"));
	
	Если Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Измерения.Найти("Склад") <> Неопределено Тогда
		
		ВыручкаИСебестоимостьПродажМестоХранения = "Склад";
		
	Иначе
		
		ВыручкаИСебестоимостьПродажМестоХранения = ?( Метаданные.Справочники.КлючиАналитикиУчетаНоменклатуры.Реквизиты.Найти("МестоХранения") <> Неопределено
				, "АналитикаУчетаНоменклатуры.МестоХранения"
				, "АналитикаУчетаНоменклатуры.Склад"
			);
		
	КонецЕсли;
	
	Если Запрос.Параметры.Склады = Неопределено Тогда
	
		Запрос.Текст = СтрЗаменить(Запрос.Текст
			, "И &АналитикаУчетаНоменклатурыМестоХранения В
			|					(ВЫБРАТЬ
			|						ВТ_Склады.Ссылка
			|					ИЗ
			|						ВТ_Склады КАК ВТ_Склады)"
			, "");
	
		Запрос.Текст = СтрЗаменить(Запрос.Текст
			, "И &ВыручкаИСебестоимостьПродажМестоХранения В
			|					(ВЫБРАТЬ
			|						ВТ_Склады.Ссылка
			|					ИЗ
			|						ВТ_Склады КАК ВТ_Склады)"
			, "");
	
	Иначе
	
		Запрос.Текст = СтрЗаменить(Запрос.Текст
			, "&АналитикаУчетаНоменклатурыМестоХранения"
			, ?( Метаданные.Справочники.КлючиАналитикиУчетаНоменклатуры.Реквизиты.Найти("МестоХранения") <> Неопределено
				, "АналитикаУчетаНоменклатуры.МестоХранения"
				, "АналитикаУчетаНоменклатуры.Склад"
			));
	
		Запрос.Текст = СтрЗаменить(Запрос.Текст
			, "&ВыручкаИСебестоимостьПродажМестоХранения"
			, ВыручкаИСебестоимостьПродажМестоХранения
		);
	
	КонецЕсли;
		
	Запрос.Выполнить();
	
	#КонецОбласти

	#Область ВТ_Отбор_Закупки
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Продажи.Регистратор КАК Регистратор,
		|	Продажи.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	Продажи.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТ_Отбор_Закупки
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Запись,
		|			Организация В
		|					(ВЫБРАТЬ
		|						ВТ_Организации.Ссылка
		|					ИЗ
		|						ВТ_Организации КАК ВТ_Организации)
		|				И &АналитикаУчетаНоменклатурыМестоХранения В
		|					(ВЫБРАТЬ
		|						ВТ_Склады.Ссылка
		|					ИЗ
		|						ВТ_Склады КАК ВТ_Склады)
		|				И АналитикаУчетаНоменклатуры.Номенклатура.Ссылка В
		|					(ВЫБРАТЬ
		|						ВТ_Номенклатура.Ссылка
		|					ИЗ
		|						ВТ_Номенклатура КАК ВТ_Номенклатура)) КАК Продажи
		|ГДЕ
		|	&ОтборПоТипуДокументов_ТоварыОрганизаций
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Номенклатура,
		|	Характеристика";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст
	, "&ОтборПоТипуДокументов_ТоварыОрганизаций"
	, ТекстОтбораПоТипуДокументов(
		"Продажи.Регистратор"
		, ?(ПоступлениеТоваровУслуг, "ПоступлениеТоваровУслуг", "ПриобретениеТоваровУслуг")
		, Запрос.Параметры.ТипыДокументов
		)
	);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст
		, "&АналитикаУчетаНоменклатурыМестоХранения"
		, ?( Метаданные.Справочники.КлючиАналитикиУчетаНоменклатуры.Реквизиты.Найти("МестоХранения") <> Неопределено
			, "АналитикаУчетаНоменклатуры.МестоХранения"
			, "АналитикаУчетаНоменклатуры.Склад"
		));
		
	Запрос.Выполнить();
	
	#КонецОбласти
	
	#Область ВТ_РеализацияТоваровУслуг
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Д.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА &КлиентомЯвляется = ""БезКлиента""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|		КОГДА &КлиентомЯвляется = ""Партнер""
		|			ТОГДА Д.Ссылка.Партнер
		|		ИНАЧЕ Д.Ссылка.Контрагент
		|	КОНЕЦ КАК Клиент,
		|	ВЫБОР
		|		КОГДА &КлиентомЯвляется = ""БезКлиента""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|		КОГДА &ТорговойТочкойЯвляется = ""Партнер""
		|			ТОГДА Д.Ссылка.Партнер
		|		КОГДА &ТорговойТочкойЯвляется = ""Контрагент""
		|			ТОГДА Д.Ссылка.Контрагент
		|		КОГДА &ТорговойТочкойЯвляется = ""Склад""
		|			ТОГДА Д.Ссылка.Склад
		|		КОГДА &ТорговойТочкойЯвляется = ""Перевозчик""
		|			ТОГДА Д.Ссылка.ПеревозчикПартнер
		|		КОГДА &ТорговойТочкойЯвляется = ""АдресДоставки""
		|			ТОГДА Д.Ссылка.АдресДоставки
		|		КОГДА &ТорговойТочкойЯвляется = ""Договор""
		|			ТОГДА Д.Ссылка.Договор
		|	КОНЕЦ КАК ТорговаяТочка,
		|	ВЫБОР
		|		КОГДА &ТорговойТочкойЯвляется = ""Перевозчик""
		|			ТОГДА Д.Ссылка.АдресДоставкиПеревозчика
		|		КОГДА &ТорговойТочкойЯвляется = ""АдресДоставки""
		|			ТОГДА Д.Ссылка.АдресДоставки
		|	КОНЕЦ КАК АдресДоставки,
		
		|	ВЫБОР
		|		КОГДА &КлиентомЯвляется = ""БезКлиента""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		
		|	Иначе Д.Ссылка.Партнер КОНЕЦ КАК Партнер,
		|	ВЫБОР
		|		КОГДА &КлиентомЯвляется = ""БезКлиента""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) Иначе
		|	Д.Ссылка.Контрагент Конец КАК Контрагент,
		|	Д.Ссылка.Договор КАК Договор,
		|	ВЫБОР
		|		КОГДА &ТорговыйПредставитель = ""НеИспользуется""
		|			ТОГДА NULL
		|		КОГДА &ТорговыйПредставитель = ""МенеджерВПартнере""
		|			ТОГДА Д.Ссылка.Партнер.ОсновнойМенеджер
		|		ИНАЧЕ Д.Ссылка.Менеджер
		|	КОНЕЦ КАК ТорговыйПредставитель,
		|	ВЫБОР
		|		КОГДА &НеВыгружатьСерии
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		ИНАЧЕ Д.Серия
		|	КОНЕЦ КАК Серия,
		|	Д.Ссылка КАК Регистратор,
		|	Д.Ссылка КАК Накладная,
		|	Д.Ссылка.Номер КАК doc_ttn,
		|	Д.Ссылка.Организация КАК Организация,
		|	Д.Номенклатура КАК Номенклатура,
		|	Д.Характеристика КАК Характеристика,
		|	НАЧАЛОПЕРИОДА(Д.Ссылка.Дата, ДЕНЬ) КАК curr_date,
		|	""РТУ_"" + Д.Ссылка.Номер КАК doc_number,
		|	"""" КАК doc_parent,
		|	0 КАК oper_type,
		|	НАЧАЛОПЕРИОДА(Д.Ссылка.Дата, ДЕНЬ) КАК deliv_date,
		|	0 КАК order_stat,
		|	Д.Количество КАК quantity,
		|	Д.СуммаСНДС КАК amount,
		|	Д.СуммаРучнойСкидки + Д.СуммаАвтоматическойСкидки КАК discount,
		|	Д.СуммаНДС КАК vat,
		|	ЕСТЬNULL(ВТ_СтавкиНДС.СтавкаНДС, 0) КАК СтавкаНДС
		|ПОМЕСТИТЬ ВТ_РеализацияТоваровУслуг
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК Д
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкиНДС КАК ВТ_СтавкиНДС
		|		ПО (ВТ_СтавкиНДС.Ссылка = Д.СтавкаНДС)
		|ГДЕ
		|	&ОтборПоТипуДокументов_РеализацияТоваровУслуг
		|	И Д.Склад В
		|			(ВЫБРАТЬ
		|				ВТ_Склады.Ссылка
		|			ИЗ
		|				ВТ_Склады КАК ВТ_Склады)
		|	И НЕ Д.Ссылка.Контрагент В (&ИсключаемыеКонтрагенты)
		|	И (Д.Ссылка, Д.Номенклатура, Д.Характеристика) В
		|			(ВЫБРАТЬ
		|				ВТ_Отбор_Продажи.Регистратор,
		|				ВТ_Отбор_Продажи.Номенклатура,
		|				ВТ_Отбор_Продажи.Характеристика
		|			ИЗ
		|				ВТ_Отбор_Продажи КАК ВТ_Отбор_Продажи)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Номенклатура,
		|	Характеристика";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст
	, "&ОтборПоТипуДокументов_РеализацияТоваровУслуг"
	, ТекстОтбораПоТипуДокументов(
		"Д.Ссылка"
		, "РеализацияТоваровУслуг"
		, Запрос.Параметры.ТипыДокументов
		)
	);
	
	Если Запрос.Параметры.ИсключаемыеКонтрагенты = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ Д.Ссылка.Контрагент В (&ИсключаемыеКонтрагенты)", "");
	КонецЕсли;
	
	Конфигурация_UT11_ПодключитьСерии(Запрос);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Продажи.Регистратор КАК Регистратор
		|ИЗ
		|	ВТ_РеализацияТоваровУслуг КАК ВТ_Продажи
		|ГДЕ
		|	&ЕстьСкидки
		|	И ВТ_Продажи.discount > 0";
	
	РеализацииСоСкидками = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Регистратор");
	
	#КонецОбласти
	
	#Область ВТ_ВозвратТоваровОтКлиента
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Д.Ссылка.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА &КлиентомЯвляется = ""БезКлиента""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|		КОГДА Д.ДокументРеализации ССЫЛКА Документ.ОтчетОРозничныхПродажах
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.РозничныйПокупатель)
		|		КОГДА &КлиентомЯвляется = ""Партнер""
		|			ТОГДА Д.Ссылка.Партнер
		|		ИНАЧЕ Д.Ссылка.Контрагент
		|	КОНЕЦ КАК Клиент,
		|	ВЫБОР
		|		КОГДА &КлиентомЯвляется = ""БезКлиента""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|		КОГДА Д.Ссылка.ДокументРеализации ССЫЛКА Документ.ОтчетОРозничныхПродажах
		|			ТОГДА ВЫРАЗИТЬ(Д.Ссылка.ДокументРеализации КАК Документ.ОтчетОРозничныхПродажах).Склад
		|		КОГДА &ТорговойТочкойЯвляется = ""Партнер""
		|			ТОГДА Д.Ссылка.Партнер
		|		КОГДА &ТорговойТочкойЯвляется = ""Контрагент""
		|			ТОГДА Д.Ссылка.Контрагент
		|		КОГДА &ТорговойТочкойЯвляется = ""Склад""
		|			ТОГДА Д.Ссылка.Склад
		|		КОГДА &ТорговойТочкойЯвляется = ""Перевозчик""
		|			ТОГДА ВЫРАЗИТЬ(Д.Ссылка.ДокументРеализации КАК Документ.РеализацияТоваровУслуг).ПеревозчикПартнер
		|		КОГДА &ТорговойТочкойЯвляется = ""АдресДоставки""
		|			ТОГДА ВЫРАЗИТЬ(Д.Ссылка.ДокументРеализации КАК Документ.РеализацияТоваровУслуг).АдресДоставки
		|		КОГДА &ТорговойТочкойЯвляется = ""Договор""
		|			ТОГДА Д.Ссылка.Договор
		|	КОНЕЦ КАК ТорговаяТочка,
		|	ВЫБОР
		|		КОГДА &ТорговойТочкойЯвляется = ""Перевозчик""
		|			ТОГДА ВЫРАЗИТЬ(Д.Ссылка.ДокументРеализации КАК Документ.РеализацияТоваровУслуг).АдресДоставкиПеревозчика
		|		КОГДА &ТорговойТочкойЯвляется = ""АдресДоставки""
		|			ТОГДА ВЫРАЗИТЬ(Д.Ссылка.ДокументРеализации КАК Документ.РеализацияТоваровУслуг).АдресДоставки
		|	КОНЕЦ КАК АдресДоставки,
		|	ВЫБОР
		|		КОГДА &КлиентомЯвляется = ""БезКлиента""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|		ИНАЧЕ Д.Ссылка.Партнер
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР
		|		КОГДА &КлиентомЯвляется = ""БезКлиента""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|		ИНАЧЕ Д.Ссылка.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	Д.Ссылка.Договор КАК Договор,
		|	ВЫБОР
		|		КОГДА &ТорговыйПредставитель = ""НеИспользуется""
		|			ТОГДА NULL
		|		КОГДА &ТорговыйПредставитель = ""МенеджерВПартнере""
		|			ТОГДА Д.Ссылка.Партнер.ОсновнойМенеджер
		|		ИНАЧЕ Д.Ссылка.Менеджер
		|	КОНЕЦ КАК ТорговыйПредставитель,
		|	ВЫБОР
		|		КОГДА &НеВыгружатьСерии
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		ИНАЧЕ Д.Серия
		|	КОНЕЦ КАК Серия,
		|	Д.Ссылка КАК Регистратор,
		|	Д.Ссылка КАК Накладная,
		|	Д.Ссылка.Номер КАК doc_ttn,
		|	Д.Ссылка.Организация КАК Организация,
		|	Д.Номенклатура КАК Номенклатура,
		|	Д.Характеристика КАК Характеристика,
		|	НАЧАЛОПЕРИОДА(Д.Ссылка.Дата, ДЕНЬ) КАК curr_date,
		|	""ВТК_"" + Д.Ссылка.Номер КАК doc_number,
		|	"""" КАК doc_parent,
		|	1 КАК oper_type,
		|	НАЧАЛОПЕРИОДА(Д.Ссылка.Дата, ДЕНЬ) КАК deliv_date,
		|	0 КАК order_stat,
		|	Д.Количество КАК quantity,
		|	Д.СуммаСНДС КАК amount,
		|	0 КАК discount,
		|	Д.СуммаНДС КАК vat,
		|	ЕСТЬNULL(ВТ_СтавкиНДС.СтавкаНДС, 0) КАК СтавкаНДС
		|ПОМЕСТИТЬ ВТ_ВозвратТоваровОтКлиента
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента.Товары КАК Д
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкиНДС КАК ВТ_СтавкиНДС
		|		ПО (ВТ_СтавкиНДС.Ссылка = Д.СтавкаНДС)
		|ГДЕ
		|	&ОтборПоТипуДокументов_ВозвратТоваровОтКлиента
		|	И НЕ Д.Ссылка.Контрагент В (&ИсключаемыеКонтрагенты)
		|	И Д.Ссылка.Склад В
		|			(ВЫБРАТЬ
		|				ВТ_Склады.Ссылка
		|			ИЗ
		|				ВТ_Склады КАК ВТ_Склады)
		|	И (Д.Ссылка, Д.Номенклатура, Д.Характеристика) В
		|			(ВЫБРАТЬ
		|				ВТ_Отбор_Продажи.Регистратор,
		|				ВТ_Отбор_Продажи.Номенклатура,
		|				ВТ_Отбор_Продажи.Характеристика
		|			ИЗ
		|				ВТ_Отбор_Продажи КАК ВТ_Отбор_Продажи)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Номенклатура,
		|	Характеристика";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст
	, "&ОтборПоТипуДокументов_ВозвратТоваровОтКлиента"
	, ТекстОтбораПоТипуДокументов(
		"Д.Ссылка"
		, "ВозвратТоваровОтКлиента"
		, Запрос.Параметры.ТипыДокументов
		)
	);
	
	Если Запрос.Параметры.ИсключаемыеКонтрагенты = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ Д.Ссылка.Контрагент В (&ИсключаемыеКонтрагенты)", "");
	КонецЕсли;
	
	Конфигурация_UT11_ПодключитьСерии(Запрос);
	
	#КонецОбласти
	
	#Область ВТ_ПередачаТоваровМеждуОрганизациями

	Запрос.Текст =
		"ВЫБРАТЬ
		|	Д.Ссылка.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА &КлиентомЯвляется = ""БезКлиента""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|		КОГДА Д.Ссылка.РасчетыЧерезОтдельногоКонтрагента
		|			ТОГДА Д.Ссылка.Контрагент
		|		ИНАЧЕ Д.Ссылка.ОрганизацияПолучатель
		|	КОНЕЦ КАК Клиент,
		|	ВЫБОР
		|		КОГДА &КлиентомЯвляется = ""БезКлиента""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|		ИНАЧЕ Д.Ссылка.Склад
		|	КОНЕЦ КАК ТорговаяТочка,
		|	ВЫБОР
		|		КОГДА &ТорговойТочкойЯвляется = ""АдресДоставки""
		|			ТОГДА Д.Ссылка.АдресДоставки
		|	КОНЕЦ КАК АдресДоставки,
		|	ВЫБОР
		|		КОГДА &КлиентомЯвляется = ""БезКлиента""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|		ИНАЧЕ Д.Ссылка.Партнер
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР
		|		КОГДА &КлиентомЯвляется = ""БезКлиента""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|		ИНАЧЕ Д.Ссылка.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	Д.Ссылка.Договор КАК Договор,
		|	ВЫБОР
		|		КОГДА &ТорговыйПредставитель = ""НеИспользуется""
		|			ТОГДА NULL
		|		КОГДА &ТорговыйПредставитель = ""МенеджерВПартнере""
		|			ТОГДА Д.Ссылка.Партнер.ОсновнойМенеджер
		|		ИНАЧЕ Д.Ссылка.Менеджер
		|	КОНЕЦ КАК ТорговыйПредставитель,
		|	ВЫБОР
		|		КОГДА &НеВыгружатьСерии
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		ИНАЧЕ Д.Серия
		|	КОНЕЦ КАК Серия,
		|	Д.Ссылка КАК Регистратор,
		|	Д.Ссылка КАК Накладная,
		|	Д.Ссылка.Номер КАК doc_ttn,
		|	Д.Ссылка.Организация КАК Организация,
		|	Д.Номенклатура КАК Номенклатура,
		|	Д.Характеристика КАК Характеристика,
		|	НАЧАЛОПЕРИОДА(Д.Ссылка.Дата, ДЕНЬ) КАК curr_date,
		|	""ПТМО_"" + Д.Ссылка.Номер КАК doc_number,
		|	"""" КАК doc_parent,
		|	0 КАК oper_type,
		|	НАЧАЛОПЕРИОДА(Д.Ссылка.Дата, ДЕНЬ) КАК deliv_date,
		|	0 КАК order_stat,
		|	Д.Количество КАК quantity,
		|	Д.СуммаСНДС КАК amount,
		|	0 КАК discount,
		|	Д.СуммаНДС КАК vat,
		|	ЕСТЬNULL(ВТ_СтавкиНДС.СтавкаНДС, 0) КАК СтавкаНДС
		|ПОМЕСТИТЬ ВТ_ПередачаТоваровМеждуОрганизациями
		|ИЗ
		|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК Д
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкиНДС КАК ВТ_СтавкиНДС
		|		ПО (ВТ_СтавкиНДС.Ссылка = Д.СтавкаНДС)
		|ГДЕ
		|	&ОтборПоТипуДокументов_ПередачаТоваровМеждуОрганизациями
		|	И НЕ Д.Ссылка.Контрагент В (&ИсключаемыеКонтрагенты)
		|	И Д.Ссылка.Склад В
		|			(ВЫБРАТЬ
		|				ВТ_Склады.Ссылка
		|			ИЗ
		|				ВТ_Склады КАК ВТ_Склады)
		|	И (Д.Ссылка, Д.Номенклатура, Д.Характеристика) В
		|			(ВЫБРАТЬ
		|				ВТ_Отбор_Продажи.Регистратор,
		|				ВТ_Отбор_Продажи.Номенклатура,
		|				ВТ_Отбор_Продажи.Характеристика
		|			ИЗ
		|				ВТ_Отбор_Продажи КАК ВТ_Отбор_Продажи)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Номенклатура,
		|	Характеристика";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст
	, "&ОтборПоТипуДокументов_ПередачаТоваровМеждуОрганизациями"
	, ТекстОтбораПоТипуДокументов(
		"Д.Ссылка"
		, "ПередачаТоваровМеждуОрганизациями"
		, Запрос.Параметры.ТипыДокументов
		)
	);
	
	Если Запрос.Параметры.ИсключаемыеКонтрагенты = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ Д.Ссылка.Контрагент В (&ИсключаемыеКонтрагенты)", "");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	#КонецОбласти
	
	#Область ВТ_ПриобретениеТоваровУслуг

	Запрос.Текст =
		"ВЫБРАТЬ
		|	Д.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА &КлиентомЯвляется = ""БезКлиента""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|		ИНАЧЕ Д.Ссылка.Контрагент
		|	КОНЕЦ КАК Клиент,
		|	НЕОПРЕДЕЛЕНО КАК ТорговаяТочка,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(500)) КАК АдресДоставки,
		|	ВЫБОР
		|		КОГДА &КлиентомЯвляется = ""БезКлиента""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|		ИНАЧЕ Д.Ссылка.Партнер
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР
		|		КОГДА &КлиентомЯвляется = ""БезКлиента""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|		ИНАЧЕ Д.Ссылка.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	Д.Ссылка.Договор КАК Договор,
		|	NULL КАК ТорговыйПредставитель,
		|	ВЫБОР
		|		КОГДА &НеВыгружатьСерии
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		ИНАЧЕ Д.Серия
		|	КОНЕЦ КАК Серия,
		|	Д.Ссылка КАК Регистратор,
		|	Д.Ссылка КАК Накладная,
		|	Д.Ссылка.Номер КАК doc_ttn,
		|	Д.Ссылка.Организация КАК Организация,
		|	Д.Номенклатура КАК Номенклатура,
		|	Д.Характеристика КАК Характеристика,
		|	НАЧАЛОПЕРИОДА(Д.Ссылка.Дата, ДЕНЬ) КАК curr_date,
		|	""ПТУ_"" + Д.Ссылка.Номер КАК doc_number,
		|	"""" КАК doc_parent,
		|	2 КАК oper_type,
		|	НАЧАЛОПЕРИОДА(Д.Ссылка.Дата, ДЕНЬ) КАК deliv_date,
		|	0 КАК order_stat,
		|	Д.Количество КАК quantity,
		|	Д.СуммаСНДС КАК amount,
		|	Д.СуммаРучнойСкидки КАК discount,
		|	Д.СуммаНДС КАК vat,
		|	ЕСТЬNULL(ВТ_СтавкиНДС.СтавкаНДС, 0) КАК СтавкаНДС
		|ПОМЕСТИТЬ ВТ_ПриобретениеТоваровУслуг
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК Д
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкиНДС КАК ВТ_СтавкиНДС
		|		ПО (ВТ_СтавкиНДС.Ссылка = Д.СтавкаНДС)
		|ГДЕ
		|	&ОтборПоТипуДокументов_ПриобретениеТоваровУслуг
		//|	И Д.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		//|	И Д.Ссылка.Проведен
		|	И (Д.Ссылка, Д.Номенклатура, Д.Характеристика) В
		|			(ВЫБРАТЬ
		|				ВТ_Отбор_Закупки.Регистратор,
		|				ВТ_Отбор_Закупки.Номенклатура,
		|				ВТ_Отбор_Закупки.Характеристика
		|			ИЗ
		|				ВТ_Отбор_Закупки КАК ВТ_Отбор_Закупки)
		//|	И Д.Номенклатура В
		//|			(ВЫБРАТЬ
		//|				ВТ_Номенклатура.Ссылка
		//|			ИЗ
		//|				ВТ_Номенклатура КАК ВТ_Номенклатура)
		|	И НЕ Д.Ссылка.Контрагент В (&ИсключаемыеКонтрагенты)
		//|	И Д.Склад В
		//|			(ВЫБРАТЬ
		//|				ВТ_Склады.Ссылка
		//|			ИЗ
		//|				ВТ_Склады КАК ВТ_Склады)
		//|	И Д.Ссылка.Организация В
		//|			(ВЫБРАТЬ
		//|				ВТ_Организации.Ссылка
		//|			ИЗ
		//|				ВТ_Организации КАК ВТ_Организации)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Номенклатура,
		|	Характеристика";
	
	Если ПоступлениеТоваровУслуг Тогда
	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриобретениеТоваровУслуг", "ПоступлениеТоваровУслуг");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст
		, "&ОтборПоТипуДокументов_ПоступлениеТоваровУслуг"
		, ТекстОтбораПоТипуДокументов(
			"Д.Ссылка"
			, "ПоступлениеТоваровУслуг"
			, Запрос.Параметры.ТипыДокументов
			)
		);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст
		, "&ОтборПоТипуДокументов_ПриобретениеТоваровУслуг"
		, ТекстОтбораПоТипуДокументов(
			"Д.Ссылка"
			, "ПриобретениеТоваровУслуг"
			, Запрос.Параметры.ТипыДокументов
			)
		);
		
	КонецЕсли;
	
	Если Запрос.Параметры.ИсключаемыеКонтрагенты = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ Д.Ссылка.Контрагент В (&ИсключаемыеКонтрагенты)", "");
	КонецЕсли;
	
	Конфигурация_UT11_ПодключитьСерии(Запрос);
	
	#КонецОбласти
	
	#Область ВТ_ВозвратТоваровПоставщику
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Д.Ссылка.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА &КлиентомЯвляется = ""БезКлиента""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|		ИНАЧЕ Д.Ссылка.Контрагент
		|	КОНЕЦ КАК Клиент,
		|	НЕОПРЕДЕЛЕНО КАК ТорговаяТочка,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(500)) КАК АдресДоставки,
		|	ВЫБОР
		|		КОГДА &КлиентомЯвляется = ""БезКлиента""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|		ИНАЧЕ Д.Ссылка.Партнер
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР
		|		КОГДА &КлиентомЯвляется = ""БезКлиента""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|		ИНАЧЕ Д.Ссылка.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	Д.Ссылка.Договор КАК Договор,
		|	NULL КАК ТорговыйПредставитель,
		|	ВЫБОР
		|		КОГДА &НеВыгружатьСерии
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		ИНАЧЕ Д.Серия
		|	КОНЕЦ КАК Серия,
		|	Д.Ссылка КАК Регистратор,
		|	Д.Ссылка.ДокументПоступления КАК Накладная,
		|	Д.Ссылка.ДокументПоступления.Номер КАК doc_ttn,
		|	Д.Ссылка.Организация КАК Организация,
		|	Д.Номенклатура КАК Номенклатура,
		|	Д.Характеристика КАК Характеристика,
		|	НАЧАЛОПЕРИОДА(Д.Ссылка.Дата, ДЕНЬ) КАК curr_date,
		|	""ВТП_"" + Д.Ссылка.Номер КАК doc_number,
		|	"""" КАК doc_parent,
		|	7 КАК oper_type,
		|	НАЧАЛОПЕРИОДА(Д.Ссылка.Дата, ДЕНЬ) КАК deliv_date,
		|	0 КАК order_stat,
		|	Д.Количество КАК quantity,
		|	Д.СуммаСНДС КАК amount,
		|	0 КАК discount,
		|	Д.СуммаНДС КАК vat,
		|	ЕСТЬNULL(ВТ_СтавкиНДС.СтавкаНДС, 0) КАК СтавкаНДС
		|ПОМЕСТИТЬ ВТ_ВозвратТоваровПоставщику
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК Д
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкиНДС КАК ВТ_СтавкиНДС
		|		ПО (ВТ_СтавкиНДС.Ссылка = Д.СтавкаНДС)
		|ГДЕ
		|	&ОтборПоТипуДокументов_ВозвратТоваровПоставщику
		|	И Д.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И Д.Ссылка.Проведен = ИСТИНА
		|	И НЕ Д.Ссылка.Контрагент В (&ИсключаемыеКонтрагенты)
		|	И Д.Ссылка.Организация В
		|			(ВЫБРАТЬ
		|				ВТ_Организации.Ссылка
		|			ИЗ
		|				ВТ_Организации КАК ВТ_Организации)
		|	И Д.Ссылка.Склад В
		|			(ВЫБРАТЬ
		|				ВТ_Склады.Ссылка
		|			ИЗ
		|				ВТ_Склады КАК ВТ_Склады)
		|	И Д.Номенклатура В
		|			(ВЫБРАТЬ
		|				ВТ_Номенклатура.Ссылка
		|			ИЗ
		|				ВТ_Номенклатура КАК ВТ_Номенклатура)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Номенклатура,
		|	Характеристика";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст
	, "&ОтборПоТипуДокументов_ВозвратТоваровПоставщику"
	, ТекстОтбораПоТипуДокументов(
		"Д.Ссылка"
		, "ВозвратТоваровПоставщику"
		, Запрос.Параметры.ТипыДокументов
		)
	);
	
	Если Запрос.Параметры.ИсключаемыеКонтрагенты = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ Д.Ссылка.Контрагент В (&ИсключаемыеКонтрагенты)", "");
	КонецЕсли;
	
	Конфигурация_UT11_ПодключитьСерии(Запрос);
	
	#КонецОбласти
	
	#Область ВТ_ПередачаТоваровХранителю
	
	Если ЕстьДокумент("ПередачаТоваровХранителю") Тогда
	
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Д.Ссылка.Склад КАК Склад,
			|	ВЫБОР
			|		КОГДА &КлиентомЯвляется = ""БезКлиента""
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
			|		ИНАЧЕ Д.Ссылка.Контрагент
			|	КОНЕЦ КАК Клиент,
			|	Д.Ссылка.Склад КАК ТорговаяТочка,
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(500)) КАК АдресДоставки,
			|	ВЫБОР
			|		КОГДА &КлиентомЯвляется = ""БезКлиента""
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
			|		ИНАЧЕ Д.Ссылка.Партнер
			|	КОНЕЦ КАК Партнер,
			|	ВЫБОР
			|		КОГДА &КлиентомЯвляется = ""БезКлиента""
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|		ИНАЧЕ Д.Ссылка.Контрагент
			|	КОНЕЦ КАК Контрагент,
			|	Д.Ссылка.Договор КАК Договор,
			|	NULL КАК ТорговыйПредставитель,
			|	ВЫБОР
			|		КОГДА &НеВыгружатьСерии
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|		ИНАЧЕ Д.Серия
			|	КОНЕЦ КАК Серия,
			|	Д.Ссылка КАК Регистратор,
			|	NULL КАК Накладная,
			|	"""" КАК doc_ttn,
			|	Д.Ссылка.Организация КАК Организация,
			|	Д.Номенклатура КАК Номенклатура,
			|	Д.Характеристика КАК Характеристика,
			|	НАЧАЛОПЕРИОДА(Д.Ссылка.Дата, ДЕНЬ) КАК curr_date,
			|	""ПТХ_"" + Д.Ссылка.Номер КАК doc_number,
			|	"""" КАК doc_parent,
			|	0 КАК oper_type,
			|	НАЧАЛОПЕРИОДА(Д.Ссылка.Дата, ДЕНЬ) КАК deliv_date,
			|	0 КАК order_stat,
			|	Д.Количество КАК quantity,
			|	Д.Сумма + ВЫБОР КОГДА Не Д.Ссылка.Соглашение.ЦенаВключаетНДС ТОГДА Д.Сумма * 0.01 * ВТ_Номенклатура.СтавкаНДС Иначе 0 КОНЕЦ КАК amount,
			|	0 КАК discount,
			|	ВЫБОР КОГДА Не Д.Ссылка.Соглашение.ЦенаВключаетНДС ТОГДА Д.Сумма * 0.01 * ВТ_Номенклатура.СтавкаНДС Иначе 0 КОНЕЦ КАК vat,
			|	ВТ_Номенклатура.СтавкаНДС КАК СтавкаНДС
			|ПОМЕСТИТЬ ВТ_ПередачаТоваровХранителю
			|ИЗ
			|	Документ.ПередачаТоваровХранителю.Товары КАК Д
			//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкиНДС КАК ВТ_СтавкиНДС
			//|		ПО (ВТ_СтавкиНДС.Ссылка = Д.СтавкаНДС)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
			|		ПО (ВТ_Номенклатура.Ссылка = Д.Номенклатура)
			|ГДЕ
			|	&ОтборПоТипуДокументов_ПередачаТоваровХранителю
			|	И Д.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
			|	И Д.Ссылка.Проведен = ИСТИНА
			|	И НЕ Д.Ссылка.Контрагент В (&ИсключаемыеКонтрагенты)
			|	И Д.Ссылка.Организация В
			|			(ВЫБРАТЬ
			|				ВТ_Организации.Ссылка
			|			ИЗ
			|				ВТ_Организации КАК ВТ_Организации)
			|	И Д.Ссылка.Склад В
			|			(ВЫБРАТЬ
			|				ВТ_Склады.Ссылка
			|			ИЗ
			|				ВТ_Склады КАК ВТ_Склады)
			//|	И Д.Номенклатура В
			//|			(ВЫБРАТЬ
			//|				ВТ_Номенклатура.Ссылка
			//|			ИЗ
			//|				ВТ_Номенклатура КАК ВТ_Номенклатура)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Регистратор,
			|	Номенклатура,
			|	Характеристика";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст
		, "&ОтборПоТипуДокументов_ПередачаТоваровХранителю"
		, ТекстОтбораПоТипуДокументов(
			"Д.Ссылка"
			, "ПередачаТоваровХранителю"
			, Запрос.Параметры.ТипыДокументов
			)
		);
		
		Если Запрос.Параметры.ИсключаемыеКонтрагенты = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ Д.Ссылка.Контрагент В (&ИсключаемыеКонтрагенты)", "");
		КонецЕсли;
		
		Конфигурация_UT11_ПодключитьСерии(Запрос);
		
	Иначе
	
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 0 Д.* ПОМЕСТИТЬ ВТ_ПередачаТоваровХранителю ИЗ ВТ_РеализацияТоваровУслуг КАК Д";
		Запрос.Выполнить();
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВТ_ЧекККМ
	
	Если ЕстьДокумент("ЧекККМ") Тогда
	
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Д.Ссылка.Склад КАК Склад,
			|	ВЫБОР
			|		КОГДА &КлиентомЯвляется = ""БезКлиента""
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.РозничныйПокупатель)
			|	КОНЕЦ КАК Клиент,
			|	Д.Ссылка.Склад КАК ТорговаяТочка,
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(500)) КАК АдресДоставки,
			|	ВЫБОР
			|		КОГДА &КлиентомЯвляется = ""БезКлиента""
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
			|		ИНАЧЕ Д.Ссылка.Партнер
			|	КОНЕЦ КАК Партнер,
			|	ВЫБОР
			|		КОГДА &КлиентомЯвляется = ""БезКлиента""
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.РозничныйПокупатель)
			|	КОНЕЦ КАК Контрагент,
			|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
			|	NULL КАК ТорговыйПредставитель,
			|	ВЫБОР
			|		КОГДА &НеВыгружатьСерии
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|		ИНАЧЕ Д.Серия
			|	КОНЕЦ КАК Серия,
			|	Д.Ссылка КАК Регистратор,
			|	NULL КАК Накладная,
			|	"""" КАК doc_ttn,
			|	Д.Ссылка.Организация КАК Организация,
			|	Д.Номенклатура КАК Номенклатура,
			|	Д.Характеристика КАК Характеристика,
			|	НАЧАЛОПЕРИОДА(Д.Ссылка.Дата, ДЕНЬ) КАК curr_date,
			|	""ЧККМ_"" + Д.Ссылка.Номер КАК doc_number,
			|	"""" КАК doc_parent,
			|	0 КАК oper_type,
			|	НАЧАЛОПЕРИОДА(Д.Ссылка.Дата, ДЕНЬ) КАК deliv_date,
			|	0 КАК order_stat,
			|	Д.Количество КАК quantity,
			|	Д.Сумма + ВЫБОР КОГДА Не Д.Ссылка.ЦенаВключаетНДС ТОГДА Д.Сумма * 0.01 * ВТ_Номенклатура.СтавкаНДС Иначе 0 КОНЕЦ КАК amount,
			|	0 КАК discount,
			|	ВЫБОР КОГДА Не Д.Ссылка.ЦенаВключаетНДС ТОГДА Д.Сумма * 0.01 * ВТ_Номенклатура.СтавкаНДС Иначе 0 КОНЕЦ КАК vat,
			|	ВТ_Номенклатура.СтавкаНДС КАК СтавкаНДС
			|ПОМЕСТИТЬ ВТ_ЧекККМ
			|ИЗ
			|	Документ.ЧекККМ.Товары КАК Д
			//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкиНДС КАК ВТ_СтавкиНДС
			//|		ПО (ВТ_СтавкиНДС.Ссылка = Д.СтавкаНДС)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
			|		ПО (ВТ_Номенклатура.Ссылка = Д.Номенклатура)
			|ГДЕ
			|	&ОтборПоТипуДокументов_ЧекККМ
			|	И Д.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
			|	И Д.Ссылка.Проведен = ИСТИНА
			|	И Д.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
			//|	И НЕ Д.Ссылка.Контрагент В (&ИсключаемыеКонтрагенты)
			|	И Д.Ссылка.Организация В
			|			(ВЫБРАТЬ
			|				ВТ_Организации.Ссылка
			|			ИЗ
			|				ВТ_Организации КАК ВТ_Организации)
			|	И Д.Ссылка.Склад В
			|			(ВЫБРАТЬ
			|				ВТ_Склады.Ссылка
			|			ИЗ
			|				ВТ_Склады КАК ВТ_Склады)
			//|	И Д.Номенклатура В
			//|			(ВЫБРАТЬ
			//|				ВТ_Номенклатура.Ссылка
			//|			ИЗ
			//|				ВТ_Номенклатура КАК ВТ_Номенклатура)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Регистратор,
			|	Номенклатура,
			|	Характеристика";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст
		, "&ОтборПоТипуДокументов_ЧекККМ"
		, ТекстОтбораПоТипуДокументов(
			"Д.Ссылка"
			, "ЧекККМ"
			, Запрос.Параметры.ТипыДокументов
			)
		);
		
		Конфигурация_UT11_ПодключитьСерии(Запрос);
		
	Иначе
	
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 0 Д.* ПОМЕСТИТЬ ВТ_ЧекККМ ИЗ ВТ_РеализацияТоваровУслуг КАК Д";
		Запрос.Выполнить();
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВТ_ЧекККМВозврат
	
	Если ЕстьДокумент("ЧекККМВозврат") Тогда
	
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Д.Ссылка.Склад КАК Склад,
			|	ВЫБОР
			|		КОГДА &КлиентомЯвляется = ""БезКлиента""
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.РозничныйПокупатель)
			|	КОНЕЦ КАК Клиент,
			|	Д.Ссылка.Склад КАК ТорговаяТочка,
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(500)) КАК АдресДоставки,
			|	ВЫБОР
			|		КОГДА &КлиентомЯвляется = ""БезКлиента""
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
			|		ИНАЧЕ Д.Ссылка.Партнер
			|	КОНЕЦ КАК Партнер,
			|	ВЫБОР
			|		КОГДА &КлиентомЯвляется = ""БезКлиента""
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.РозничныйПокупатель)
			|	КОНЕЦ КАК Контрагент,
			|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
			|	NULL КАК ТорговыйПредставитель,
			|	ВЫБОР
			|		КОГДА &НеВыгружатьСерии
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|		ИНАЧЕ Д.Серия
			|	КОНЕЦ КАК Серия,
			|	Д.Ссылка КАК Регистратор,
			|	NULL КАК Накладная,
			|	"""" КАК doc_ttn,
			|	Д.Ссылка.Организация КАК Организация,
			|	Д.Номенклатура КАК Номенклатура,
			|	Д.Характеристика КАК Характеристика,
			|	НАЧАЛОПЕРИОДА(Д.Ссылка.Дата, ДЕНЬ) КАК curr_date,
			|	""ЧККМВ_"" + Д.Ссылка.Номер КАК doc_number,
			|	"""" КАК doc_parent,
			|	1 КАК oper_type,
			|	НАЧАЛОПЕРИОДА(Д.Ссылка.Дата, ДЕНЬ) КАК deliv_date,
			|	0 КАК order_stat,
			|	Д.Количество КАК quantity,
			|	Д.Сумма + ВЫБОР КОГДА Не Д.Ссылка.ЦенаВключаетНДС ТОГДА Д.Сумма * 0.01 * ВТ_Номенклатура.СтавкаНДС Иначе 0 КОНЕЦ КАК amount,
			|	0 КАК discount,
			|	ВЫБОР КОГДА Не Д.Ссылка.ЦенаВключаетНДС ТОГДА Д.Сумма * 0.01 * ВТ_Номенклатура.СтавкаНДС Иначе 0 КОНЕЦ КАК vat,
			|	ВТ_Номенклатура.СтавкаНДС КАК СтавкаНДС
			|ПОМЕСТИТЬ ВТ_ЧекККМВозврат
			|ИЗ
			|	Документ.ЧекККМВозврат.Товары КАК Д
			//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкиНДС КАК ВТ_СтавкиНДС
			//|		ПО (ВТ_СтавкиНДС.Ссылка = Д.СтавкаНДС)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
			|		ПО (ВТ_Номенклатура.Ссылка = Д.Номенклатура)
			|ГДЕ
			|	&ОтборПоТипуДокументов_ЧекККМВозврат
			|	И Д.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
			|	И Д.Ссылка.Проведен = ИСТИНА
			//|	И НЕ Д.Ссылка.Контрагент В (&ИсключаемыеКонтрагенты)
			|	И Д.Ссылка.Организация В
			|			(ВЫБРАТЬ
			|				ВТ_Организации.Ссылка
			|			ИЗ
			|				ВТ_Организации КАК ВТ_Организации)
			|	И Д.Ссылка.Склад В
			|			(ВЫБРАТЬ
			|				ВТ_Склады.Ссылка
			|			ИЗ
			|				ВТ_Склады КАК ВТ_Склады)
			//|	И Д.Номенклатура В
			//|			(ВЫБРАТЬ
			//|				ВТ_Номенклатура.Ссылка
			//|			ИЗ
			//|				ВТ_Номенклатура КАК ВТ_Номенклатура)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Регистратор,
			|	Номенклатура,
			|	Характеристика";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст
		, "&ОтборПоТипуДокументов_ЧекККМВозврат"
		, ТекстОтбораПоТипуДокументов(
			"Д.Ссылка"
			, "ЧекККМВозврат"
			, Запрос.Параметры.ТипыДокументов
			)
		);
		
		Конфигурация_UT11_ПодключитьСерии(Запрос);
		
	Иначе
	
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 0 Д.* ПОМЕСТИТЬ ВТ_ЧекККМВозврат ИЗ ВТ_РеализацияТоваровУслуг КАК Д";
		Запрос.Выполнить();
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВТ_ВыручкаИСебестоимостьПродаж
	
	Запрос.Текст =
		"ВЫБРАТЬ
		//|	&АналитикаУчетаНоменклатурыМестоХранения КАК Склад,
		|	&ВыручкаИСебестоимостьПродажМестоХранения КАК Склад,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА &КлиентомЯвляется = ""БезКлиента""
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|			КОГДА Рег.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
		|				ТОГДА Рег.АналитикаУчетаПоПартнерам.Партнер
		|			КОГДА &КлиентомЯвляется = ""Партнер""
		|				ТОГДА Рег.АналитикаУчетаПоПартнерам.Партнер
		|			ИНАЧЕ Рег.АналитикаУчетаПоПартнерам.Контрагент
		|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК Клиент,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА &КлиентомЯвляется = ""БезКлиента""
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|			КОГДА Рег.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
		|				ТОГДА ВЫРАЗИТЬ(Рег.Регистратор КАК Документ.ОтчетОРозничныхПродажах).Склад
		|			КОГДА Рег.Регистратор ССЫЛКА Документ.КорректировкаРеализации
		|				ТОГДА ВЫБОР
		|						КОГДА &ТорговойТочкойЯвляется = ""Партнер""
		|							ТОГДА Рег.АналитикаУчетаПоПартнерам.Партнер
		|						КОГДА &ТорговойТочкойЯвляется = ""Контрагент""
		|							ТОГДА Рег.АналитикаУчетаПоПартнерам.Контрагент
		|						КОГДА &ТорговойТочкойЯвляется = ""Перевозчик""
		|							ТОГДА ВЫРАЗИТЬ(ВЫРАЗИТЬ(Рег.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование КАК Документ.РеализацияТоваровУслуг).ПеревозчикПартнер
		|						КОГДА &ТорговойТочкойЯвляется = ""АдресДоставки""
		|							ТОГДА ВЫРАЗИТЬ(ВЫРАЗИТЬ(Рег.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование КАК Документ.РеализацияТоваровУслуг).АдресДоставки
		|						КОГДА &ТорговойТочкойЯвляется = ""Договор""
		|							ТОГДА Рег.АналитикаУчетаПоПартнерам.Договор
		|					КОНЕЦ
		|			КОГДА Рег.Регистратор ССЫЛКА Документ.ОтчетКомиссионера
		|				ТОГДА ВЫБОР
		|						КОГДА &ТорговойТочкойЯвляется = ""Партнер""
		|							ТОГДА Рег.АналитикаУчетаПоПартнерам.Партнер
		|						КОГДА &ТорговойТочкойЯвляется = ""Договор""
		|							ТОГДА Рег.АналитикаУчетаПоПартнерам.Договор
		|						Иначе Рег.АналитикаУчетаПоПартнерам.Контрагент
		|					КОНЕЦ
		|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ТорговаяТочка,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА Рег.Регистратор ССЫЛКА Документ.КорректировкаРеализации
		|				ТОГДА ВЫБОР
		|						КОГДА &ТорговойТочкойЯвляется = ""Перевозчик""
		|							ТОГДА ВЫРАЗИТЬ(ВЫРАЗИТЬ(Рег.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование КАК Документ.РеализацияТоваровУслуг).АдресДоставкиПеревозчика
		|						КОГДА &ТорговойТочкойЯвляется = ""АдресДоставки""
		|							ТОГДА ВЫРАЗИТЬ(ВЫРАЗИТЬ(Рег.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование КАК Документ.РеализацияТоваровУслуг).АдресДоставки
		|					КОНЕЦ
		|		КОНЕЦ, """") КАК АдресДоставки,
		|	ВЫБОР
		|		КОГДА &КлиентомЯвляется = ""БезКлиента""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|		ИНАЧЕ Рег.АналитикаУчетаПоПартнерам.Партнер
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР
		|		КОГДА &КлиентомЯвляется = ""БезКлиента""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|		ИНАЧЕ Рег.АналитикаУчетаПоПартнерам.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	Рег.Договор КАК Договор,
		|	ВЫБОР
		|		КОГДА &ТорговыйПредставитель = ""НеИспользуется""
		|			ТОГДА NULL
		|		КОГДА &ТорговыйПредставитель = ""МенеджерВПартнере""
		|			ТОГДА Рег.АналитикаУчетаПоПартнерам.Партнер.ОсновнойМенеджер
		|		КОГДА Рег.Регистратор ССЫЛКА Документ.КорректировкаРеализации
		|			ТОГДА ВЫРАЗИТЬ(Рег.Регистратор КАК Документ.КорректировкаРеализации).Менеджер
		|	КОНЕЦ КАК ТорговыйПредставитель,
		|	ВЫБОР
		|		КОГДА &НеВыгружатьСерии
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		ИНАЧЕ Рег.АналитикаУчетаНоменклатуры.Серия
		|	КОНЕЦ КАК Серия,
		|	Рег.Регистратор КАК Регистратор,
		|	NULL КАК Накладная,
		|	ВЫБОР
		|		КОГДА Рег.Регистратор ССЫЛКА Документ.КорректировкаРеализации
		|			ТОГДА ВЫРАЗИТЬ(Рег.Регистратор КАК Документ.КорректировкаРеализации).Номер
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК doc_ttn,
		|	Рег.АналитикаУчетаПоПартнерам.Организация КАК Организация,
		|	Рег.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	Рег.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|	НАЧАЛОПЕРИОДА(Рег.Период, ДЕНЬ) КАК curr_date,
		|	ВЫБОР
		|		КОГДА Рег.Регистратор ССЫЛКА Документ.КорректировкаРеализации
		|			ТОГДА ""КОР_"" + ВЫРАЗИТЬ(Рег.Регистратор КАК Документ.КорректировкаРеализации).Номер
		|		КОГДА Рег.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
		|			ТОГДА ""ОРП_"" + ВЫРАЗИТЬ(Рег.Регистратор КАК Документ.ОтчетОРозничныхПродажах).Номер + ""_"" + Рег.АналитикаУчетаПоПартнерам.Партнер.Код
		|		КОГДА Рег.Регистратор ССЫЛКА Документ.ОтчетКомиссионера
		|			ТОГДА ""ОК_"" + ВЫРАЗИТЬ(Рег.Регистратор КАК Документ.ОтчетКомиссионера).Номер
		|	КОНЕЦ КАК doc_number,
		|	"""" КАК doc_parent,
		|	ВЫБОР
		|		КОГДА Рег.КоличествоОборот > 0
		|				ИЛИ Рег.КоличествоОборот = 0
		|					И Рег.СуммаВыручкиОборот > 0
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК oper_type,
		|	НАЧАЛОПЕРИОДА(&deliv_date, ДЕНЬ) КАК deliv_date,
		|	0 КАК order_stat,
		|	ВЫБОР
		|		КОГДА Рег.КоличествоОборот < 0
		|			ТОГДА -Рег.КоличествоОборот
		|		ИНАЧЕ Рег.КоличествоОборот
		|	КОНЕЦ КАК quantity,
		|	ВЫБОР
		|		КОГДА Рег.КоличествоОборот < 0
		|				ИЛИ Рег.КоличествоОборот = 0
		|					И Рег.СуммаВыручкиОборот < 0
		|			ТОГДА -Рег.СуммаВыручкиОборот
		|		ИНАЧЕ Рег.СуммаВыручкиОборот
		|	КОНЕЦ КАК amount,
		|	ВЫБОР
		|		КОГДА Рег.КоличествоОборот < 0
		|				ИЛИ Рег.КоличествоОборот = 0
		|					И Рег.СуммаВыручкиОборот < 0
		|			ТОГДА -(Рег.СуммаРучнойСкидкиОборот + Рег.СуммаАвтоматическойСкидкиОборот)
		|		ИНАЧЕ Рег.СуммаРучнойСкидкиОборот + Рег.СуммаАвтоматическойСкидкиОборот
		|	КОНЕЦ КАК discount,
		|	ВЫБОР
		|		КОГДА Рег.КоличествоОборот < 0
		|				ИЛИ Рег.КоличествоОборот = 0
		|					И Рег.СуммаВыручкиОборот < 0
		|			ТОГДА Рег.СуммаВыручкиБезНДСОборот - Рег.СуммаВыручкиОборот
		|		ИНАЧЕ Рег.СуммаВыручкиОборот - Рег.СуммаВыручкиБезНДСОборот
		|	КОНЕЦ КАК vat
		|ПОМЕСТИТЬ ВТ_ВыручкаИСебестоимостьПродаж_Врем
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Запись,
		|			АналитикаУчетаПоПартнерам.Организация В
		|					(ВЫБРАТЬ
		|						ВТ_Организации.Ссылка
		|					ИЗ
		|						ВТ_Организации КАК ВТ_Организации)
		|				И НЕ АналитикаУчетаПоПартнерам.Контрагент В (&ИсключаемыеКонтрагенты)
		//|				И &АналитикаУчетаНоменклатурыМестоХранения В
		|				И &ВыручкаИСебестоимостьПродажМестоХранения В
		|					(ВЫБРАТЬ
		|						ВТ_Склады.Ссылка
		|					ИЗ
		|						ВТ_Склады КАК ВТ_Склады)
		|				И АналитикаУчетаНоменклатуры.Номенклатура В
		|					(ВЫБРАТЬ
		|						ВТ_Номенклатура.Ссылка
		|					ИЗ
		|						ВТ_Номенклатура КАК ВТ_Номенклатура)) КАК Рег
		|ГДЕ
		|	&ОтборПоТипуДокументов_ВыручкаИСебестоимостьПродаж
		|	И (Рег.Регистратор, Рег.АналитикаУчетаНоменклатуры.Номенклатура, Рег.АналитикаУчетаНоменклатуры.Характеристика) В
		|			(ВЫБРАТЬ
		|				ОтборОстатки.Регистратор,
		|				ОтборОстатки.Номенклатура,
		|				ОтборОстатки.Характеристика
		|			ИЗ
		|				ВТ_ОтборОстатки КАК ОтборОстатки)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ОтборОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем.Склад КАК Склад,
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем.Клиент КАК Клиент,
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем.ТорговаяТочка КАК ТорговаяТочка,
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем.АдресДоставки КАК АдресДоставки,
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем.Партнер КАК Партнер,
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем.Контрагент КАК Контрагент,
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем.Договор КАК Договор,
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем.ТорговыйПредставитель КАК ТорговыйПредставитель,
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем.Серия КАК Серия,
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем.Регистратор КАК Регистратор,
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем.Накладная КАК Накладная,
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем.doc_ttn КАК doc_ttn,
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем.Организация КАК Организация,
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем.Номенклатура КАК Номенклатура,
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем.Характеристика КАК Характеристика,
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем.curr_date КАК curr_date,
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем.doc_number КАК doc_number,
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем.doc_parent КАК doc_parent,
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем.oper_type КАК oper_type,
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем.deliv_date КАК deliv_date,
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем.order_stat КАК order_stat,
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем.quantity КАК quantity,
		|	ВЫБОР
		|		КОГДА ВТ_ВыручкаИСебестоимостьПродаж_Врем.amount >= 0
		|			ТОГДА ВТ_ВыручкаИСебестоимостьПродаж_Врем.amount
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК amount,
		|	ВЫБОР
		|		КОГДА ВТ_ВыручкаИСебестоимостьПродаж_Врем.discount >= 0
		|			ТОГДА ВТ_ВыручкаИСебестоимостьПродаж_Врем.discount
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК discount,
		|	ВЫБОР
		|		КОГДА ВТ_ВыручкаИСебестоимостьПродаж_Врем.vat >= 0
		|			ТОГДА ВТ_ВыручкаИСебестоимостьПродаж_Врем.vat
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК vat,
		|	ВТ_Номенклатура.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ ВТ_ВыручкаИСебестоимостьПродаж
		|ИЗ
		|	ВТ_ВыручкаИСебестоимостьПродаж_Врем КАК ВТ_ВыручкаИСебестоимостьПродаж_Врем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
		|		ПО (ВТ_Номенклатура.Ссылка = ВТ_ВыручкаИСебестоимостьПродаж_Врем.Номенклатура)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ВыручкаИСебестоимостьПродаж_Врем";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст
	, "&ОтборПоТипуДокументов_ВыручкаИСебестоимостьПродаж"
	, ТекстОтбораПоТипуДокументов(
		"Рег.Регистратор"
		, "ОтчетОРозничныхПродажах,КорректировкаРеализации,ОтчетКомиссионера"
		, Запрос.Параметры.ТипыДокументов
		)
	);
	
	Если Запрос.Параметры.ИсключаемыеКонтрагенты = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ АналитикаУчетаПоПартнерам.Контрагент В (&ИсключаемыеКонтрагенты)", "");
	КонецЕсли;

	Если Запрос.Параметры.Склады = Неопределено Тогда
	
		Запрос.Текст = СтрЗаменить(Запрос.Текст
			, "И &ВыручкаИСебестоимостьПродажМестоХранения В
			|					(ВЫБРАТЬ
			|						ВТ_Склады.Ссылка
			|					ИЗ
			|						ВТ_Склады КАК ВТ_Склады)"
			, "");
	
	КонецЕсли;
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст
		, "&ВыручкаИСебестоимостьПродажМестоХранения"
		, ВыручкаИСебестоимостьПродажМестоХранения
	);
	
	//Запрос.Текст = СтрЗаменить(Запрос.Текст
	//	, "&АналитикаУчетаНоменклатурыМестоХранения"
	//	, ?( Метаданные.Справочники.КлючиАналитикиУчетаНоменклатуры.Реквизиты.Найти("МестоХранения") <> Неопределено
	//		, "АналитикаУчетаНоменклатуры.МестоХранения"
	//		, "АналитикаУчетаНоменклатуры.Склад"
	//	));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&deliv_date"
		, ?(Метаданные.Документы.ЗаказКлиента.Реквизиты.Найти("ЖелаемаяДатаОтгрузки") <> Неопределено
		, "Рег.ЗаказКлиента.ЖелаемаяДатаОтгрузки"
		, "Рег.ЗаказКлиента.ДатаОтгрузки")
	); // В торговле 11.5 переименовали реквизит "ЖелаемаяДатаОтгрузки" на "ДатаОтгрузки"
		
	Запрос.Выполнить();
	
	#КонецОбласти
	
	#Область ВТ_ПеремещениеТоваров
	
	// Тут такая история. Мы должны отразить приход в розничный магазин, как продажу, т.е. расход
	// Это допустимо только для случая, когда преремещение сделало парное движение приход и расход по складам из отбора
	//  если склад отправитель или склад получатель не попадают в отбор, то такие движения не нужны (иначе будет ошибка контроля остатков)
	//Поэтому сначала получаем ВТ_ПеремещениеТоваров_Врем, а потому оставляем те записи, где по (регистратору, номенклатуре, характеристике) приход равен расходу
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&АналитикаУчетаНоменклатурыМестоХранения КАК Склад,
		|	ВЫБОР
		|		КОГДА &КлиентомЯвляется = ""БезКлиента""
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.РозничныйПокупатель)
		|	КОНЕЦ КАК Клиент,
		|	&АналитикаУчетаНоменклатурыМестоХранения КАК ТорговаяТочка,
		|	"""" КАК АдресДоставки,
		|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Партнер,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|	NULL КАК ТорговыйПредставитель,
		|	ВЫБОР
		|		КОГДА &НеВыгружатьСерии
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		ИНАЧЕ Рег.АналитикаУчетаНоменклатуры.Серия
		|	КОНЕЦ КАК Серия,
		|	Рег.Регистратор КАК Регистратор,
		|	NULL КАК Накладная,
		|	"""" КАК doc_ttn,
		|	Рег.Организация КАК Организация,
		|	Рег.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	Рег.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|	НАЧАЛОПЕРИОДА(Рег.Период, ДЕНЬ) КАК curr_date,
		|	ВЫБОР
		|		КОГДА Рег.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
		|			ТОГДА ""ПТ_"" + ВЫРАЗИТЬ(Рег.Регистратор КАК Документ.ПеремещениеТоваров).Номер
		|	КОНЕЦ КАК doc_number,
		|	"""" КАК doc_parent,
		|	ВЫБОР
		|		КОГДА НЕ &ПеремещенияКакПродажи
		|			ТОГДА ВЫБОР
		|					КОГДА Рег.КоличествоОборот > 0
		|						ТОГДА 5
		|					ИНАЧЕ 4
		|				КОНЕЦ
		|		КОГДА &АналитикаУчетаНоменклатурыМестоХранения В
		|					(ВЫБРАТЬ
		|						ВТ_РозничныеМагазины.Ссылка
		|					ИЗ
		|						ВТ_РозничныеМагазины КАК ВТ_РозничныеМагазины)
		|				И НЕ ВЫБОР
		|						КОГДА Рег.КоличествоОборот > 0
		|							ТОГДА ВЫРАЗИТЬ(Рег.Регистратор КАК Документ.ПеремещениеТоваров).СкладОтправитель
		|						ИНАЧЕ ВЫРАЗИТЬ(Рег.Регистратор КАК Документ.ПеремещениеТоваров).СкладПолучатель
		|					КОНЕЦ В
		|						(ВЫБРАТЬ
		|							ВТ_РозничныеМагазины.Ссылка
		|						ИЗ
		|							ВТ_РозничныеМагазины КАК ВТ_РозничныеМагазины)
		|			ТОГДА ВЫБОР
		|					КОГДА Рег.КоличествоОборот > 0
		|						ТОГДА 0
		|					ИНАЧЕ 1
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА Рег.КоличествоОборот > 0
		|					ТОГДА 4
		|				ИНАЧЕ 5
		|			КОНЕЦ
		|	КОНЕЦ КАК oper_type,
		|	НАЧАЛОПЕРИОДА(Рег.Период, ДЕНЬ) КАК deliv_date,
		|	0 КАК order_stat,
		|	ВЫБОР
		|		КОГДА Рег.КоличествоОборот > 0
		|			ТОГДА Рег.КоличествоОборот
		|		ИНАЧЕ -Рег.КоличествоОборот
		|	КОНЕЦ КАК quantity,
		|	0 КАК discount,
		|	0 КАК vat,
		|	Рег.КоличествоПриход КАК КоличествоПриход,
		|	Рег.КоличествоРасход КАК КоличествоРасход
		|ПОМЕСТИТЬ ВТ_ПеремещениеТоваров_Врем
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Запись,
		|			АналитикаУчетаНоменклатуры.Номенклатура В
		|					(ВЫБРАТЬ
		|						ВТ_Номенклатура.Ссылка
		|					ИЗ
		|						ВТ_Номенклатура КАК ВТ_Номенклатура)
		|				И Организация В
		|					(ВЫБРАТЬ
		|						ВТ_Организации.Ссылка
		|					ИЗ
		|						ВТ_Организации КАК ВТ_Организации)
		|				И &АналитикаУчетаНоменклатурыМестоХранения В
		|					(ВЫБРАТЬ
		|						ВТ_Склады.Ссылка
		|					ИЗ
		|						ВТ_Склады КАК ВТ_Склады)) КАК Рег
		|ГДЕ
		|	Рег.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
		|	И Рег.КоличествоОборот <> 0
		|	И &ОтборПоТипуДокументов_ПеремещениеТоваров
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПеремещениеТоваров_Врем.Склад КАК Склад,
		|	ВТ_ПеремещениеТоваров_Врем.Клиент КАК Клиент,
		|	ВТ_ПеремещениеТоваров_Врем.ТорговаяТочка КАК ТорговаяТочка,
		|	ВТ_ПеремещениеТоваров_Врем.АдресДоставки КАК АдресДоставки,
		|	ВТ_ПеремещениеТоваров_Врем.Партнер КАК Партнер,
		|	ВТ_ПеремещениеТоваров_Врем.Контрагент КАК Контрагент,
		|	ВТ_ПеремещениеТоваров_Врем.Договор КАК Договор,
		|	ВТ_ПеремещениеТоваров_Врем.ТорговыйПредставитель КАК ТорговыйПредставитель,
		|	ВТ_ПеремещениеТоваров_Врем.Серия КАК Серия,
		|	ВТ_ПеремещениеТоваров_Врем.Регистратор КАК Регистратор,
		|	ВТ_ПеремещениеТоваров_Врем.Накладная КАК Накладная,
		|	ВТ_ПеремещениеТоваров_Врем.doc_ttn КАК doc_ttn,
		|	ВТ_ПеремещениеТоваров_Врем.Организация КАК Организация,
		|	ВТ_ПеремещениеТоваров_Врем.Номенклатура КАК Номенклатура,
		|	ВТ_ПеремещениеТоваров_Врем.Характеристика КАК Характеристика,
		|	ВТ_ПеремещениеТоваров_Врем.curr_date КАК curr_date,
		|	ВТ_ПеремещениеТоваров_Врем.doc_number КАК doc_number,
		|	ВТ_ПеремещениеТоваров_Врем.doc_parent КАК doc_parent,
		|	ВТ_ПеремещениеТоваров_Врем.oper_type КАК oper_type,
		|	ВТ_ПеремещениеТоваров_Врем.deliv_date КАК deliv_date,
		|	ВТ_ПеремещениеТоваров_Врем.order_stat КАК order_stat,
		|	ВТ_ПеремещениеТоваров_Врем.quantity КАК quantity,
		|	ВТ_ПеремещениеТоваров_Врем.quantity * ЕСТЬNULL(ВТ_РозничныеЦены.Цена, 0) КАК amount,
		|	ВТ_ПеремещениеТоваров_Врем.discount КАК discount,
		|	ВТ_ПеремещениеТоваров_Врем.vat КАК vat,
		|	ВТ_Номенклатура.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ ВТ_ПеремещениеТоваров
		|ИЗ
		|	ВТ_ПеремещениеТоваров_Врем КАК ВТ_ПеремещениеТоваров_Врем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
		|		ПО (ВТ_Номенклатура.Ссылка = ВТ_ПеремещениеТоваров_Врем.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РозничныеЦены КАК ВТ_РозничныеЦены
		|		ПО (ВТ_РозничныеЦены.Номенклатура = ВТ_ПеремещениеТоваров_Врем.Номенклатура)
		|			И (ВТ_РозничныеЦены.Характеристика = ВТ_ПеремещениеТоваров_Врем.Характеристика)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ПеремещенияКакПродажи
		|						И ВТ_ПеремещениеТоваров_Врем.oper_type В (0, 1)
		|					ИЛИ НЕ &ПеремещенияКакПродажи
		|						И ВТ_ПеремещениеТоваров_Врем.oper_type В (4, 5)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
	
		//|ГДЕ
		//|	(ВТ_ПеремещениеТоваров_Врем.Регистратор, ВТ_ПеремещениеТоваров_Врем.Номенклатура, ВТ_ПеремещениеТоваров_Врем.Характеристика) В
		//|			(ВЫБРАТЬ
		//|				ВТ_ПеремещениеТоваров_Врем.Регистратор КАК Регистратор,
		//|				ВТ_ПеремещениеТоваров_Врем.Номенклатура КАК Номенклатура,
		//|				ВТ_ПеремещениеТоваров_Врем.Характеристика КАК Характеристика
		//|			ИЗ
		//|				ВТ_ПеремещениеТоваров_Врем КАК ВТ_ПеремещениеТоваров_Врем
		//|			СГРУППИРОВАТЬ ПО
		//|				ВТ_ПеремещениеТоваров_Врем.Номенклатура,
		//|				ВТ_ПеремещениеТоваров_Врем.Регистратор,
		//|				ВТ_ПеремещениеТоваров_Врем.Характеристика)
		//|	И ВТ_ПеремещениеТоваров_Врем.oper_type В (0, 1, 4, 5)
		//|	И ВЫРАЗИТЬ(ВТ_ПеремещениеТоваров_Врем.ТорговаяТочка КАК Справочник.Склады) В
		//|			(ВЫБРАТЬ
		//|				ВТ_РозничныеМагазины.Ссылка
		//|			ИЗ
		//|				ВТ_РозничныеМагазины КАК ВТ_РозничныеМагазины)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст
	, "&ОтборПоТипуДокументов_ПеремещениеТоваров"
	, ТекстОтбораПоТипуДокументов(
		"Рег.Регистратор"
		, "ПеремещениеТоваров"
		, Запрос.Параметры.ТипыДокументов
		)
	);

	Запрос.Текст = СтрЗаменить(Запрос.Текст
		, "&АналитикаУчетаНоменклатурыМестоХранения"
		, ?( Метаданные.Справочники.КлючиАналитикиУчетаНоменклатуры.Реквизиты.Найти("МестоХранения") <> Неопределено
			, "АналитикаУчетаНоменклатуры.МестоХранения"
			, "АналитикаУчетаНоменклатуры.Склад"
		));
		
	Запрос.Выполнить();
	
	#КонецОбласти
	
	#Область ВТ_Движения_Врем
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &ВыделятьБесплатныйТовар
		|				И ВТ_Движения.quantity <> 0
		|				И ВТ_Движения.amount / ВТ_Движения.quantity <= &ПорогОкругленияБесплатногоТовара
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК БесплатныйТовар,
		|	ВТ_Движения.Склад КАК Склад,
		|	ВТ_Движения.Клиент КАК Клиент,
		|	ВТ_Движения.ТорговаяТочка КАК ТорговаяТочка,
		|	ВТ_Движения.АдресДоставки КАК АдресДоставки,
		|	ВТ_Движения.Партнер КАК Партнер,
		|	ВТ_Движения.Контрагент КАК Контрагент,
		|	ВТ_Движения.Договор КАК Договор,
		|	ВТ_Движения.ТорговыйПредставитель КАК ТорговыйПредставитель,
		|	ВТ_Движения.Серия КАК Серия,
		|	ВТ_Движения.Регистратор КАК Регистратор,
		|	ВТ_Движения.Накладная КАК Накладная,
		|	ВТ_Движения.doc_ttn КАК doc_ttn,
		|	ВТ_Движения.Организация КАК Организация,
		|	ВТ_Движения.Номенклатура КАК Номенклатура,
		|	ВТ_Движения.Характеристика КАК Характеристика,
		|	ВТ_Движения.curr_date КАК curr_date,
		|	ВТ_Движения.doc_number КАК doc_number,
		|	ВТ_Движения.doc_parent КАК doc_parent,
		|	ВТ_Движения.oper_type КАК oper_type,
		|	ВТ_Движения.deliv_date КАК deliv_date,
		|	ВТ_Движения.order_stat КАК order_stat,
		|	ВТ_Движения.quantity КАК quantity,
		|	ВТ_Движения.amount КАК amount,
		|	ВТ_Движения.discount КАК discount,
		|	ВТ_Движения.vat КАК vat,
		|	ВТ_Движения.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ ВТ_Движения_Врем_Предварительно
		|ИЗ
		|	ВТ_РеализацияТоваровУслуг КАК ВТ_Движения
		|ГДЕ
		|	&ДопустимыНулевыеКоличества
		|	И &ИсключитьРозничныеСклады
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &ВыделятьБесплатныйТовар
		|				И ВТ_Движения.quantity <> 0
		|				И ВТ_Движения.amount / ВТ_Движения.quantity <= &ПорогОкругленияБесплатногоТовара
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВТ_Движения.Склад,
		|	ВТ_Движения.Клиент,
		|	ВТ_Движения.ТорговаяТочка,
		|	ВТ_Движения.АдресДоставки,
		|	ВТ_Движения.Партнер,
		|	ВТ_Движения.Контрагент,
		|	ВТ_Движения.Договор,
		|	ВТ_Движения.ТорговыйПредставитель,
		|	ВТ_Движения.Серия,
		|	ВТ_Движения.Регистратор,
		|	ВТ_Движения.Накладная,
		|	ВТ_Движения.doc_ttn,
		|	ВТ_Движения.Организация,
		|	ВТ_Движения.Номенклатура,
		|	ВТ_Движения.Характеристика,
		|	ВТ_Движения.curr_date,
		|	ВТ_Движения.doc_number,
		|	ВТ_Движения.doc_parent,
		|	ВТ_Движения.oper_type,
		|	ВТ_Движения.deliv_date,
		|	ВТ_Движения.order_stat,
		|	ВТ_Движения.quantity,
		|	ВТ_Движения.amount,
		|	ВТ_Движения.discount,
		|	ВТ_Движения.vat,
		|	ВТ_Движения.СтавкаНДС
		|ИЗ
		|	ВТ_ВозвратТоваровОтКлиента КАК ВТ_Движения
		|ГДЕ
		|	&ДопустимыНулевыеКоличества
		|	И &ИсключитьРозничныеСклады
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛОЖЬ,
		|	ВТ_Движения.Склад,
		|	ВТ_Движения.Клиент,
		|	ВТ_Движения.ТорговаяТочка,
		|	ВТ_Движения.АдресДоставки,
		|	ВТ_Движения.Партнер,
		|	ВТ_Движения.Контрагент,
		|	ВТ_Движения.Договор,
		|	ВТ_Движения.ТорговыйПредставитель,
		|	ВТ_Движения.Серия,
		|	ВТ_Движения.Регистратор,
		|	ВТ_Движения.Накладная,
		|	ВТ_Движения.doc_ttn,
		|	ВТ_Движения.Организация,
		|	ВТ_Движения.Номенклатура,
		|	ВТ_Движения.Характеристика,
		|	ВТ_Движения.curr_date,
		|	ВТ_Движения.doc_number,
		|	ВТ_Движения.doc_parent,
		|	ВТ_Движения.oper_type,
		|	ВТ_Движения.deliv_date,
		|	ВТ_Движения.order_stat,
		|	ВТ_Движения.quantity,
		|	ВТ_Движения.amount,
		|	ВТ_Движения.discount,
		|	ВТ_Движения.vat,
		|	ВТ_Движения.СтавкаНДС
		|ИЗ
		|	ВТ_ПередачаТоваровМеждуОрганизациями КАК ВТ_Движения
		|ГДЕ
		|	&ДопустимыНулевыеКоличества
		|	И &ИсключитьРозничныеСклады
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛОЖЬ,
		|	ВТ_Движения.Склад,
		|	ВТ_Движения.Клиент,
		|	ВТ_Движения.ТорговаяТочка,
		|	ВТ_Движения.АдресДоставки,
		|	ВТ_Движения.Партнер,
		|	ВТ_Движения.Контрагент,
		|	ВТ_Движения.Договор,
		|	ВТ_Движения.ТорговыйПредставитель,
		|	ВТ_Движения.Серия,
		|	ВТ_Движения.Регистратор,
		|	ВТ_Движения.Накладная,
		|	ВТ_Движения.doc_ttn,
		|	ВТ_Движения.Организация,
		|	ВТ_Движения.Номенклатура,
		|	ВТ_Движения.Характеристика,
		|	ВТ_Движения.curr_date,
		|	ВТ_Движения.doc_number,
		|	ВТ_Движения.doc_parent,
		|	ВТ_Движения.oper_type,
		|	ВТ_Движения.deliv_date,
		|	ВТ_Движения.order_stat,
		|	ВТ_Движения.quantity,
		|	ВТ_Движения.amount,
		|	ВТ_Движения.discount,
		|	ВТ_Движения.vat,
		|	ВТ_Движения.СтавкаНДС
		|ИЗ
		|	ВТ_ПриобретениеТоваровУслуг КАК ВТ_Движения
		|ГДЕ
		|	&ДопустимыНулевыеКоличества
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛОЖЬ,
		|	ВТ_Движения.Склад,
		|	ВТ_Движения.Клиент,
		|	ВТ_Движения.ТорговаяТочка,
		|	ВТ_Движения.АдресДоставки,
		|	ВТ_Движения.Партнер,
		|	ВТ_Движения.Контрагент,
		|	ВТ_Движения.Договор,
		|	ВТ_Движения.ТорговыйПредставитель,
		|	ВТ_Движения.Серия,
		|	ВТ_Движения.Регистратор,
		|	ВТ_Движения.Накладная,
		|	ВТ_Движения.doc_ttn,
		|	ВТ_Движения.Организация,
		|	ВТ_Движения.Номенклатура,
		|	ВТ_Движения.Характеристика,
		|	ВТ_Движения.curr_date,
		|	ВТ_Движения.doc_number,
		|	ВТ_Движения.doc_parent,
		|	ВТ_Движения.oper_type,
		|	ВТ_Движения.deliv_date,
		|	ВТ_Движения.order_stat,
		|	ВТ_Движения.quantity,
		|	ВТ_Движения.amount,
		|	ВТ_Движения.discount,
		|	ВТ_Движения.vat,
		|	ВТ_Движения.СтавкаНДС
		|ИЗ
		|	ВТ_ПередачаТоваровХранителю КАК ВТ_Движения
		|ГДЕ
		|	&ДопустимыНулевыеКоличества
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛОЖЬ,
		|	ВТ_Движения.Склад,
		|	ВТ_Движения.Клиент,
		|	ВТ_Движения.ТорговаяТочка,
		|	ВТ_Движения.АдресДоставки,
		|	ВТ_Движения.Партнер,
		|	ВТ_Движения.Контрагент,
		|	ВТ_Движения.Договор,
		|	ВТ_Движения.ТорговыйПредставитель,
		|	ВТ_Движения.Серия,
		|	ВТ_Движения.Регистратор,
		|	ВТ_Движения.Накладная,
		|	ВТ_Движения.doc_ttn,
		|	ВТ_Движения.Организация,
		|	ВТ_Движения.Номенклатура,
		|	ВТ_Движения.Характеристика,
		|	ВТ_Движения.curr_date,
		|	ВТ_Движения.doc_number,
		|	ВТ_Движения.doc_parent,
		|	ВТ_Движения.oper_type,
		|	ВТ_Движения.deliv_date,
		|	ВТ_Движения.order_stat,
		|	ВТ_Движения.quantity,
		|	ВТ_Движения.amount,
		|	ВТ_Движения.discount,
		|	ВТ_Движения.vat,
		|	ВТ_Движения.СтавкаНДС
		|ИЗ
		|	ВТ_ВозвратТоваровПоставщику КАК ВТ_Движения
		|ГДЕ
		|	&ДопустимыНулевыеКоличества
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛОЖЬ,
		|	ВТ_Движения.Склад,
		|	ВТ_Движения.Клиент,
		|	ВТ_Движения.ТорговаяТочка,
		|	ВТ_Движения.АдресДоставки,
		|	ВТ_Движения.Партнер,
		|	ВТ_Движения.Контрагент,
		|	ВТ_Движения.Договор,
		|	ВТ_Движения.ТорговыйПредставитель,
		|	ВТ_Движения.Серия,
		|	ВТ_Движения.Регистратор,
		|	ВТ_Движения.Накладная,
		|	ВТ_Движения.doc_ttn,
		|	ВТ_Движения.Организация,
		|	ВТ_Движения.Номенклатура,
		|	ВТ_Движения.Характеристика,
		|	ВТ_Движения.curr_date,
		|	ВТ_Движения.doc_number,
		|	ВТ_Движения.doc_parent,
		|	ВТ_Движения.oper_type,
		|	ВТ_Движения.deliv_date,
		|	ВТ_Движения.order_stat,
		|	ВТ_Движения.quantity,
		|	ВТ_Движения.amount,
		|	ВТ_Движения.discount,
		|	ВТ_Движения.vat,
		|	ВТ_Движения.СтавкаНДС
		|ИЗ
		|	ВТ_ВыручкаИСебестоимостьПродаж КАК ВТ_Движения
		|ГДЕ
		|	&ДопустимыНулевыеКоличества
		|	И &ИсключитьРозничныеСклады
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛОЖЬ,
		|	ВТ_Движения.Склад,
		|	ВТ_Движения.Клиент,
		|	ВТ_Движения.ТорговаяТочка,
		|	ВТ_Движения.АдресДоставки,
		|	ВТ_Движения.Партнер,
		|	ВТ_Движения.Контрагент,
		|	ВТ_Движения.Договор,
		|	ВТ_Движения.ТорговыйПредставитель,
		|	ВТ_Движения.Серия,
		|	ВТ_Движения.Регистратор,
		|	ВТ_Движения.Накладная,
		|	ВТ_Движения.doc_ttn,
		|	ВТ_Движения.Организация,
		|	ВТ_Движения.Номенклатура,
		|	ВТ_Движения.Характеристика,
		|	ВТ_Движения.curr_date,
		|	ВТ_Движения.doc_number,
		|	ВТ_Движения.doc_parent,
		|	ВТ_Движения.oper_type,
		|	ВТ_Движения.deliv_date,
		|	ВТ_Движения.order_stat,
		|	ВТ_Движения.quantity,
		|	ВТ_Движения.amount,
		|	ВТ_Движения.discount,
		|	ВТ_Движения.vat,
		|	ВТ_Движения.СтавкаНДС
		|ИЗ
		|	ВТ_ПеремещениеТоваров КАК ВТ_Движения
		|ГДЕ
		|	&ДопустимыНулевыеКоличества
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛОЖЬ,
		|	ВТ_Движения.Склад,
		|	ВТ_Движения.Клиент,
		|	ВТ_Движения.ТорговаяТочка,
		|	ВТ_Движения.АдресДоставки,
		|	ВТ_Движения.Партнер,
		|	ВТ_Движения.Контрагент,
		|	ВТ_Движения.Договор,
		|	ВТ_Движения.ТорговыйПредставитель,
		|	ВТ_Движения.Серия,
		|	ВТ_Движения.Регистратор,
		|	ВТ_Движения.Накладная,
		|	ВТ_Движения.doc_ttn,
		|	ВТ_Движения.Организация,
		|	ВТ_Движения.Номенклатура,
		|	ВТ_Движения.Характеристика,
		|	ВТ_Движения.curr_date,
		|	ВТ_Движения.doc_number,
		|	ВТ_Движения.doc_parent,
		|	ВТ_Движения.oper_type,
		|	ВТ_Движения.deliv_date,
		|	ВТ_Движения.order_stat,
		|	ВТ_Движения.quantity,
		|	ВТ_Движения.amount,
		|	ВТ_Движения.discount,
		|	ВТ_Движения.vat,
		|	ВТ_Движения.СтавкаНДС
		|ИЗ
		|	ВТ_ЧекККМ КАК ВТ_Движения
		|ГДЕ
		|	&ДопустимыНулевыеКоличества
		|	И &ИсключитьРозничныеСклады
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛОЖЬ,
		|	ВТ_Движения.Склад,
		|	ВТ_Движения.Клиент,
		|	ВТ_Движения.ТорговаяТочка,
		|	ВТ_Движения.АдресДоставки,
		|	ВТ_Движения.Партнер,
		|	ВТ_Движения.Контрагент,
		|	ВТ_Движения.Договор,
		|	ВТ_Движения.ТорговыйПредставитель,
		|	ВТ_Движения.Серия,
		|	ВТ_Движения.Регистратор,
		|	ВТ_Движения.Накладная,
		|	ВТ_Движения.doc_ttn,
		|	ВТ_Движения.Организация,
		|	ВТ_Движения.Номенклатура,
		|	ВТ_Движения.Характеристика,
		|	ВТ_Движения.curr_date,
		|	ВТ_Движения.doc_number,
		|	ВТ_Движения.doc_parent,
		|	ВТ_Движения.oper_type,
		|	ВТ_Движения.deliv_date,
		|	ВТ_Движения.order_stat,
		|	ВТ_Движения.quantity,
		|	ВТ_Движения.amount,
		|	ВТ_Движения.discount,
		|	ВТ_Движения.vat,
		|	ВТ_Движения.СтавкаНДС
		|ИЗ
		|	ВТ_ЧекККМВозврат КАК ВТ_Движения
		|ГДЕ
		|	&ДопустимыНулевыеКоличества
		|	И &ИсключитьРозничныеСклады
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_РеализацияТоваровУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ВозвратТоваровОтКлиента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ПередачаТоваровМеждуОрганизациями
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ПриобретениеТоваровУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ВозвратТоваровПоставщику
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ВыручкаИСебестоимостьПродаж
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ПеремещениеТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ЧекККМ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ЧекККМВозврат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Отбор_Продажи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Отбор_Закупки";
		
	Если ПоступлениеТоваровУслуг Тогда
	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриобретениеТоваровУслуг", "ПоступлениеТоваровУслуг");
	
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменитьЕх(Запрос.Текст,
		"&ИсключитьРозничныеСклады"
		, ?(Не Запрос.Параметры.ПеремещенияКакПродажи
			, "ИСТИНА"
			, "НЕ ВТ_Движения.Склад В
			|		(	ВЫБРАТЬ
			|				ВТ_РозничныеМагазины.Ссылка
			|			ИЗ
			|				ВТ_РозничныеМагазины КАК ВТ_РозничныеМагазины
			|)"
		)
	);
	
	Запрос.Текст = СтрЗаменитьЕх(Запрос.Текст,
		"&ДопустимыНулевыеКоличества"
		, ?(Запрос.Параметры.ДопустимыНулевыеКоличества
			, "ИСТИНА"
			, "ВТ_Движения.quantity > 0"
		)
	);
	
	Запрос.Выполнить(); // ВТ_Движения_Врем_Предварительно
	
	Если Не ЗначениеЗаполнено(Запрос.Параметры.СвойствоЗамещающийКлиент) Тогда
	
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Клиент,
		|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК ЗамещающийКлиент
		|ПОМЕСТИТЬ ВТ_ЗамещающиеКлиенты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";
		
	ИначеЕсли Запрос.Параметры.СвойствоЗамещающийКлиент.ЭтоДополнительноеСведение Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ЗамещающиеКлиенты.Объект КАК Справочник.Партнеры), ВЫРАЗИТЬ(ЗамещающиеКлиенты.Объект КАК Справочник.Контрагенты)) КАК Клиент,
		|	ВЫБОР
		|		КОГДА ЗамещающиеКлиенты.Объект ССЫЛКА Справочник.Партнеры
		|			ТОГДА ВЫРАЗИТЬ(ЗамещающиеКлиенты.Значение КАК Справочник.Партнеры)
		|		ИНАЧЕ ВЫРАЗИТЬ(ЗамещающиеКлиенты.Значение КАК Справочник.Контрагенты)
		|	КОНЕЦ КАК ЗамещающийКлиент
		|ПОМЕСТИТЬ ВТ_ЗамещающиеКлиенты
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ЗамещающиеКлиенты
		|ГДЕ
		|	ЗамещающиеКлиенты.Объект В
		|			(ВЫБРАТЬ
		|				Движения.Клиент
		|			ИЗ
		|				ВТ_Движения_Врем_Предварительно КАК Движения)
		|	И ЗамещающиеКлиенты.Свойство = &СвойствоЗамещающийКлиент
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Клиент";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗамещающиеКлиенты.Ссылка КАК Клиент,
		|	ВЫРАЗИТЬ(ЗамещающиеКлиенты.Значение КАК Справочник.Партнеры) КАК ЗамещающийКлиент
		|ПОМЕСТИТЬ ВТ_ЗамещающиеКлиенты
		|ИЗ
		|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ЗамещающиеКлиенты
		|ГДЕ
		|	ЗамещающиеКлиенты.Ссылка В
		|			(ВЫБРАТЬ
		|				Движения.Клиент
		|			ИЗ
		|				ВТ_Движения_Врем_Предварительно КАК Движения)
		|	И ЗамещающиеКлиенты.Свойство = &СвойствоЗамещающийКлиент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗамещающиеКлиенты.Ссылка,
		|	ВЫРАЗИТЬ(ЗамещающиеКлиенты.Значение КАК Справочник.Контрагенты)
		|ИЗ
		|	Справочник.Контрагенты.ДополнительныеРеквизиты КАК ЗамещающиеКлиенты
		|ГДЕ
		|	ЗамещающиеКлиенты.Ссылка В
		|			(ВЫБРАТЬ
		|				Движения.Клиент
		|			ИЗ
		|				ВТ_Движения_Врем_Предварительно КАК Движения)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Клиент"
		
	КонецЕсли;
	
	Запрос.Выполнить(); // ВТ_ЗамещающиеКлиенты
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Движения.БесплатныйТовар КАК БесплатныйТовар,
		|	ЕСТЬNULL(ЗамещающиеКлиенты.ЗамещающийКлиент, ЕСТЬNULL(Движения.Клиент, НЕОПРЕДЕЛЕНО)) КАК Клиент,
		|	ЕСТЬNULL(Движения.ТорговаяТочка, НЕОПРЕДЕЛЕНО) КАК ТорговаяТочка,
		|	ЕСТЬNULL(Движения.АдресДоставки, """") КАК АдресДоставки,
		|	ВЫБОР
		|		КОГДА ЗамещающиеКлиенты.ЗамещающийКлиент ССЫЛКА Справочник.Партнеры
		|			ТОГДА ЗамещающиеКлиенты.ЗамещающийКлиент
		|		ИНАЧЕ Движения.Партнер
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР
		|		КОГДА ЗамещающиеКлиенты.ЗамещающийКлиент ССЫЛКА Справочник.Контрагенты
		|			ТОГДА ЗамещающиеКлиенты.ЗамещающийКлиент
		|		ИНАЧЕ Движения.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	ВЫБОР
		|		КОГДА ЗамещающиеКлиенты.ЗамещающийКлиент ССЫЛКА Справочник.Контрагенты
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|		ИНАЧЕ Движения.Договор
		|	КОНЕЦ КАК Договор,
		|	Движения.ТорговыйПредставитель КАК ТорговыйПредставитель,
		|	Движения.Серия КАК Серия,
		|	Движения.Регистратор КАК Регистратор,
		|	Движения.Накладная КАК Накладная,
		|	Движения.doc_ttn КАК doc_ttn,
		|	Движения.Организация КАК Организация,
		|	Движения.Склад КАК Склад,
		|	Движения.Номенклатура КАК Номенклатура,
		|	Движения.Характеристика КАК Характеристика,
		|	Движения.curr_date КАК doc_date,
		|	Движения.doc_number КАК doc_number,
		|	Движения.doc_parent КАК doc_parent,
		|	Движения.oper_type КАК oper_type,
		|	МАКСИМУМ(Движения.deliv_date) КАК deliv_date,
		|	Движения.order_stat КАК order_stat,
		|	СУММА(Движения.quantity) КАК quantity,
		|	СУММА(Движения.amount) КАК amount,
		|	СУММА(Движения.discount) КАК discount,
		|	СУММА(Движения.vat) КАК vat,
		|	Движения.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ ВТ_Движения_Врем
		|ИЗ
		|	ВТ_Движения_Врем_Предварительно КАК Движения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗамещающиеКлиенты КАК ЗамещающиеКлиенты
		|		ПО (ЗамещающиеКлиенты.Клиент = Движения.Клиент)
		|
		|СГРУППИРОВАТЬ ПО
		|	Движения.БесплатныйТовар,
		|	Движения.Склад,
		|	Движения.order_stat,
		|	Движения.oper_type,
		|	Движения.doc_parent,
		|	Движения.doc_number,
		|	Движения.curr_date,
		|	Движения.Характеристика,
		|	Движения.Номенклатура,
		|	Движения.Организация,
		|	Движения.Накладная,
		|	Движения.doc_ttn,
		|	Движения.Регистратор,
		|	Движения.Серия,
		|	Движения.ТорговыйПредставитель,
		|	ВЫБОР
		|		КОГДА ЗамещающиеКлиенты.ЗамещающийКлиент ССЫЛКА Справочник.Партнеры
		|			ТОГДА ЗамещающиеКлиенты.ЗамещающийКлиент
		|		ИНАЧЕ Движения.Партнер
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЗамещающиеКлиенты.ЗамещающийКлиент ССЫЛКА Справочник.Контрагенты
		|			ТОГДА ЗамещающиеКлиенты.ЗамещающийКлиент
		|		ИНАЧЕ Движения.Контрагент
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЗамещающиеКлиенты.ЗамещающийКлиент ССЫЛКА Справочник.Контрагенты
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|		ИНАЧЕ Движения.Договор
		|	КОНЕЦ,
		|	ЕСТЬNULL(ЗамещающиеКлиенты.ЗамещающийКлиент, ЕСТЬNULL(Движения.Клиент, НЕОПРЕДЕЛЕНО)),
		|	ЕСТЬNULL(Движения.ТорговаяТочка, НЕОПРЕДЕЛЕНО),
		|	ЕСТЬNULL(Движения.АдресДоставки, """"),
		|	Движения.СтавкаНДС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Клиент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Движения_Врем_Предварительно";	
	
	Запрос.Выполнить(); // ВТ_Движения_Врем
	
	#КонецОбласти
	
	#Область ВТ_СегментыПартнеров
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПартнерыСегмента.Партнер КАК Партнер,
		|	МАКСИМУМ(ПартнерыСегмента.Сегмент) КАК Сегмент
		|ПОМЕСТИТЬ ВТ_СегментыПартнеров
		|ИЗ
		|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		|ГДЕ
		|	ПартнерыСегмента.Партнер В
		|			(ВЫБРАТЬ
		|				ВТ_Движения_Врем.Партнер
		|			ИЗ
		|				ВТ_Движения_Врем КАК ВТ_Движения_Врем)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартнерыСегмента.Партнер
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Партнер";
	
	Запрос.Выполнить(); // ВТ_СегментыПартнеров
	
	#КонецОбласти
	
	#Область ВТ_Продажи_Врем
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Движения.БесплатныйТовар КАК БесплатныйТовар,
		|	Движения.Клиент КАК Клиент,
		|	ВЫБОР
		|		КОГДА НЕ Движения.Клиент В (&КлиентыБезТочекДоставки)
		|			ТОГДА Движения.ТорговаяТочка
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ТорговаяТочка,
		|	ВЫБОР
		|		КОГДА НЕ Движения.Клиент В (&КлиентыБезТочекДоставки)
		|			ТОГДА Движения.АдресДоставки
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК АдресДоставки,
		|	Движения.Партнер КАК Партнер,
		|	ВТ_СегментыПартнеров.Сегмент КАК ПартнерСегмент,
		|	Движения.Контрагент КАК Контрагент,
		|	Движения.Договор КАК Договор,
		|	Движения.ТорговыйПредставитель КАК ТорговыйПредставитель,
		|	Движения.Серия КАК Серия,
		|	Движения.Регистратор КАК Регистратор,
		|	Движения.Накладная КАК Накладная,
		|	Движения.doc_ttn КАК doc_ttn,
		|	Движения.Организация КАК Организация,
		|	Движения.Склад КАК Склад,
		|	Движения.Номенклатура КАК Номенклатура,
		|	Движения.Характеристика КАК Характеристика,
		|	Движения.doc_date КАК doc_date,
		|	Движения.doc_number КАК doc_number,
		|	Движения.doc_parent КАК doc_parent,
		|	Движения.oper_type КАК oper_type,
		|	Движения.deliv_date КАК deliv_date,
		|	Движения.order_stat КАК order_stat,
		|	Движения.quantity КАК quantity,
		|	Движения.amount КАК amount,
		|	Движения.discount КАК discount,
		|	Движения.vat КАК vat,
		|	Движения.СтавкаНДС КАК СтавкаНДС,
		|	ЕСТЬNULL(КаналыРынка.Значение, НЕОПРЕДЕЛЕНО) КАК КаналРынка
		|ПОМЕСТИТЬ ВТ_Продажи_Врем
		|ИЗ
		|	ВТ_Движения_Врем КАК Движения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СегментыПартнеров КАК ВТ_СегментыПартнеров
		|		ПО (ВТ_СегментыПартнеров.Партнер = Движения.Партнер)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСвойств_КаналыРынка КАК КаналыРынка
		|		ПО (КаналыРынка.Объект = Движения.Партнер)
		|			И (КаналыРынка.Свойство = &СвойствоКаналРынка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Клиент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Движения_Врем";
	
	СвойствоКаналРынка = Запрос.Параметры.СвойствоКаналРынка;
	
	Замены = Новый СписокЗначений;
	
	ЭтоДополнительноеСведение = 
		ЗначениеЗаполнено(СвойствоКаналРынка)
		и ТипЗнч(СвойствоКаналРынка) <> Тип("Строка")
		и СвойствоКаналРынка.ЭтоДополнительноеСведение;
	
	Если Не ЗначениеЗаполнено(СвойствоКаналРынка) или ТипЗнч(СвойствоКаналРынка) = Тип("Строка") Тогда
		
		Запрос.Параметры.СвойствоКаналРынка = СокрЛП(СвойствоКаналРынка);
		
		Замены.Добавить(
			"ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСвойств_КаналыРынка КАК КаналыРынка
			|		ПО (КаналыРынка.Объект = Движения.Партнер)
			|			И (КаналыРынка.Свойство = &СвойствоКаналРынка)"
			, "");
			
		Если ЗначениеЗаполнено(СвойствоКаналРынка) Тогда
		
			Замены.Добавить("ЕСТЬNULL(КаналыРынка.Значение, НЕОПРЕДЕЛЕНО) КАК КаналРынка"
				, "&СвойствоКаналРынка КАК КаналРынка");
				
		Иначе
		
			Замены.Добавить("ЕСТЬNULL(КаналыРынка.Значение, НЕОПРЕДЕЛЕНО) КАК КаналРынка"
				, "ЕСТЬNULL(Движения.Партнер.БизнесРегион.Ссылка, НЕОПРЕДЕЛЕНО) КАК КаналРынка");
				
		КонецЕсли;
		
	ИначеЕсли ЭтоДополнительноеСведение Тогда
	
		Замены.Добавить(
			"ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСвойств_КаналыРынка КАК КаналыРынка
			|		ПО (КаналыРынка.Объект = Движения.Партнер)
			|			И (КаналыРынка.Свойство = &СвойствоКаналРынка)"
			,"ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК КаналыРынкаПартнера
			|		ПО (КаналыРынкаПартнера.Объект = Движения.Партнер)
			|			И (КаналыРынкаПартнера.Свойство = &СвойствоКаналРынка)
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК КаналыРынкаОрганизации
			|		ПО (КаналыРынкаОрганизации.Объект = Движения.Организация)
			|			И (КаналыРынкаОрганизации.Свойство = &СвойствоКаналРынка)
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК КаналыРынкаСегментаПартнера
			|		ПО (КаналыРынкаСегментаПартнера.Объект = ВТ_СегментыПартнеров.Сегмент)
			|			И (КаналыРынкаСегментаПартнера.Свойство = &СвойствоКаналРынка)
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК КаналыРынкаБизнесРегиона
			|		ПО (КаналыРынкаБизнесРегиона.Объект = Движения.Партнер.БизнесРегион)
			|			И (КаналыРынкаБизнесРегиона.Свойство = &СвойствоКаналРынка)
			|
			|");

		Замены.Добавить( // Поле выборки
			"ЕСТЬNULL(КаналыРынка.Значение, НЕОПРЕДЕЛЕНО) КАК КаналРынка"
			, "ЕСТЬNULL(
				| КаналыРынкаПартнера.Значение, ЕСТЬNULL(
				| КаналыРынкаБизнесРегиона.Значение, ЕСТЬNULL(
				| КаналыРынкаСегментаПартнера.Значение ,ЕСТЬNULL(
				| КаналыРынкаОрганизации.Значение,
				| ""Основной канал рынка""
				|)))) КАК КаналРынка"
		);
		
	Иначе
		
		Замены.Добавить(
			"ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСвойств_КаналыРынка КАК КаналыРынка
			|		ПО (КаналыРынка.Объект = Движения.Партнер)
			|			И (КаналыРынка.Свойство = &СвойствоКаналРынка)"
			,"ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.ДополнительныеРеквизиты КАК КаналыРынкаПартнера
			|		ПО (КаналыРынкаПартнера.Ссылка = Движения.Партнер)
			|			И (КаналыРынкаПартнера.Свойство = &СвойствоКаналРынка)
			|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.ДополнительныеРеквизиты КАК КаналыРынкаОрганизации
			|		ПО (КаналыРынкаОрганизации.Ссылка = Движения.Организация)
			|			И (КаналыРынкаОрганизации.Свойство = &СвойствоКаналРынка)
			|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БизнесРегионы.ДополнительныеРеквизиты КАК КаналыРынкаБизнесРегиона
			|		ПО (КаналыРынкаБизнесРегиона.Ссылка = Движения.Партнер.БизнесРегион)
			|			И (КаналыРынкаБизнесРегиона.Свойство = &СвойствоКаналРынка)
			|
			|");

		Замены.Добавить( // Поле выборки
			"ЕСТЬNULL(КаналыРынка.Значение, НЕОПРЕДЕЛЕНО) КАК КаналРынка"
			
			,"ЕСТЬNULL(КаналыРынкаПартнера.Значение,
			| ЕСТЬNULL(КаналыРынкаБизнесРегиона.Значение,
			| ЕСТЬNULL(КаналыРынкаОрганизации.Значение,
			//| НЕОПРЕДЕЛЕНО
			| ""Основной канал рынка""
			| ))) КАК КаналРынка"
		);
		
	КонецЕсли;
	
	Для каждого ЗаменыСтрока Из Замены Цикл
	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменыСтрока.Значение, ЗаменыСтрока.Представление);
	
	КонецЦикла;
	
	Запрос.Выполнить();
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ВТ_КаналыРынка
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Продажи_Врем.КаналРынка КАК КаналРынка,
		|	ВТ_Продажи_Врем.КаналРынка КАК mccode,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_Продажи_Врем.КаналРынка) КАК mcname
		|ПОМЕСТИТЬ ВТ_КаналыРынка
		|ИЗ
		|	ВТ_Продажи_Врем КАК ВТ_Продажи_Врем";
	
	Запрос.Выполнить();
	
	ВТ_ЗаменитьЗначенияНаКоды(Запрос, "ВТ_КаналыРынка", "mccode");
	
	#КонецОбласти
	
	#Область ВТ_СчетаФактуры
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Продажи_Врем.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТ_Регистраторы
		|ИЗ
		|	ВТ_Продажи_Врем КАК ВТ_Продажи_Врем
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(СФ.Ссылка.Номер) КАК doc_inv,
		|	СФ.ДокументОснование КАК Регистратор
		|ПОМЕСТИТЬ ВТ_СчетаФактуры
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СФ
		|ГДЕ
		|	СФ.Ссылка.Проведен
		|	И СФ.Ссылка.Дата >= &ДатаНач
		|	И СФ.ДокументОснование В
		|			(ВЫБРАТЬ
		|				ВТ_Регистраторы.Регистратор
		|			ИЗ
		|				ВТ_Регистраторы КАК ВТ_Регистраторы)
		|
		|СГРУППИРОВАТЬ ПО
		|	СФ.ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(СФ.Ссылка.Номер),
		|	СФ.ДокументОснование
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СФ
		|ГДЕ
		|	СФ.Ссылка.Проведен
		|	И СФ.Ссылка.Дата >= &ДатаНач
		|	И СФ.ДокументОснование В
		|			(ВЫБРАТЬ
		|				ВТ_Регистраторы.Регистратор
		|			ИЗ
		|				ВТ_Регистраторы КАК ВТ_Регистраторы)
		|
		|СГРУППИРОВАТЬ ПО
		|	СФ.ДокументОснование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Регистраторы
		|";
	
	Запрос.Выполнить();
	
	#КонецОбласти
	
	#Область ВТ_Номера
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_СчетаФактуры.doc_inv КАК Номер
		|ИЗ
		|	ВТ_СчетаФактуры КАК ВТ_СчетаФактуры
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ_Продажи_Врем.doc_ttn
		|ИЗ
		|	ВТ_Продажи_Врем КАК ВТ_Продажи_Врем
		|ГДЕ
		|	НЕ &БезНомеровТТН
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номер";
	
	ТзНомера = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	ТзНомера.Колонки.Добавить("НомерНаПечать", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	
	ОМ_ПрефиксацияОбъектовКлиентСервер = ОбщийМодуль("ПрефиксацияОбъектовКлиентСервер");
	
	Если Запрос.Параметры.БСП_СтаройВерсии Тогда
	
		Для каждого ТзНомераСтрока Из ТзНомера Цикл
		
			ТзНомераСтрока.НомерНаПечать = ОМ_ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ТзНомераСтрока.Номер, Истина, Истина);
		
		КонецЦикла;
		
	Иначе
		
		Для каждого ТзНомераСтрока Из ТзНомера Цикл
		
			ТзНомераСтрока.НомерНаПечать = ОМ_ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ТзНомераСтрока.Номер, Истина, Истина);
		
		КонецЦикла;
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТзНомера", ТзНомера);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТзНомера.Номер КАК Номер,
		|	ТзНомера.НомерНаПечать КАК НомерНаПечать
		|ПОМЕСТИТЬ ВТ_Номера
		|ИЗ
		|	&ТзНомера КАК ТзНомера
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номер
		|";
	
	Запрос.Выполнить();
	
	#КонецОбласти
	
	#Область ВТ_АдресаДоставки
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Продажи.АдресДоставки КАК АдресДоставки,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК spocode
		|ИЗ
		|	ВТ_Продажи_Врем КАК ВТ_Продажи
		|ГДЕ
		|	ВТ_Продажи.АдресДоставки <> """"";
	;
	
	АдресаДоставки = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Для каждого АдресаДоставкиСтрока Из АдресаДоставки Цикл
	
		Хэш = Новый ХешированиеДанных(ХешФункция.CRC32);
		Хэш.Добавить(ВРег(СокрЛП(АдресаДоставкиСтрока.АдресДоставки)));
		АдресаДоставкиСтрока.spocode = Формат(Хэш.ХешСумма, "ЧГ=0");
	
	КонецЦикла;
	
	Запрос.УстановитьПараметр("АдресаДоставки", АдресаДоставки);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	АдресаДоставки.АдресДоставки КАК АдресДоставки,
		|	АдресаДоставки.spocode КАК spocode
		|ПОМЕСТИТЬ ВТ_АдресаДоставки
		|ИЗ
		|	&АдресаДоставки КАК АдресаДоставки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АдресДоставки
		|";
	
	Запрос.Выполнить();
	
	#КонецОбласти

	#Область ВТ_КонтактнаяИнформация
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Продажи.Клиент.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Клиенты_И_ТорговыеТочки
		|ИЗ
		|	ВТ_Продажи_Врем КАК ВТ_Продажи
		|ГДЕ
		|	НЕ ВТ_Продажи.Клиент.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ_Продажи.ТорговаяТочка.Ссылка
		|ИЗ
		|	ВТ_Продажи_Врем КАК ВТ_Продажи
		|ГДЕ
		|	НЕ ВТ_Продажи.ТорговаяТочка.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	НЕ Склады.ЭтоГруппа
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 10000000
		|	КИ.Ссылка КАК Ссылка,
		|	КИ.Тип КАК Тип,
		|	КИ.Вид КАК Вид,
		|	КИ.ДействуетС КАК ДействуетС,
		|	ВЫРАЗИТЬ(КИ.Представление КАК СТРОКА(150)) КАК Представление,
		|	КИ.ЗначенияПолей КАК ЗначенияПолей,
		|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
		|ПОМЕСТИТЬ ВТ_КонтактнаяИнформация_Врем
		|ИЗ
		|	(ВЫБРАТЬ
		|		КИ_Контрагенты.Ссылка КАК Ссылка,
		|		КИ_Контрагенты.Тип КАК Тип,
		|		КИ_Контрагенты.Вид КАК Вид,
		|		&КИ_КонтрагентыДействуетС КАК ДействуетС,
		|		КИ_Контрагенты.Представление КАК Представление,
		|		КИ_Контрагенты.ЗначенияПолей КАК ЗначенияПолей
		|	ИЗ
		|		Справочник.Контрагенты.КонтактнаяИнформация КАК КИ_Контрагенты
		|	ГДЕ
		|		КИ_Контрагенты.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_Клиенты_И_ТорговыеТочки.Ссылка
		|				ИЗ
		|					ВТ_Клиенты_И_ТорговыеТочки КАК ВТ_Клиенты_И_ТорговыеТочки)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КИ_Организации.Ссылка,
		|		КИ_Организации.Тип,
		|		КИ_Организации.Вид,
		|		&КИ_ОрганизацииДействуетС,
		|		КИ_Организации.Представление,
		|		КИ_Организации.ЗначенияПолей
		|	ИЗ
		|		Справочник.Организации.КонтактнаяИнформация КАК КИ_Организации
		|	ГДЕ
		|		КИ_Организации.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_Клиенты_И_ТорговыеТочки.Ссылка
		|				ИЗ
		|					ВТ_Клиенты_И_ТорговыеТочки КАК ВТ_Клиенты_И_ТорговыеТочки)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КИ.Ссылка,
		|		КИ.Тип,
		|		КИ.Вид,
		|		ДАТАВРЕМЯ(1, 1, 1),
		|		КИ.Представление,
		|		КИ.ЗначенияПолей
		|	ИЗ
		|		Справочник.Партнеры.КонтактнаяИнформация КАК КИ
		|	ГДЕ
		|		КИ.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_Клиенты_И_ТорговыеТочки.Ссылка
		|				ИЗ
		|					ВТ_Клиенты_И_ТорговыеТочки КАК ВТ_Клиенты_И_ТорговыеТочки)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КИ.Ссылка,
		|		КИ.Тип,
		|		КИ.Вид,
		|		ДАТАВРЕМЯ(1, 1, 1),
		|		КИ.Представление,
		|		КИ.ЗначенияПолей
		|	ИЗ
		|		Справочник.Склады.КонтактнаяИнформация КАК КИ
		|	ГДЕ
		|		КИ.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_Клиенты_И_ТорговыеТочки.Ссылка
		|				ИЗ
		|					ВТ_Клиенты_И_ТорговыеТочки КАК ВТ_Клиенты_И_ТорговыеТочки)) КАК КИ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Тип,
		|	Вид,
		|	ДействуетС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КИ.Ссылка,
		|	КИ.Тип,
		|	КИ.Вид,
		|	НомерЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Клиенты_И_ТорговыеТочки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КИ.Ссылка КАК Ссылка,
		|	КИ.Тип КАК Тип,
		|	КИ.Вид КАК Вид,
		|	КИ.Представление КАК Представление,
		|	КИ.ЗначенияПолей КАК ЗначенияПолей,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК kladrcode,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК zip_code,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК fdistrict,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК city
		|ПОМЕСТИТЬ ВТ_КонтактнаяИнформация
		|ИЗ
		|	ВТ_КонтактнаяИнформация_Врем КАК КИ
		|ГДЕ
		|	(КИ.Ссылка, КИ.Тип, КИ.Вид, КИ.НомерЗаписи) В
		|			(ВЫБРАТЬ
		|				КИ_2.Ссылка,
		|				КИ_2.Тип,
		|				КИ_2.Вид,
		|				МАКСИМУМ(КИ_2.НомерЗаписи)
		|			ИЗ
		|				ВТ_КонтактнаяИнформация_Врем КАК КИ_2
		|			СГРУППИРОВАТЬ ПО
		|				КИ_2.Ссылка,
		|				КИ_2.Тип,
		|				КИ_2.Вид)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	Тип,
		|	Вид
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_КонтактнаяИнформация_Врем";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КИ_КонтрагентыДействуетС"
		, ?(Метаданные.Справочники.Контрагенты.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ДействуетС") <> Неопределено
			, "КИ_Контрагенты.ДействуетС"
			, "ДАТАВРЕМЯ(1, 1, 1)"
		)
	);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КИ_ОрганизацииДействуетС"
		, ?(Метаданные.Справочники.Организации.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ДействуетС") <> Неопределено
			, "КИ_Организации.ДействуетС"
			, "ДАТАВРЕМЯ(1, 1, 1)"
		)
	);
	
	Запрос.Выполнить(); // ВТ_КонтактнаяИнформация
	
	ВТ_КонтактнаяИнформация = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_КонтактнаяИнформация").ПолучитьДанные().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	ОМ_УправлениеКонтактнойИнформациейКлиентСервер	= ОбщийМодуль("УправлениеКонтактнойИнформациейКлиентСервер");
	ОМ_УправлениеКонтактнойИнформациейСлужебный		= ОбщийМодуль("УправлениеКонтактнойИнформациейСлужебный");
	ОМ_УправлениеКонтактнойИнформациейЛокализация	= ?(Метаданные.ОбщиеМодули.Найти("УправлениеКонтактнойИнформациейЛокализация") <> Неопределено
		, ОбщийМодуль("УправлениеКонтактнойИнформациейЛокализация")
		, ОМ_УправлениеКонтактнойИнформациейСлужебный
	);
	
	ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес;
	
	ЕстьИзменения = Ложь;
	
	КэшАдресов = Новый Соответствие;
	
	Для каждого КИ Из ВТ_КонтактнаяИнформация Цикл
		
		ЗначенияПолей = СокрЛП(КИ.ЗначенияПолей);
		
		Если Не ЗначениеЗаполнено(КИ.ЗначенияПолей) Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		ДанныеАдреса = КэшАдресов[ЗначенияПолей];
		
		Если ДанныеАдреса = Неопределено Тогда
			
			Попытка
				
				Если ОМ_УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(ЗначенияПолей) Тогда
				
					ДанныеАдреса = ОМ_УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(ЗначенияПолей, ТипКонтактнойИнформации);
					
				Иначе
					
					Если ОМ_УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей) Тогда
						
						РезультатыЧтения = Новый Структура;
						XDTOКонтактная = ОМ_УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияИзXML(ЗначенияПолей, ТипКонтактнойИнформации, РезультатыЧтения);
					
					Иначе
						
						XDTOКонтактная = ОМ_УправлениеКонтактнойИнформациейЛокализация.АдресXMLВXDTO(ЗначенияПолей, КИ.Представление, );
						
					КонецЕсли;
					
					ДанныеАдреса = ОМ_УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(XDTOКонтактная, ТипКонтактнойИнформации);
					
				КонецЕсли;
			
			Исключение
				
				ДанныеАдреса = Новый Структура;
				
			КонецПопытки;
			
			КэшАдресов.Вставить(ЗначенияПолей, ДанныеАдреса);
		
		КонецЕсли;
		
		ДанныеАдреса.Свойство("codeKLADR"		, КИ.kladrcode);
		ДанныеАдреса.Свойство("ZIPcode"			, КИ.zip_code);
		ДанныеАдреса.Свойство("cityDistrict"	, КИ.fdistrict);
		ДанныеАдреса.Свойство("city"			, КИ.city);
		
		Если	ЗначениеЗаполнено(КИ.kladrcode)
			или	ЗначениеЗаполнено(КИ.zip_code)
			или	ЗначениеЗаполнено(КИ.fdistrict)
			или	ЗначениеЗаполнено(КИ.city)
		Тогда
		
			ЕстьИзменения = Истина;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		
		Запрос.УстановитьПараметр("ВТ_КонтактнаяИнформация", ВТ_КонтактнаяИнформация);
		
		Запрос.Текст =
		"УНИЧТОЖИТЬ ВТ_КонтактнаяИнформация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КИ.Ссылка КАК Ссылка,
		|	КИ.Тип КАК Тип,
		|	КИ.Вид КАК Вид,
		|	КИ.Представление КАК Представление,
		|	КИ.kladrcode КАК kladrcode,
		|	КИ.zip_code КАК zip_code,
		|	КИ.fdistrict КАК fdistrict,
		|	КИ.city КАК city
		|ПОМЕСТИТЬ ВТ_КонтактнаяИнформация
		|ИЗ
		|	&ВТ_КонтактнаяИнформация КАК КИ";
		
		Запрос.Выполнить(); // ВТ_КонтактнаяИнформация
		Запрос.Параметры.Удалить("ВТ_КонтактнаяИнформация");
	
	КонецЕсли;
	
	ВТ_КонтактнаяИнформация = Неопределено;
	
	#КонецОбласти

	#Область ВТ_Клиенты_Врем
	
	ВсеСклады = Новый ТаблицаЗначений;
	ВсеСклады.Колонки.Добавить("Склад"		, Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ВсеСклады.Колонки.Добавить("spocode"	, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	
	ВыборкаСклады = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_Склады").ПолучитьДанные().Выбрать();
	
	#Область Производитель_Не_8052
	Если Запрос.Параметры.manfid <> 8052 Тогда
	
		Пока ВыборкаСклады.Следующий() Цикл
		
			ВсеСкладыСтрока = ВсеСклады.Добавить();
			ВсеСкладыСтрока.Склад	= ВыборкаСклады.Ссылка;
			ВсеСкладыСтрока.spocode	= ПредставлениеЗначения(ВыборкаСклады.Ссылка, Кэш, , Запрос.Параметры.ТаблицаТранслита);
		
		КонецЦикла;
		
	КонецЕсли;
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ВсеСклады", ВсеСклады);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВсеСклады.Склад КАК Склад,
		|	ВсеСклады.spocode КАК spocode
		|ПОМЕСТИТЬ ВТ_ВсеСклады
		|ИЗ
		|	&ВсеСклады КАК ВсеСклады
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Продажи.Регистратор КАК Регистратор,
		|	ВТ_Продажи.Клиент КАК Клиент,
		|	ВТ_Продажи.ТорговаяТочка КАК ТорговаяТочка,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ВТ_Продажи.Контрагент КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ВТ_Продажи.Контрагент КАК Справочник.Контрагенты).ЮридическоеФизическоеЛицо В (ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо))
		|				И НЕ ВЫРАЗИТЬ(ВТ_Продажи.Контрагент КАК Справочник.Контрагенты).ЮрФизЛицо В (ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоФизическоеЛицо,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ВТ_Продажи.Партнер КАК Справочник.Партнеры), ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) КАК Партнер,
		|	ВЫБОР
		|		КОГДА &ОбезличиватьФизическихЛиц
		|				И ВЫРАЗИТЬ(ВТ_Продажи.Контрагент КАК Справочник.Контрагенты).ЮридическоеФизическоеЛицо В (ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо))
		|				И НЕ ВЫРАЗИТЬ(ВТ_Продажи.Контрагент КАК Справочник.Контрагенты).ЮрФизЛицо В (ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель))
		|			ТОГДА ""ФизическоеЛицо""
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_Продажи.Клиент) = ТИП(СТРОКА)
		|			ТОГДА ВТ_Продажи.Клиент
		|		КОГДА ВТ_Продажи.Клиент ССЫЛКА Справочник.Партнеры
		|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ВТ_Продажи.Клиент КАК Справочник.Партнеры).Код, ""КЛИЕНТ_НЕОПРЕДЕЛЕН"")
		|		КОГДА ВТ_Продажи.Клиент ССЫЛКА Справочник.Контрагенты
		|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ВТ_Продажи.Клиент КАК Справочник.Контрагенты).Ссылка, ""КЛИЕНТ_НЕОПРЕДЕЛЕН"")
		|		КОГДА ВТ_Продажи.Клиент ССЫЛКА Справочник.Организации
		|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ВТ_Продажи.Клиент КАК Справочник.Организации).Ссылка, ""КЛИЕНТ_НЕОПРЕДЕЛЕН"")
		|		ИНАЧЕ ""КЛИЕНТ_НЕОПРЕДЕЛЕН""
		|	КОНЕЦ КАК clientcode,
		|	ВЫБОР
		|		КОГДА &manfid = 2210
		|				И ВЫРАЗИТЬ(ВТ_Продажи.Контрагент КАК Справочник.Контрагенты).ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
		|				И НЕ ВТ_Продажи.Клиент.Наименование ПОДОБНО ""%ИП%""
		|			ТОГДА ВТ_Продажи.Клиент.Наименование + "" ИП""
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_Продажи.Клиент) = ТИП(СТРОКА)
		|			ТОГДА ВТ_Продажи.Клиент
		|		ИНАЧЕ ВТ_Продажи.Клиент.Наименование
		|	КОНЕЦ КАК clientname,
		|	ЕСТЬNULL(КлиентАдресЮридический.Представление, """") КАК address_ur,
		|	ЕСТЬNULL(КлиентАдресФактический.Представление, """") КАК address,
		|	ВЫБОР
		|		КОГДА НЕ ВТ_АдресаДоставки.spocode ЕСТЬ NULL
		|			ТОГДА ВТ_АдресаДоставки.spocode
		|		КОГДА ВТ_Продажи.ТорговаяТочка ССЫЛКА Справочник.Склады
		|			ТОГДА ЕСТЬNULL(ВТ_ВсеСклады.spocode, """")
		|		КОГДА ВТ_Продажи.ТорговаяТочка ССЫЛКА Справочник.Контрагенты
		|			ТОГДА ЕСТЬNULL(ВТ_Продажи.ТорговаяТочка.Ссылка, """")
		|		КОГДА ВТ_Продажи.ТорговаяТочка ССЫЛКА Справочник.Партнеры
		|			ТОГДА ЕСТЬNULL(ВТ_Продажи.ТорговаяТочка.Код, """")
		|		КОГДА ВТ_Продажи.ТорговаяТочка ССЫЛКА Справочник.ДоговорыКонтрагентов
		|			ТОГДА ЕСТЬNULL(ВТ_Продажи.ТорговаяТочка.Ссылка, """")
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК spocode,
		|	ЕСТЬNULL(ВТ_Продажи.ТорговаяТочка.Наименование, """") КАК sponame,
		|	ЕСТЬNULL(ВТ_АдресаДоставки.АдресДоставки, ЕСТЬNULL(ТорговаяТочкаАдрес.Представление, """")) КАК spoaddress,
		|	ЕСТЬNULL(ВТ_КаналыРынка.mccode, """") КАК mccode,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ВТ_КаналыРынка.mcname КАК СТРОКА(100)), """") КАК mcname,
		|	ВЫБОР
		|		КОГДА &ТорговыйПредставитель = ""МенеджерВПартнере""
		|			ТОГДА ЕСТЬNULL(ВТ_Продажи.ТорговыйПредставитель.Ссылка, """")
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК tpcode
		|ПОМЕСТИТЬ ВТ_Клиенты_Врем_2
		|ИЗ
		|	ВТ_Продажи_Врем КАК ВТ_Продажи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АдресаДоставки КАК ВТ_АдресаДоставки
		|		ПО (ВТ_АдресаДоставки.АдресДоставки = ВТ_Продажи.АдресДоставки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВсеСклады КАК ВТ_ВсеСклады
		|		ПО (ВТ_ВсеСклады.Склад = ВТ_Продажи.ТорговаяТочка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтактнаяИнформация КАК КлиентАдресЮридический
		|		ПО (КлиентАдресЮридический.Ссылка = ВТ_Продажи.Клиент)
		|			И (КлиентАдресЮридический.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|			И (КлиентАдресЮридический.Вид В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресПартнера), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтактнаяИнформация КАК КлиентАдресФактический
		|		ПО (КлиентАдресФактический.Ссылка = ВТ_Продажи.Клиент)
		|			И (КлиентАдресФактический.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|			И (КлиентАдресФактический.Вид В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресПартнера), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента)))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтактнаяИнформация КАК ТорговаяТочкаАдрес
		|		ПО (ТорговаяТочкаАдрес.Ссылка = ВТ_Продажи.ТорговаяТочка)
		|			И (ТорговаяТочкаАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|			И (ВЫБОР
		|				КОГДА ВТ_Продажи.ТорговаяТочка ССЫЛКА Справочник.Контрагенты
		|							И ТорговаяТочкаАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента)
		|						ИЛИ ВТ_Продажи.ТорговаяТочка ССЫЛКА Справочник.Партнеры
		|							И ТорговаяТочкаАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресПартнера)
		|						ИЛИ ВТ_Продажи.ТорговаяТочка ССЫЛКА Справочник.Склады
		|							И ТорговаяТочкаАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада)
		|						ИЛИ ВТ_Продажи.ТорговаяТочка ССЫЛКА Справочник.Организации
		|							И ТорговаяТочкаАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КаналыРынка КАК ВТ_КаналыРынка
		|		ПО (ВТ_КаналыРынка.КаналРынка = ВТ_Продажи.КаналРынка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ВсеСклады
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_АдресаДоставки";
	
	Запрос.Выполнить();
	
	Если Запрос.Параметры.ОтладкаОтображатьНаФормеВнутренниеКоды Тогда
		
		ВТ_ЗаменитьЗначенияНаКоды(Запрос, "ВТ_Клиенты_Врем_2", "clientcode");
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100000000
		|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
		|	ВТ_Клиенты_Врем.Регистратор КАК Регистратор,
		|	ВТ_Клиенты_Врем.Клиент КАК Клиент,
		|	ВТ_Клиенты_Врем.ТорговаяТочка КАК ТорговаяТочка,
		|	ВТ_Клиенты_Врем.Контрагент КАК Контрагент,
		|	ВТ_Клиенты_Врем.Партнер КАК Партнер,
		|	ВТ_Клиенты_Врем.clientcode КАК clientcode,
		|	ВЫБОР
		|		КОГДА &ОбезличиватьФизическихЛиц
		|				И ВТ_Клиенты_Врем.ЭтоФизическоеЛицо
		|			ТОГДА &НаименованиеОбезличенногоФизлица
		|		КОГДА &КлиентыБезПерсональныхДанных
		|			ТОГДА ВТ_Клиенты_Врем.clientcode
		|		ИНАЧЕ ЕСТЬNULL(ВТ_Клиенты_Врем.clientname, ""КЛИЕНТ_НЕОПРЕДЕЛЕН"")
		|	КОНЕЦ КАК clientname,
		|	ВЫБОР
		|		КОГДА &ОбезличиватьФизическихЛиц
		|				И ВТ_Клиенты_Врем.ЭтоФизическоеЛицо
		|			ТОГДА """"
		|		КОГДА &КлиентыБезПерсональныхДанных
		|			ТОГДА ВТ_Клиенты_Врем.clientcode
		|		ИНАЧЕ ЕСТЬNULL(ВТ_Клиенты_Врем.address_ur, """")
		|	КОНЕЦ КАК address_ur,
		|	ВЫБОР
		|		КОГДА &ОбезличиватьФизическихЛиц
		|				И ВТ_Клиенты_Врем.ЭтоФизическоеЛицо
		|			ТОГДА """"
		|		КОГДА &КлиентыБезПерсональныхДанных
		|			ТОГДА ВТ_Клиенты_Врем.clientcode
		|		ИНАЧЕ ЕСТЬNULL(ВТ_Клиенты_Врем.address, """")
		|	КОНЕЦ КАК address,
		|	ВЫБОР
		|		КОГДА &ОбезличиватьФизическихЛиц
		|				И ВТ_Клиенты_Врем.ЭтоФизическоеЛицо
		|			ТОГДА """"
		|		ИНАЧЕ ВТ_Клиенты_Врем.spocode
		|	КОНЕЦ КАК spocode,
		|	ВЫБОР
		|		КОГДА &ОбезличиватьФизическихЛиц
		|				И ВТ_Клиенты_Врем.ЭтоФизическоеЛицо
		|			ТОГДА """"
		|		КОГДА &КлиентыБезПерсональныхДанных
		|			ТОГДА ВТ_Клиенты_Врем.spocode
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВТ_Клиенты_Врем.spocode = """"
		|					ТОГДА """"
		|				ИНАЧЕ ЕСТЬNULL(ВТ_Клиенты_Врем.sponame, ЕСТЬNULL(ВТ_Клиенты_Врем.spoaddress, """"))
		|			КОНЕЦ
		|	КОНЕЦ КАК sponame,
		|	ВЫБОР
		|		КОГДА &ОбезличиватьФизическихЛиц
		|				И ВТ_Клиенты_Врем.ЭтоФизическоеЛицо
		|			ТОГДА """"
		|		КОГДА &КлиентыБезПерсональныхДанных
		|			ТОГДА ВТ_Клиенты_Врем.spocode
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВТ_Клиенты_Врем.spocode = """"
		|					ТОГДА """"
		|				ИНАЧЕ ЕСТЬNULL(ВТ_Клиенты_Врем.spoaddress, """")
		|			КОНЕЦ
		|	КОНЕЦ КАК spoaddress,
		|	ВЫБОР
		|		КОГДА &ОбезличиватьФизическихЛиц
		|					И ВТ_Клиенты_Врем.ЭтоФизическоеЛицо
		|				ИЛИ &КлиентыБезПерсональныхДанных
		|			ТОГДА """"
		|		ИНАЧЕ ЕСТЬNULL(ВЫБОР
		|					КОГДА ВТ_Клиенты_Врем.Клиент ССЫЛКА Справочник.Организации
		|						ТОГДА ВЫРАЗИТЬ(ВТ_Клиенты_Врем.Клиент КАК Справочник.Организации).ИНН
		|					ИНАЧЕ ВТ_Клиенты_Врем.Контрагент.ИНН
		|				КОНЕЦ, """")
		|	КОНЕЦ КАК inn,
		|	ВЫБОР
		|		КОГДА &ОбезличиватьФизическихЛиц
		|					И ВТ_Клиенты_Врем.ЭтоФизическоеЛицо
		|				ИЛИ &КлиентыБезПерсональныхДанных
		|			ТОГДА """"
		|		ИНАЧЕ ЕСТЬNULL(ВЫБОР
		|					КОГДА ВТ_Клиенты_Врем.Клиент ССЫЛКА Справочник.Организации
		|						ТОГДА ВЫРАЗИТЬ(ВТ_Клиенты_Врем.Клиент КАК Справочник.Организации).КПП
		|					ИНАЧЕ ВТ_Клиенты_Врем.Контрагент.КПП
		|				КОНЕЦ, """")
		|	КОНЕЦ КАК kpp,
		|	ВТ_Клиенты_Врем.mccode КАК mccode,
		|	ВТ_Клиенты_Врем.mcname КАК mcname,
		|	"""" КАК kladrcode,
		|	"""" КАК zip_code,
		|	"""" КАК fdistrict,
		|	"""" КАК city,
		|	0 КАК notdeliver,
		|	"""" КАК manfclient,
		//|	&ТорговыйПредставительПоУмолчанию КАК tpcode,
		|	ВТ_Клиенты_Врем.tpcode КАК tpcode,
		|	0 КАК percentexp,
		|	"""" КАК cx,
		|	"""" КАК cy,
		|	0 КАК creditdays,
		|	0 КАК creditlim,
		|	0 КАК credit,
		|	0 КАК cr_overdue,
		|	"""" КАК license_no,
		|	"""" КАК licenseexp,
		|	"""" КАК phone_no,
		|	"""" КАК street,
		|	"""" КАК building
		|ПОМЕСТИТЬ ВТ_Клиенты_Врем
		|ИЗ
		|	ВТ_Клиенты_Врем_2 КАК ВТ_Клиенты_Врем
		|
		|УПОРЯДОЧИТЬ ПО
		|	clientcode,
		|	spocode,
		|	clientname,
		|	address_ur,
		|	address,
		|	sponame,
		|	spoaddress
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВТ_Клиенты_Врем.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Клиенты_Врем_2";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КлиентыБезПерсональныхДанных"
		,	"(&КлиентыБезПерсональныхДанных"
			+ ?(Запрос.Параметры.КлиентыБезПерсональныхДанныхМассив = Неопределено, ")"
			, " И (		ВТ_Клиенты_Врем.Контрагент	В (&КлиентыБезПерсональныхДанныхМассив)
				|	ИЛИ ВТ_Клиенты_Врем.Партнер	В (&КлиентыБезПерсональныхДанныхМассив)
				|))"
	));
	
	Запрос.Выполнить(); // ВТ_Клиенты_Врем
	
	#КонецОбласти
	
	#Область ВТ_Клиенты
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТ_Клиенты_Врем.НомерЗаписи КАК НомерЗаписи,
		|	ВТ_Клиенты_Врем.Регистратор КАК Регистратор,
		|	ВТ_Клиенты_Врем.Клиент КАК Клиент,
		|	ВТ_Клиенты_Врем.ТорговаяТочка КАК ТорговаяТочка,
		|	ВТ_Клиенты_Врем.Контрагент КАК Контрагент,
		|	ВТ_Клиенты_Врем.Партнер КАК Партнер,
		|	ВТ_Клиенты_Врем.clientcode КАК clientcode,
		|	ВТ_Клиенты_Врем.mccode КАК mccode,
		|	ВТ_Клиенты_Врем.mcname КАК mcname,
		|	ВТ_Клиенты_Врем.clientname КАК clientname,
		|	ВТ_Клиенты_Врем.address_ur КАК address_ur,
		|	ВТ_Клиенты_Врем.address КАК address,
		|	ВТ_Клиенты_Врем.spocode КАК spocode,
		|	ВТ_Клиенты_Врем.sponame КАК sponame,
		|	ВТ_Клиенты_Врем.spoaddress КАК spoaddress,
		|	ВТ_Клиенты_Врем.inn КАК inn,
		|	ВТ_Клиенты_Врем.kpp КАК kpp,
		|	ВТ_Клиенты_Врем.kladrcode КАК kladrcode,
		|	ВТ_Клиенты_Врем.zip_code КАК zip_code,
		|	ВТ_Клиенты_Врем.fdistrict КАК fdistrict,
		|	ВТ_Клиенты_Врем.city КАК city,
		|	ВТ_Клиенты_Врем.notdeliver КАК notdeliver,
		|	ВТ_Клиенты_Врем.manfclient КАК manfclient,
		|	ВТ_Клиенты_Врем.tpcode КАК tpcode,
		|	ВТ_Клиенты_Врем.percentexp КАК percentexp,
		|	ВТ_Клиенты_Врем.cx КАК cx,
		|	ВТ_Клиенты_Врем.cy КАК cy,
		|	ВТ_Клиенты_Врем.creditdays КАК creditdays,
		|	ВТ_Клиенты_Врем.creditlim КАК creditlim,
		|	ВТ_Клиенты_Врем.credit КАК credit,
		|	ВТ_Клиенты_Врем.cr_overdue КАК cr_overdue,
		|	ВТ_Клиенты_Врем.license_no КАК license_no,
		|	ВТ_Клиенты_Врем.licenseexp КАК licenseexp,
		|	ВТ_Клиенты_Врем.phone_no КАК phone_no,
		|	ВТ_Клиенты_Врем.street КАК street,
		|	ВТ_Клиенты_Врем.building КАК building
		|ПОМЕСТИТЬ ВТ_Клиенты
		|ИЗ
		|	ВТ_Клиенты_Врем КАК ВТ_Клиенты_Врем
		|ГДЕ
		|	(ВТ_Клиенты_Врем.clientcode, ВТ_Клиенты_Врем.spocode, ВТ_Клиенты_Врем.НомерЗаписи) В
		|			(ВЫБРАТЬ
		|				ВТ_Клиенты_Уникальные.clientcode,
		|				ВТ_Клиенты_Уникальные.spocode,
		|				МАКСИМУМ(ВТ_Клиенты_Уникальные.НомерЗаписи)
		|			ИЗ
		|				ВТ_Клиенты_Врем КАК ВТ_Клиенты_Уникальные
		|			СГРУППИРОВАТЬ ПО
		|				ВТ_Клиенты_Уникальные.clientcode,
		|				ВТ_Клиенты_Уникальные.spocode)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Клиенты_Врем";
	
	Запрос.Выполнить(); // ВТ_Клиенты
	
	#КонецОбласти
		
	#Область ВТ_ТорговыеПредставители
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ВТ_Продажи.ТорговыйПредставитель.Ссылка, &ТорговыйПредставительПоУмолчанию) КАК tpcode,
		|	ЕСТЬNULL(ВТ_Продажи.ТорговыйПредставитель.Наименование, &ТорговыйПредставительПоУмолчанию) КАК tpname,
		|	2 КАК tptypeid,
		|	"""" КАК tpparent
		|ПОМЕСТИТЬ ВТ_ТорговыеПредставители
		|ИЗ
		|	ВТ_Продажи_Врем КАК ВТ_Продажи
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	&ТорговыйПредставительПоУмолчанию,
		|	&ТорговыйПредставительПоУмолчанию,
		|	2,
		|	""""";

	Запрос.Выполнить();
	
	#КонецОбласти
	
	#Область ВТ_Скидки
	СообщитьПрогресс(Запрос.Параметры, "ВТ_Скидки");
	
	УправляемыеСкидки = Новый СписокЗначений;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ТзСкидки = Новый ТаблицаЗначений;
	ТзСкидки.Колонки.Добавить("Регистратор"		, Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));
	ТзСкидки.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТзСкидки.Колонки.Добавить("Характеристика"	, Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТзСкидки.Колонки.Добавить("СкидкаНаценка"	, Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
	
	СкидкиОтбор = Запрос.Параметры.Скидки;
	
	ОбщийМодульСкидкиНаценкиСервер = ОбщийМодуль("СкидкиНаценкиСервер");
		
	Для каждого Реализация Из РеализацииСоСкидками Цикл
		
		ДокументОбъект = Реализация.ПолучитьОбъект();
		
		СтруктураПараметры.Вставить("РеализацияСверхЗаказа", ДокументОбъект.РеализацияПоЗаказам);
		
		ПримененныеСкидки = ОбщийМодульСкидкиНаценкиСервер.Рассчитать(ДокументОбъект, СтруктураПараметры);
		
		Для каждого ТаблицаСкидкиНаценкиСтрока Из ПримененныеСкидки.ТаблицаСкидкиНаценки Цикл
			
			Если ТаблицаСкидкиНаценкиСтрока.Сумма <= 0 Тогда
			
				Продолжить;
			
			КонецЕсли;
		
			СкидкаНаценка = ТаблицаСкидкиНаценкиСтрока.СкидкаНаценка;
			
			Если СкидкиОтбор.Найти(СкидкаНаценка) = Неопределено Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			ДокументОбъектТоварыСтрока = ДокументОбъект.Товары.Найти(ТаблицаСкидкиНаценкиСтрока.КлючСвязи, "КлючСвязи");
			
			Если ДокументОбъектТоварыСтрока = Неопределено Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			КлючПоиска = Новый Структура("Регистратор, Номенклатура, Характеристика", Реализация, ДокументОбъектТоварыСтрока.Номенклатура, ДокументОбъектТоварыСтрока.Характеристика);
			
			Если ТзСкидки.НайтиСтроки(КлючПоиска).Количество() Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			СкидкиСтрока = ТзСкидки.Добавить();
			
			СкидкиСтрока.Регистратор		= Реализация;
			СкидкиСтрока.Номенклатура		= ДокументОбъектТоварыСтрока.Номенклатура;
			СкидкиСтрока.Характеристика		= ДокументОбъектТоварыСтрока.Характеристика;
			СкидкиСтрока.СкидкаНаценка		= СкидкаНаценка;
		
		КонецЦикла;
	
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТзСкидки", ТзСкидки);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТзСкидки.Регистратор КАК Регистратор,
		|	ТзСкидки.Номенклатура КАК Номенклатура,
		|	ТзСкидки.Характеристика КАК Характеристика,
		|	ВЫРАЗИТЬ(ТзСкидки.СкидкаНаценка КАК Справочник.СкидкиНаценки) КАК СкидкаНаценка
		|ПОМЕСТИТЬ ВТ_ТзСкидки
		|ИЗ
		|	&ТзСкидки КАК ТзСкидки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДействиеСкидокНаценок.СкидкаНаценка КАК СкидкаНаценка,
		|	ДействиеСкидокНаценок.СкидкаНаценка КАК promo_code,
		|	ДействиеСкидокНаценок.СкидкаНаценка.Наименование КАК promo_name,
		|	ВЫБОР
		|		КОГДА ДействиеСкидокНаценок.СкидкаНаценка.СпособПредоставления В (ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Процент))
		|			ТОГДА ДействиеСкидокНаценок.СкидкаНаценка.ЗначениеСкидкиНаценки
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК promo_perc,
		|	ВЫБОР
		|		КОГДА ДействиеСкидокНаценок.СкидкаНаценка.СпособПредоставления В (ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Процент))
		|			ТОГДА ДействиеСкидокНаценок.СкидкаНаценка.ЗначениеСкидкиНаценки
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК discount_p,
		|	ВЫБОР
		|		КОГДА ДействиеСкидокНаценок.СкидкаНаценка.СпособПредоставления В (ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.СуммаДляКаждойСтроки))
		|			ТОГДА -ДействиеСкидокНаценок.СкидкаНаценка.ЗначениеСкидкиНаценки
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК discount,
		|	"""" КАК promo_manf,
		|	МАКСИМУМ(ЕСТЬNULL(ДействиеСкидокНаценок.Источник.ДатаОкончанияДействия, ДАТАВРЕМЯ(1, 1, 1))) КАК promo_date
		|ПОМЕСТИТЬ ВТ_Скидки_СрокиДействия
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
		|			&ДатаКон,
		|			СкидкаНаценка В (&Скидки)
		|				И СкидкаНаценка.СпособПредоставления В (ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Процент))
		|				И СкидкаНаценка.ЗначениеСкидкиНаценки > 0) КАК ДействиеСкидокНаценок
		|
		|СГРУППИРОВАТЬ ПО
		|	ДействиеСкидокНаценок.СкидкаНаценка,
		|	ДействиеСкидокНаценок.СкидкаНаценка.Наименование,
		|	ВЫБОР
		|		КОГДА ДействиеСкидокНаценок.СкидкаНаценка.СпособПредоставления В (ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Процент))
		|			ТОГДА ДействиеСкидокНаценок.СкидкаНаценка.ЗначениеСкидкиНаценки
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ДействиеСкидокНаценок.СкидкаНаценка.СпособПредоставления В (ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.СуммаДляКаждойСтроки))
		|			ТОГДА -ДействиеСкидокНаценок.СкидкаНаценка.ЗначениеСкидкиНаценки
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ДействиеСкидокНаценок.СкидкаНаценка,
		|	ВЫБОР
		|		КОГДА ДействиеСкидокНаценок.СкидкаНаценка.СпособПредоставления В (ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Процент))
		|			ТОГДА ДействиеСкидокНаценок.СкидкаНаценка.ЗначениеСкидкиНаценки
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	promo_date
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТзСкидки.Регистратор КАК Регистратор,
		|	ВТ_ТзСкидки.Номенклатура КАК Номенклатура,
		|	ВТ_ТзСкидки.Характеристика КАК Характеристика,
		|	ВТ_Скидки_СрокиДействия.promo_code КАК promo_code,
		|	ВТ_Скидки_СрокиДействия.promo_manf КАК promo_manf,
		|	ВТ_Скидки_СрокиДействия.promo_name КАК promo_name,
		|	ВТ_Скидки_СрокиДействия.promo_date КАК promo_date,
		|	ВТ_Скидки_СрокиДействия.promo_perc КАК promo_perc,
		|	ВТ_Скидки_СрокиДействия.discount_p КАК discount_p,
		|	ВТ_Скидки_СрокиДействия.discount КАК discount
		|ПОМЕСТИТЬ ВТ_Скидки
		|ИЗ
		|	ВТ_Скидки_СрокиДействия КАК ВТ_Скидки_СрокиДействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТзСкидки КАК ВТ_ТзСкидки
		|		ПО (ВТ_ТзСкидки.СкидкаНаценка = ВТ_Скидки_СрокиДействия.СкидкаНаценка)
		|ГДЕ
		|	ВТ_Скидки_СрокиДействия.promo_date > ДАТАВРЕМЯ(1, 1, 1)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТзСкидки";
	
		Запрос.Выполнить();
		
	#КонецОбласти

	#Область ВТ_Продажи
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Продажи.Номенклатура КАК Номенклатура,
		|	ВТ_Продажи.Характеристика КАК Характеристика,
		|	ВТ_Продажи.Серия КАК Серия
		|ПОМЕСТИТЬ ВТ_НоменклатураХарактеристикаСерия_Врем
		|ИЗ
		|	ВТ_Продажи_Врем КАК ВТ_Продажи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Продажи.БесплатныйТовар КАК БесплатныйТовар,
		|	ВТ_Продажи.Регистратор КАК Регистратор,
		|	ВТ_Продажи.Партнер КАК Партнер,
		|	ВТ_Продажи.Контрагент КАК Контрагент,
		|	ВТ_Продажи.Договор КАК Договор,
		|	ЕСТЬNULL(ВТ_ФилиалыПодразделения.whcode, ЕСТЬNULL(ВТ_ФилиалыСклады.whcode, ВТ_Организации.whcode)) КАК whcode,
		|	(ВЫРАЗИТЬ(ВТ_Номенклатура.code КАК СТРОКА(20))) + ЕСТЬNULL(""_"" + ВТ_Характеристики.Код, """") КАК code,
		|	ЕСТЬNULL(ВТ_Продажи.Серия.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)) КАК exp_date,
		|	ЕСТЬNULL(ВТ_ЗакупочныеЦены.parcel_no, """") КАК parcel_no,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(ВТ_ЗакупочныеЦены.parcel_no, """") <> """"
		|				ТОГДА ЕСТЬNULL(ВТ_ЗакупочныеЦены.ЦенаСНДС, 0)
		|		КОНЕЦ КАК ЧИСЛО(18, 2)) КАК price,
		|	ВТ_Продажи.Серия.Наименование КАК serial_no,
		|	ВТ_Продажи.doc_date КАК doc_date,
		|	ВТ_Продажи.doc_number КАК doc_number,
		|	ВТ_Продажи.doc_parent КАК doc_parent,
		|	ВТ_Продажи.oper_type КАК oper_type,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_Продажи.deliv_date, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ВТ_Продажи.deliv_date
		|		ИНАЧЕ ВТ_Продажи.doc_date
		|	КОНЕЦ КАК deliv_date,
		|	ВТ_Продажи.order_stat КАК order_stat,
		|	ВТ_Продажи.quantity * ВТ_Номенклатура.Коэффициент КАК quantity,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА &ПродажиПоЗакупочнымЦенам
		|					И ВТ_Продажи.oper_type В (0, 1)
		|				ТОГДА ВТ_Продажи.quantity * ЕСТЬNULL(ВТ_ЗакупочныеЦены.ЦенаБезНДС * (1 + 0.01 * ВТ_Продажи.СтавкаНДС), 0)
		|			ИНАЧЕ ВТ_Продажи.amount
		|		КОНЕЦ КАК ЧИСЛО(18, 2)) КАК amount,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА &ПродажиПоЗакупочнымЦенам
		|					И ВТ_Продажи.oper_type В (0, 1)
		|				ТОГДА 0
		|			КОГДА ВТ_Продажи.discount > 0
		|				ТОГДА ВТ_Продажи.discount
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(18, 2)) КАК discount,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА &ПродажиПоЗакупочнымЦенам
		|					И ВТ_Продажи.oper_type В (0, 1)
		|				ТОГДА 0
		|			ИНАЧЕ ЕСТЬNULL(ВТ_Скидки.discount_p, 0)
		|		КОНЕЦ КАК ЧИСЛО(18, 2)) КАК discount_p,
		|	ЕСТЬNULL(ВТ_Скидки.promo_code, """") КАК promo_code,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА &ПродажиПоЗакупочнымЦенам
		|					И ВТ_Продажи.oper_type В (0, 1)
		|				ТОГДА ВТ_Продажи.quantity * ЕСТЬNULL(ВТ_ЗакупочныеЦены.ЦенаБезНДС * 0.01 * ВТ_Продажи.СтавкаНДС, 0)
		|			ИНАЧЕ ВТ_Продажи.vat
		|		КОНЕЦ КАК ЧИСЛО(18, 2)) КАК vat,
		|	ЕСТЬNULL(ВТ_Номера_doc_ttn.НомерНаПечать, """") КАК doc_ttn,
		|	ЕСТЬNULL(ВТ_Номера_doc_inv.НомерНаПечать, """") КАК doc_inv,
		|	ВТ_Клиенты.clientcode КАК clientcode,
		|	ВТ_Клиенты.spocode КАК spocode,
		|	ЕСТЬNULL(ВТ_Продажи.ТорговыйПредставитель.Ссылка, &ТорговыйПредставительПоУмолчанию) КАК tpcode,
		|	ВТ_Номенклатура.ru КАК ru,
		|	ВТ_Номенклатура.weight КАК weight,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ВТ_Продажи.oper_type В (2)
		|				ТОГДА ВТ_Продажи.amount
		|			ИНАЧЕ ВТ_Продажи.quantity * ЕСТЬNULL(ВТ_ЗакупочныеЦены.ЦенаБезНДС * (1 + 0.01 * ВТ_Продажи.СтавкаНДС), 0)
		|		КОНЕЦ КАК ЧИСЛО(18, 2)) КАК amount_bp,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА &ПродажиПоЗакупочнымЦенам
		|					И ВТ_Продажи.oper_type В (0, 1)
		|				ТОГДА ВТ_Продажи.quantity * ЕСТЬNULL(ВТ_ЗакупочныеЦены.ЦенаБезНДС * (1 + 0.01 * ВТ_Продажи.СтавкаНДС), 0)
		|			КОГДА НЕ ВТ_Продажи.oper_type В (2)
		|				ТОГДА ВТ_Продажи.amount
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(18, 2)) КАК amount_cp,
		|	"""" КАК scd_number,
		|	"""" КАК is_date,
		|	"""" КАК order_date,
		|	0 КАК deliv_type,
		|	0 КАК bonus,
		|	0 КАК manf_price,
		|	"""" КАК opcode,
		|	"""" КАК gw_code,
		|	"""" КАК tenderno,
		|	"""" КАК location,
		|	"""" КАК nd_reason
		|ПОМЕСТИТЬ ВТ_Продажи
		|ИЗ
		|	ВТ_Продажи_Врем КАК ВТ_Продажи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактуры КАК ВТ_СчетаФактуры
		|		ПО (ВТ_СчетаФактуры.Регистратор = ВТ_Продажи.Регистратор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Номера КАК ВТ_Номера_doc_inv
		|		ПО (ВТ_Номера_doc_inv.Номер = ВТ_СчетаФактуры.doc_inv)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Номера КАК ВТ_Номера_doc_ttn
		|		ПО (ВТ_Номера_doc_ttn.Номер = ВТ_Продажи.doc_ttn)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
		|		ПО (ВТ_Номенклатура.Ссылка = ВТ_Продажи.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Характеристики КАК ВТ_Характеристики
		|		ПО (ВТ_Характеристики.Ссылка = ВТ_Продажи.Характеристика)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗакупочныеЦены КАК ВТ_ЗакупочныеЦены
		|		ПО (ВТ_ЗакупочныеЦены.Номенклатура = ВТ_Продажи.Номенклатура)
		|			И (ВТ_ЗакупочныеЦены.Характеристика = ВТ_Продажи.Характеристика)
		|			И (ВТ_ЗакупочныеЦены.Серия = ВТ_Продажи.Серия)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Клиенты КАК ВТ_Клиенты
		|		ПО (ВТ_Клиенты.Регистратор = ВТ_Продажи.Регистратор)
		|			И (ВТ_Клиенты.Клиент = ВТ_Продажи.Клиент)
		|			И (ВТ_Клиенты.ТорговаяТочка = ВТ_Продажи.ТорговаяТочка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Организации КАК ВТ_Организации
		|		ПО (ВТ_Организации.Ссылка = ВТ_Продажи.Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФилиалыСклады КАК ВТ_ФилиалыСклады
		|		ПО (ВТ_ФилиалыСклады.Ссылка = ВТ_Продажи.Склад)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФилиалыПодразделения КАК ВТ_ФилиалыПодразделения
		|		ПО (ВТ_ФилиалыПодразделения.Ссылка = ВТ_Продажи.Склад.Подразделение)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Скидки КАК ВТ_Скидки
		|		ПО (ВТ_Скидки.Регистратор = ВТ_Продажи.Регистратор)
		|			И (ВТ_Скидки.Номенклатура = ВТ_Продажи.Номенклатура)
		|			И (ВТ_Скидки.Характеристика = ВТ_Продажи.Характеристика)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Номера
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СчетаФактуры
		|;
		|
		//|////////////////////////////////////////////////////////////////////////////////
		//|УНИЧТОЖИТЬ ВТ_Клиенты_Врем
		//|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Продажи_Врем"; 
	
	Запрос.Выполнить(); // ВТ_Продажи
	
	#КонецОбласти
	
	#Область ВТ_КредитныеЛимиты
	
	Запрос.Текст =
		"
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Взаиморасчеты.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
		|	Взаиморасчеты.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
		|	МАКСИМУМ(РАЗНОСТЬДАТ(Взаиморасчеты.РасчетныйДокумент.Дата, &ДатаКон, ДЕНЬ)) КАК creditdays,
		|	СУММА(Взаиморасчеты.ДолгОстаток) КАК creditlim
		|ПОМЕСТИТЬ ВТ_КредитныеЛимиты_Врем
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(
		|			&ДатаКон,
		|			(АналитикаУчетаПоПартнерам.Партнер, АналитикаУчетаПоПартнерам.Контрагент) В
		|				(ВЫБРАТЬ
		|					ВТ_Клиенты.Партнер,
		|					ВТ_Клиенты.Контрагент
		|				ИЗ
		|					ВТ_Клиенты КАК ВТ_Клиенты)) КАК Взаиморасчеты
		|
		|СГРУППИРОВАТЬ ПО
		|	Взаиморасчеты.АналитикаУчетаПоПартнерам.Партнер,
		|	Взаиморасчеты.АналитикаУчетаПоПартнерам.Контрагент
		|
		|ИМЕЮЩИЕ
		|	СУММА(Взаиморасчеты.ДолгОстаток) > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Партнер,
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Клиенты.clientcode КАК clientcode,
		|	ВТ_Клиенты.spocode КАК spocode,
		|	Взаиморасчеты.creditdays КАК creditdays,
		|	Взаиморасчеты.creditlim КАК creditlim
		|ПОМЕСТИТЬ ВТ_КредитныеЛимиты
		|ИЗ
		|	ВТ_КредитныеЛимиты_Врем КАК Взаиморасчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Клиенты КАК ВТ_Клиенты
		|		ПО (ВТ_Клиенты.Партнер = Взаиморасчеты.Партнер)
		|			И (ВТ_Клиенты.Контрагент = Взаиморасчеты.Контрагент)
		|;
		|
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_КредитныеЛимиты_Врем";
	
	Запрос.Выполнить(); // ВТ_КредитныеЛимиты
	
	#КонецОбласти
	
	#Область ВТ_ДолгиКлиентов
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100000000
		|	ВТ_Продажи.Регистратор КАК Регистратор,
		|	ВТ_Продажи.Партнер КАК Партнер,
		|	ВТ_Продажи.Контрагент КАК Контрагент,
		|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
		|	ВТ_Продажи.clientcode КАК clientcode,
		|	ВТ_Продажи.spocode КАК spocode,
		|	ВТ_Продажи.doc_number КАК doc_number,
		|	ВТ_Продажи.doc_date КАК doc_date,
		|	ВТ_Продажи.whcode КАК whcode,
		|	ВТ_Продажи.tpcode КАК tpcode
		|ПОМЕСТИТЬ ВТ_Клиенты_Врем
		|ИЗ
		|	ВТ_Продажи КАК ВТ_Продажи
		|
		|УПОРЯДОЧИТЬ ПО
		|	clientcode,
		|	spocode
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Партнер,
		|	Контрагент,
		|	НомерЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Клиенты_Врем.Регистратор КАК Регистратор,
		|	ВТ_Клиенты_Врем.Партнер КАК Партнер,
		|	ВТ_Клиенты_Врем.Контрагент КАК Контрагент,
		|	ВТ_Клиенты_Врем.clientcode КАК clientcode,
		|	ВТ_Клиенты_Врем.spocode КАК spocode,
		|	ВТ_Клиенты_Врем.doc_number КАК doc_number,
		|	ВТ_Клиенты_Врем.doc_date КАК doc_date,
		|	ВТ_Клиенты_Врем.whcode КАК whcode,
		|	ВТ_Клиенты_Врем.tpcode КАК tpcode
		|ПОМЕСТИТЬ ВТ_Клиенты_Уникальные
		|ИЗ
		|	ВТ_Клиенты_Врем КАК ВТ_Клиенты_Врем
		|ГДЕ
		|	(ВТ_Клиенты_Врем.Регистратор, ВТ_Клиенты_Врем.Партнер, ВТ_Клиенты_Врем.Контрагент, ВТ_Клиенты_Врем.НомерЗаписи) В
		|			(ВЫБРАТЬ
		|				ВТ_Клиенты_Врем_2.Регистратор КАК Регистратор,
		|				ВТ_Клиенты_Врем_2.Партнер КАК Партнер,
		|				ВТ_Клиенты_Врем_2.Контрагент КАК Контрагент,
		|				МИНИМУМ(ВТ_Клиенты_Врем_2.НомерЗаписи) КАК НомерЗаписи
		|			ИЗ
		|				ВТ_Клиенты_Врем КАК ВТ_Клиенты_Врем_2
		|			СГРУППИРОВАТЬ ПО
		|				ВТ_Клиенты_Врем_2.Регистратор,
		|				ВТ_Клиенты_Врем_2.Партнер,
		|				ВТ_Клиенты_Врем_2.Контрагент)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Партнер,
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Клиенты_Врем
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Взаиморасчеты.РасчетныйДокумент КАК РасчетныйДокумент,
		|	Взаиморасчеты.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
		|	Взаиморасчеты.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
		|	&РасчетныйДокументПрефикс + (ВЫРАЗИТЬ(Взаиморасчеты.РасчетныйДокумент.Номер КАК СТРОКА(30))) КАК doc_number,
		|	НАЧАЛОПЕРИОДА(Взаиморасчеты.РасчетныйДокумент.Дата, ДЕНЬ) КАК doc_date,
		|	СУММА(Взаиморасчеты.ДолгОстаток) КАК credit
		|ПОМЕСТИТЬ ВТ_ДолгиКлиентов_Врем
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(
		|			&ДатаКон,
		|			(РасчетныйДокумент, АналитикаУчетаПоПартнерам.Партнер, АналитикаУчетаПоПартнерам.Контрагент) В
		|				(ВЫБРАТЬ
		|					ВТ_Клиенты_Уникальные.Регистратор КАК Регистратор,
		|					ВТ_Клиенты_Уникальные.Партнер КАК Партнер,
		|					ВТ_Клиенты_Уникальные.Контрагент КАК Контрагент
		|				ИЗ
		|					ВТ_Клиенты_Уникальные КАК ВТ_Клиенты_Уникальные)) КАК Взаиморасчеты
		|
		|СГРУППИРОВАТЬ ПО
		|	Взаиморасчеты.РасчетныйДокумент,
		|	Взаиморасчеты.АналитикаУчетаПоПартнерам.Партнер,
		|	Взаиморасчеты.АналитикаУчетаПоПартнерам.Контрагент,
		|	&РасчетныйДокументПрефикс + (ВЫРАЗИТЬ(Взаиморасчеты.РасчетныйДокумент.Номер КАК СТРОКА(30))),
		|	НАЧАЛОПЕРИОДА(Взаиморасчеты.РасчетныйДокумент.Дата, ДЕНЬ)
		|
		|ИМЕЮЩИЕ
		|	СУММА(Взаиморасчеты.ДолгОстаток) > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	РасчетныйДокумент,
		|	Партнер,
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Клиенты.clientcode КАК clientcode,
		|	ВТ_Клиенты.spocode КАК spocode,
		|	Взаиморасчеты.doc_number КАК doc_number,
		|	Взаиморасчеты.doc_date КАК doc_date,
		|	ВТ_Клиенты.whcode КАК whcode,
		|	ВТ_Клиенты.tpcode КАК tpcode,
		|	&ДатаКон КАК creditdate,
		|	СУММА(Взаиморасчеты.credit) КАК credit
		|ПОМЕСТИТЬ ВТ_ДолгиКлиентов
		|ИЗ
		|	ВТ_ДолгиКлиентов_Врем КАК Взаиморасчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Клиенты_Уникальные КАК ВТ_Клиенты
		|		ПО (ВТ_Клиенты.Регистратор = Взаиморасчеты.РасчетныйДокумент)
		|			И (ВТ_Клиенты.Партнер = Взаиморасчеты.Партнер)
		|			И (ВТ_Клиенты.Контрагент = Взаиморасчеты.Контрагент)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Клиенты.whcode,
		|	Взаиморасчеты.doc_number,
		|	Взаиморасчеты.doc_date,
		|	ВТ_Клиенты.tpcode,
		|	ВТ_Клиенты.clientcode,
		|	ВТ_Клиенты.spocode
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Клиенты_Уникальные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ДолгиКлиентов_Врем";
	
	Запрос.Текст = СтрЗаменитьЕх(
		Запрос.Текст
		, "&РасчетныйДокументПрефикс"
		, Конфигурация_UT11_ПрефиксНомераДокументаВЗапросе(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам.Измерения.РасчетныйДокумент, "РасчетныйДокумент")
	);
	
	Запрос.Выполнить(); // ВТ_ДолгиКлиентов
	
	#КонецОбласти
	
	#Область ВТ_Филиалы
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Организации.whcode КАК whcode,
		|	ВТ_Организации.Филиал.Наименование КАК whname,
		|	Адрес.Представление КАК whaddress,
		|	ЕСТЬNULL(ТипыФилиалов.whtype, 1) КАК whtype
		|ПОМЕСТИТЬ ВТ_Филиалы
		|ИЗ
		|	ВТ_Организации КАК ВТ_Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтактнаяИнформация КАК Адрес
		|		ПО (Адрес.Ссылка = ВТ_Организации.Филиал)
		|			И (Адрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|			И (Адрес.Вид В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада)))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТипыФилиалов КАК ТипыФилиалов
		|		ПО (ТипыФилиалов.Филиал = ВТ_Организации.Филиал)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ФилиалыСклады.whcode,
		|	ВТ_ФилиалыСклады.Ссылка.Наименование,
		|	ЕСТЬNULL(Адрес.Представление, ВТ_ФилиалыСклады.Ссылка.Наименование),
		|	ЕСТЬNULL(ТипыФилиалов.whtype, 2)
		|ИЗ
		|	ВТ_ФилиалыСклады КАК ВТ_ФилиалыСклады
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтактнаяИнформация КАК Адрес
		|		ПО (Адрес.Ссылка = ВТ_ФилиалыСклады.Ссылка)
		|			И (Адрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|			И (Адрес.Вид В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада)))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТипыФилиалов КАК ТипыФилиалов
		|		ПО (ТипыФилиалов.Филиал = ВТ_ФилиалыСклады.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ФилиалыПодразделения.whcode,
		|	ВТ_ФилиалыПодразделения.Ссылка.Наименование,
		|	ВТ_ФилиалыПодразделения.Ссылка.Наименование,
		|	ЕСТЬNULL(ТипыФилиалов.whtype, 2)
		|ИЗ
		|	ВТ_ФилиалыПодразделения КАК ВТ_ФилиалыПодразделения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТипыФилиалов КАК ТипыФилиалов
		|		ПО (ТипыФилиалов.Филиал = ВТ_ФилиалыПодразделения.Ссылка)
		|";
	
	Запрос.Выполнить(); // ВТ_Филиалы
	
	#КонецОбласти
	
	#Область УничтожитьВТ
	
	Запрос.Текст =
		"УНИЧТОЖИТЬ ВТ_КонтактнаяИнформация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТаблицаПересчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ПеремещениеТоваров_Врем
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_РозничныеМагазины
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_РозничныеЦены";
	
	Запрос.Выполнить();
	
	#КонецОбласти
	
КонецПроцедуры // Конфигурация_UT11_СоздатьВременныеТаблицы()

Функция Конфигурация_UT11_ВыполнитьЗапросОстатки(Знач Запрос, Знач ЗапросТекст)
	
	Если Запрос.Параметры.РегистрОстатков = "ТоварыОрганизаций" Тогда
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиИОбороты.Склад КАК Склад,
		|	ОстаткиИОбороты.Организация КАК Организация,
		|	ОстаткиИОбороты.Номенклатура КАК Номенклатура,
		|	ОстаткиИОбороты.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА &НеВыгружатьСерии
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		ИНАЧЕ ОстаткиИОбороты.Серия
		|	КОНЕЦ КАК Серия,
		|	СУММА(ОстаткиИОбороты.КоличествоНачальныйОстаток) КАК КоличествоНачальныйОстаток,
		|	СУММА(ОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход,
		|	СУММА(ОстаткиИОбороты.КоличествоРасход) КАК КоличествоРасход,
		|	СУММА(ОстаткиИОбороты.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток
		|ПОМЕСТИТЬ ВТ_ОстаткиИОбороты_Врем
		|ИЗ
		|	(ВЫБРАТЬ
		|		Обороты.Склад КАК Склад,
		|		Обороты.Организация КАК Организация,
		|		Обороты.Номенклатура КАК Номенклатура,
		|		Обороты.Характеристика КАК Характеристика,
		|		Обороты.Серия КАК Серия,
		|		0 КАК КоличествоНачальныйОстаток,
		|		СУММА(Обороты.КоличествоПриход) КАК КоличествоПриход,
		|		СУММА(Обороты.КоличествоРасход) КАК КоличествоРасход,
		|		0 КАК КоличествоКонечныйОстаток
		|	ИЗ
		|		(ВЫБРАТЬ
		|			&АналитикаУчетаНоменклатурыМестоХранения КАК Склад,
		|			Обороты.Организация КАК Организация,
		|			Обороты.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|			Обороты.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|			Обороты.АналитикаУчетаНоменклатуры.Серия КАК Серия,
		|			ВЫБОР
		|				КОГДА Обороты.КоличествоОборот > 0
		|					ТОГДА Обороты.КоличествоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ КАК КоличествоПриход,
		|			ВЫБОР
		|				КОГДА Обороты.КоличествоОборот < 0
		|					ТОГДА -Обороты.КоличествоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ КАК КоличествоРасход
		|		ИЗ
		|			РегистрНакопления.ТоварыОрганизаций.Обороты(
		|					&Дн,
		|					КОНЕЦПЕРИОДА(&Дн, ДЕНЬ),
		|					Запись,
		|					АналитикаУчетаНоменклатуры.Номенклатура В
		|							(ВЫБРАТЬ
		|								ВТ_Номенклатура.Ссылка
		|							ИЗ
		|								ВТ_Номенклатура КАК ВТ_Номенклатура)
		|						И Организация В
		|							(ВЫБРАТЬ
		|								ВТ_Организации.Ссылка
		|							ИЗ
		|								ВТ_Организации КАК ВТ_Организации)
		|						И &АналитикаУчетаНоменклатурыМестоХранения В
		|							(ВЫБРАТЬ
		|								ВТ_Склады.Ссылка
		|							ИЗ
		|								ВТ_Склады КАК ВТ_Склады)) КАК Обороты) КАК Обороты
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Обороты.Склад,
		|		Обороты.Организация,
		|		Обороты.Номенклатура,
		|		Обороты.Характеристика,
		|		Обороты.Серия
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Обороты.Склад,
		|		Обороты.Организация,
		|		Обороты.Номенклатура,
		|		Обороты.Характеристика,
		|		Обороты.Серия,
		|		0,
		|		СУММА(Обороты.КоличествоПриход),
		|		СУММА(Обороты.КоличествоРасход),
		|		0
		|	ИЗ
		|		(ВЫБРАТЬ
		|			Обороты.Склад КАК Склад,
		|			ВЫРАЗИТЬ(Обороты.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Организация КАК Организация,
		|			Обороты.Номенклатура КАК Номенклатура,
		|			Обороты.Характеристика КАК Характеристика,
		|			Обороты.Серия КАК Серия,
		|			ВЫБОР
		|				КОГДА Обороты.КОтгрузкеОборот > 0
		|					ТОГДА Обороты.КОтгрузкеОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ КАК КоличествоПриход,
		|			ВЫБОР
		|				КОГДА Обороты.КОтгрузкеОборот < 0
		|					ТОГДА -Обороты.КОтгрузкеОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ КАК КоличествоРасход
		|		ИЗ
		|			РегистрНакопления.ТоварыКОтгрузке.Обороты(
		|					&Дн,
		|					КОНЕЦПЕРИОДА(&Дн, ДЕНЬ),
		|					Запись,
		|					Номенклатура В
		|							(ВЫБРАТЬ
		|								ВТ_Номенклатура.Ссылка
		|							ИЗ
		|								ВТ_Номенклатура КАК ВТ_Номенклатура)
		|						И ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Организация В
		|							(ВЫБРАТЬ
		|								ВТ_Организации.Ссылка
		|							ИЗ
		|								ВТ_Организации КАК ВТ_Организации)
		|						И Склад В
		|							(ВЫБРАТЬ
		|								ВТ_Склады.Ссылка
		|							ИЗ
		|								ВТ_Склады КАК ВТ_Склады)) КАК Обороты) КАК Обороты
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Обороты.Склад,
		|		Обороты.Организация,
		|		Обороты.Номенклатура,
		|		Обороты.Характеристика,
		|		Обороты.Серия
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Остатки.Склад,
		|		Остатки.Организация,
		|		Остатки.Номенклатура,
		|		Остатки.Характеристика,
		|		Остатки.Серия,
		|		СУММА(Остатки.КоличествоНачальныйОстаток),
		|		0,
		|		0,
		|		СУММА(Остатки.КоличествоКонечныйОстаток)
		|	ИЗ
		|		(ВЫБРАТЬ
		|			&АналитикаУчетаНоменклатурыМестоХранения КАК Склад,
		|			Остатки.Организация КАК Организация,
		|			Остатки.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|			Остатки.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|			Остатки.АналитикаУчетаНоменклатуры.Серия КАК Серия,
		|			Остатки.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
		|			Остатки.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток
		|		ИЗ
		|			РегистрНакопления.ТоварыОрганизаций.ОстаткиИОбороты(
		|					&Дн,
		|					КОНЕЦПЕРИОДА(&Дн, ДЕНЬ),
		|					Период,
		|					ДвиженияИГраницыПериода,
		|					АналитикаУчетаНоменклатуры.Номенклатура В
		|							(ВЫБРАТЬ
		|								ВТ_Номенклатура.Ссылка
		|							ИЗ
		|								ВТ_Номенклатура КАК ВТ_Номенклатура)
		|						И Организация В
		|							(ВЫБРАТЬ
		|								ВТ_Организации.Ссылка
		|							ИЗ
		|								ВТ_Организации КАК ВТ_Организации)
		|						И &АналитикаУчетаНоменклатурыМестоХранения В
		|							(ВЫБРАТЬ
		|								ВТ_Склады.Ссылка
		|							ИЗ
		|								ВТ_Склады КАК ВТ_Склады)) КАК Остатки) КАК Остатки
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Остатки.Характеристика,
		|		Остатки.Серия,
		|		Остатки.Организация,
		|		Остатки.Склад,
		|		Остатки.Номенклатура
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Остатки.Склад,
		|		Остатки.Организация,
		|		Остатки.Номенклатура,
		|		Остатки.Характеристика,
		|		Остатки.Серия,
		|		СУММА(Остатки.КоличествоНачальныйОстаток),
		|		0,
		|		0,
		|		СУММА(Остатки.КоличествоКонечныйОстаток)
		|	ИЗ
		|		(ВЫБРАТЬ
		|			Остатки.Склад КАК Склад,
		|			ВЫРАЗИТЬ(Остатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Организация КАК Организация,
		|			Остатки.Номенклатура КАК Номенклатура,
		|			Остатки.Характеристика КАК Характеристика,
		|			Остатки.Серия КАК Серия,
		|			Остатки.КОтгрузкеНачальныйОстаток КАК КоличествоНачальныйОстаток,
		|			Остатки.КОтгрузкеКонечныйОстаток КАК КоличествоКонечныйОстаток
		|		ИЗ
		|			РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(
		|					&Дн,
		|					КОНЕЦПЕРИОДА(&Дн, ДЕНЬ),
		|					Период,
		|					ДвиженияИГраницыПериода,
		|					Номенклатура В
		|							(ВЫБРАТЬ
		|								ВТ_Номенклатура.Ссылка
		|							ИЗ
		|								ВТ_Номенклатура КАК ВТ_Номенклатура)
		|						И ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Организация В
		|							(ВЫБРАТЬ
		|								ВТ_Организации.Ссылка
		|							ИЗ
		|								ВТ_Организации КАК ВТ_Организации)
		|						И Склад В
		|							(ВЫБРАТЬ
		|								ВТ_Склады.Ссылка
		|							ИЗ
		|								ВТ_Склады КАК ВТ_Склады)) КАК Остатки) КАК Остатки
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Остатки.Характеристика,
		|		Остатки.Серия,
		|		Остатки.Организация,
		|		Остатки.Склад,
		|		Остатки.Номенклатура) КАК ОстаткиИОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиИОбороты.Организация,
		|	ОстаткиИОбороты.Склад,
		|	ОстаткиИОбороты.Номенклатура,
		|	ОстаткиИОбороты.Характеристика,
		|	ВЫБОР
		|		КОГДА &НеВыгружатьСерии
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		ИНАЧЕ ОстаткиИОбороты.Серия
		|	КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура";
	
	Иначе // ТоварыНаСкладах
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиИОбороты.Склад КАК Склад,
		|	ОстаткиИОбороты.Организация КАК Организация,
		|	ОстаткиИОбороты.Номенклатура КАК Номенклатура,
		|	ОстаткиИОбороты.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА &НеВыгружатьСерии
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		ИНАЧЕ ОстаткиИОбороты.Серия
		|	КОНЕЦ КАК Серия,
		|	СУММА(ОстаткиИОбороты.КоличествоНачальныйОстаток) КАК КоличествоНачальныйОстаток,
		|	СУММА(ОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход,
		|	СУММА(ОстаткиИОбороты.КоличествоРасход) КАК КоличествоРасход,
		|	СУММА(ОстаткиИОбороты.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток
		|ПОМЕСТИТЬ ВТ_ОстаткиИОбороты_Врем
		|ИЗ
		|	(ВЫБРАТЬ
		|		Обороты.Склад КАК Склад,
		|		Обороты.Организация КАК Организация,
		|		Обороты.Номенклатура КАК Номенклатура,
		|		Обороты.Характеристика КАК Характеристика,
		|		Обороты.Серия КАК Серия,
		|		0 КАК КоличествоНачальныйОстаток,
		|		СУММА(Обороты.КоличествоПриход) КАК КоличествоПриход,
		|		СУММА(Обороты.КоличествоРасход) КАК КоличествоРасход,
		|		0 КАК КоличествоКонечныйОстаток
		|	ИЗ
		|		(ВЫБРАТЬ
		|			Обороты.Склад КАК Склад,
		|			&ОсновнаяОрганизация КАК Организация,
		|			Обороты.Номенклатура КАК Номенклатура,
		|			Обороты.Характеристика КАК Характеристика,
		|			Обороты.Серия КАК Серия,
		|			ВЫБОР
		|				КОГДА Обороты.ВНаличииОборот - Обороты.КОтгрузкеОборот > 0
		|					ТОГДА Обороты.ВНаличииОборот - Обороты.КОтгрузкеОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ КАК КоличествоПриход,
		|			ВЫБОР
		|				КОГДА Обороты.ВНаличииОборот - Обороты.КОтгрузкеОборот < 0
		|					ТОГДА -(Обороты.ВНаличииОборот - Обороты.КОтгрузкеОборот)
		|				ИНАЧЕ 0
		|			КОНЕЦ КАК КоличествоРасход
		|		ИЗ
		|			РегистрНакопления.ТоварыНаСкладах.Обороты(
		|					&Дн,
		|					КОНЕЦПЕРИОДА(&Дн, ДЕНЬ),
		|					Запись,
		|					Номенклатура В
		|							(ВЫБРАТЬ
		|								ВТ_Номенклатура.Ссылка
		|							ИЗ
		|								ВТ_Номенклатура КАК ВТ_Номенклатура)
		|						И Склад В
		|							(ВЫБРАТЬ
		|								ВТ_Склады.Ссылка
		|							ИЗ
		|								ВТ_Склады КАК ВТ_Склады)) КАК Обороты) КАК Обороты
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Обороты.Склад,
		|		Обороты.Организация,
		|		Обороты.Номенклатура,
		|		Обороты.Характеристика,
		|		Обороты.Серия
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Остатки.Склад,
		|		Остатки.Организация,
		|		Остатки.Номенклатура,
		|		Остатки.Характеристика,
		|		Остатки.Серия,
		|		СУММА(Остатки.КоличествоНачальныйОстаток),
		|		0,
		|		0,
		|		СУММА(Остатки.КоличествоКонечныйОстаток)
		|	ИЗ
		|		(ВЫБРАТЬ
		|			Остатки.Склад КАК Склад,
		|			&ОсновнаяОрганизация КАК Организация,
		|			Остатки.Номенклатура КАК Номенклатура,
		|			Остатки.Характеристика КАК Характеристика,
		|			Остатки.Серия КАК Серия,
		|			Остатки.ВНаличииНачальныйОстаток - Остатки.КОтгрузкеНачальныйОстаток КАК КоличествоНачальныйОстаток,
		|			Остатки.ВНаличииКонечныйОстаток - Остатки.КОтгрузкеКонечныйОстаток КАК КоличествоКонечныйОстаток
		|		ИЗ
		|			РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(
		|					&Дн,
		|					КОНЕЦПЕРИОДА(&Дн, ДЕНЬ),
		|					Период,
		|					ДвиженияИГраницыПериода,
		|					Номенклатура В
		|							(ВЫБРАТЬ
		|								ВТ_Номенклатура.Ссылка
		|							ИЗ
		|								ВТ_Номенклатура КАК ВТ_Номенклатура)
		|						И Склад В
		|							(ВЫБРАТЬ
		|								ВТ_Склады.Ссылка
		|							ИЗ
		|								ВТ_Склады КАК ВТ_Склады)) КАК Остатки) КАК Остатки
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Остатки.Характеристика,
		|		Остатки.Серия,
		|		Остатки.Организация,
		|		Остатки.Склад,
		|		Остатки.Номенклатура) КАК ОстаткиИОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиИОбороты.Организация,
		|	ОстаткиИОбороты.Склад,
		|	ОстаткиИОбороты.Номенклатура,
		|	ОстаткиИОбороты.Характеристика,
		|	ВЫБОР
		|		КОГДА &НеВыгружатьСерии
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		ИНАЧЕ ОстаткиИОбороты.Серия
		|	КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура";
	
	КонецЕсли;

	Если Запрос.Параметры.Склады = Неопределено Тогда
	
		Запрос.Текст = СтрЗаменить(Запрос.Текст
		, "И &АналитикаУчетаНоменклатурыМестоХранения В
		|							(ВЫБРАТЬ
		|								ВТ_Склады.Ссылка
		|							ИЗ
		|								ВТ_Склады КАК ВТ_Склады)"
		, ""
		);
	
		Запрос.Текст = СтрЗаменить(Запрос.Текст
		, "И Склад В
		|							(ВЫБРАТЬ
		|								ВТ_Склады.Ссылка
		|							ИЗ
		|								ВТ_Склады КАК ВТ_Склады)"
		, ""
		);
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|;
		|" +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ОстаткиИОбороты_Врем.Номенклатура КАК Номенклатура,
		|	ВТ_ОстаткиИОбороты_Врем.Характеристика КАК Характеристика,
		|	ВТ_ОстаткиИОбороты_Врем.Серия КАК Серия
		|ПОМЕСТИТЬ ВТ_НоменклатураХарактеристикаСерия_Врем_2
		|ИЗ
		|	ВТ_ОстаткиИОбороты_Врем КАК ВТ_ОстаткиИОбороты_Врем
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_НоменклатураХарактеристикаСерия_Врем.Номенклатура,
		|	ВТ_НоменклатураХарактеристикаСерия_Врем.Характеристика,
		|	ВТ_НоменклатураХарактеристикаСерия_Врем.Серия
		|ИЗ
		|	ВТ_НоменклатураХарактеристикаСерия_Врем КАК ВТ_НоменклатураХарактеристикаСерия_Врем
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_НоменклатураХарактеристикаСерия_Врем
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НоменклатураХарактеристикаСерия_Врем_2.Номенклатура КАК Номенклатура,
		|	ВТ_НоменклатураХарактеристикаСерия_Врем_2.Характеристика КАК Характеристика,
		|	ВТ_НоменклатураХарактеристикаСерия_Врем_2.Серия КАК Серия
		|ПОМЕСТИТЬ ВТ_НоменклатураХарактеристикаСерия_Врем
		|ИЗ
		|	ВТ_НоменклатураХарактеристикаСерия_Врем_2 КАК ВТ_НоменклатураХарактеристикаСерия_Врем_2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_НоменклатураХарактеристикаСерия_Врем_2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_ФилиалыПодразделения.whcode, ЕСТЬNULL(ВТ_ФилиалыСклады.whcode, ВТ_Организации.whcode)) КАК whcode,
		|	(ВЫРАЗИТЬ(ВТ_Номенклатура.code КАК СТРОКА(20))) + ЕСТЬNULL(""_"" + ВТ_Характеристики.Код, """") КАК code,
		|	ВТ_ОстаткиИОбороты.Серия.Наименование КАК serial_no,
		|	ВТ_ЗакупочныеЦены.parcel_no КАК parcel_no,
		|	"""" КАК scd_number,
		|	"""" КАК is_date,
		|	ЕСТЬNULL(ВТ_ОстаткиИОбороты.Серия.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)) КАК exp_date,
		|	0 КАК inv_type,
		|	0 КАК transit,
		|	0 КАК reserve,
		|	ВТ_Номенклатура.ru КАК ru,
		|	ВТ_Номенклатура.weight КАК weight,
		|	СУММА(ВТ_ОстаткиИОбороты.КоличествоНачальныйОстаток * ВТ_Номенклатура.Коэффициент) КАК beg_rest,
		|	СУММА(ВТ_ОстаткиИОбороты.КоличествоПриход * ВТ_Номенклатура.Коэффициент) КАК in_qty,
		|	СУММА(ВТ_ОстаткиИОбороты.КоличествоРасход * ВТ_Номенклатура.Коэффициент) КАК out_qty,
		|	СУММА(ВТ_ОстаткиИОбороты.КоличествоКонечныйОстаток * ВТ_Номенклатура.Коэффициент) КАК end_rest,
		|	СУММА(ВТ_ОстаткиИОбороты.КоличествоНачальныйОстаток * ЕСТЬNULL(ВТ_ЗакупочныеЦены.ЦенаСНДС, 0)) КАК beg_amount,
		|	СУММА(ВТ_ОстаткиИОбороты.КоличествоПриход * ЕСТЬNULL(ВТ_ЗакупочныеЦены.ЦенаСНДС, 0)) КАК in_amount,
		|	СУММА(ВТ_ОстаткиИОбороты.КоличествоРасход * ЕСТЬNULL(ВТ_ЗакупочныеЦены.ЦенаСНДС, 0)) КАК out_amount,
		|	СУММА(ВТ_ОстаткиИОбороты.КоличествоКонечныйОстаток * ЕСТЬNULL(ВТ_ЗакупочныеЦены.ЦенаСНДС, 0)) КАК end_amount,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_ЗакупочныеЦены.parcel_no, """") <> """"
		|			ТОГДА ЕСТЬNULL(ВТ_ЗакупочныеЦены.ЦенаСНДС, 0)
		|	КОНЕЦ КАК price
		|ПОМЕСТИТЬ ВТ_ОстаткиИОбороты
		|ИЗ
		|	ВТ_ОстаткиИОбороты_Врем КАК ВТ_ОстаткиИОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Организации КАК ВТ_Организации
		|		ПО (ВТ_Организации.Ссылка = ВТ_ОстаткиИОбороты.Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФилиалыСклады КАК ВТ_ФилиалыСклады
		|		ПО (ВТ_ФилиалыСклады.Ссылка = ВТ_ОстаткиИОбороты.Склад)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФилиалыПодразделения КАК ВТ_ФилиалыПодразделения
		|		ПО (ВТ_ФилиалыПодразделения.Ссылка = ВТ_ОстаткиИОбороты.Склад.Подразделение)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
		|		ПО (ВТ_Номенклатура.Ссылка = ВТ_ОстаткиИОбороты.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗакупочныеЦены КАК ВТ_ЗакупочныеЦены
		|		ПО (ВТ_ЗакупочныеЦены.Номенклатура = ВТ_ОстаткиИОбороты.Номенклатура)
		|			И (ВТ_ЗакупочныеЦены.Характеристика = ВТ_ОстаткиИОбороты.Характеристика)
		|			И (ВТ_ЗакупочныеЦены.Серия = ВТ_ОстаткиИОбороты.Серия)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Характеристики КАК ВТ_Характеристики
		|		ПО (ВТ_Характеристики.Ссылка = ВТ_ОстаткиИОбороты.Характеристика)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ЗакупочныеЦены.ЦенаСНДС,
		|	ЕСТЬNULL(ВТ_ФилиалыПодразделения.whcode, ЕСТЬNULL(ВТ_ФилиалыСклады.whcode, ВТ_Организации.whcode)),
		|	ВТ_Номенклатура.ru,
		|	ВТ_Номенклатура.weight,
		|	ВТ_ОстаткиИОбороты.Серия.Наименование,
		|	ВТ_ЗакупочныеЦены.parcel_no,
		|	(ВЫРАЗИТЬ(ВТ_Номенклатура.code КАК СТРОКА(20))) + ЕСТЬNULL(""_"" + ВТ_Характеристики.Код, """"),
		|	ЕСТЬNULL(ВТ_ОстаткиИОбороты.Серия.ГоденДо, ДАТАВРЕМЯ(1, 1, 1))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ОстаткиИОбороты_Врем" + ";
		|////////////////////////////////////////////////////////////////////////////////
		|
		|" + ЗапросТекст + ";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ОстаткиИОбороты"
	;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст
		, "&АналитикаУчетаНоменклатурыМестоХранения"
		, ?( Метаданные.Справочники.КлючиАналитикиУчетаНоменклатуры.Реквизиты.Найти("МестоХранения") <> Неопределено
			, "АналитикаУчетаНоменклатуры.МестоХранения"
			, "АналитикаУчетаНоменклатуры.Склад"
		));
		
	ДобавитьОкругление(Запрос);
			
	Дн = НачалоДня(Запрос.Параметры.ДатаНач);
	Дк = НачалоДня(Запрос.Параметры.ДатаКон);
	
	ТЗ = Неопределено;
	
	Пока Дн <= Дк Цикл
		СообщитьПрогресс(Запрос.Параметры, "Остатки " + Формат(Дн, "ДФ=dd.MM.yy"));
			
		Запрос.УстановитьПараметр("Дн", Дн);
		Пакет = Запрос.ВыполнитьПакет();
		
		ТЗ_ЗаДень = Пакет[Пакет.Количество() - 2].Выгрузить(ОбходРезультатаЗапроса.Прямой);
		
		Если ТЗ = Неопределено Тогда
			ТЗ = ТЗ_ЗаДень;
		Иначе
			Для каждого СтрТЗ_ЗаДень Из ТЗ_ЗаДень Цикл
				ЗаполнитьЗначенияСвойств(ТЗ.Добавить(), СтрТЗ_ЗаДень);
			КонецЦикла;
		КонецЕсли;
		
		Дн = Дн + 3600 * 24;
		
	КонецЦикла;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Номенклатура.Ссылка КАК Номенклатура,
		|	ЕСТЬNULL(ВТ_НоменклатураХарактеристикаСерия.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|	(ВЫРАЗИТЬ(ВТ_Номенклатура.code КАК СТРОКА(20))) + ЕСТЬNULL(""_"" + ВТ_Характеристики.Код, """") КАК code,
		|	ВТ_Номенклатура.Ссылка.Наименование + ЕСТЬNULL("" ("" + ВТ_Характеристики.Ссылка.Наименование + "")"", """") КАК name
		|ПОМЕСТИТЬ ВТ_Номенклатура_Характеристика
		|ИЗ
		|	ВТ_Номенклатура КАК ВТ_Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураХарактеристикаСерия_Врем КАК ВТ_НоменклатураХарактеристикаСерия
		|		ПО ВТ_Номенклатура.Ссылка = ВТ_НоменклатураХарактеристикаСерия.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Характеристики КАК ВТ_Характеристики
		|		ПО (ВТ_Характеристики.Ссылка = ВТ_НоменклатураХарактеристикаСерия.Характеристика)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Характеристики";
	
	Запрос.Выполнить();
	
	#Область ВТ_Серии
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СерииНоменклатуры.Наименование КАК serial_no,
		|	ВТ_Номенклатура_Характеристика.code КАК code,
		|	НАЧАЛОПЕРИОДА(СерииНоменклатуры.ДатаПроизводства, ДЕНЬ) КАК is_date,
		|	НАЧАЛОПЕРИОДА(СерииНоменклатуры.ГоденДо, ДЕНЬ) КАК sl_date,
		|	"""" КАК scd_number
		|ПОМЕСТИТЬ ВТ_Серии
		|ИЗ
		|	ВТ_Номенклатура_Характеристика КАК ВТ_Номенклатура_Характеристика
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НоменклатураХарактеристикаСерия_Врем КАК ВТ_НоменклатураХарактеристикаСерия
		|		ПО (ВТ_НоменклатураХарактеристикаСерия.Номенклатура = ВТ_Номенклатура_Характеристика.Номенклатура)
		|			И (ВТ_НоменклатураХарактеристикаСерия.Характеристика = ВТ_Номенклатура_Характеристика.Характеристика)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|		ПО (СерииНоменклатуры.Ссылка = ВТ_НоменклатураХарактеристикаСерия.Серия)
		//|			И (СерииНоменклатуры.ГоденДо > ДАТАВРЕМЯ(1, 1, 1))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_НоменклатураХарактеристикаСерия_Врем";
		
	Если Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти("ДатаПроизводства") = Неопределено Тогда
	
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст
			, "НАЧАЛОПЕРИОДА(СерииНоменклатуры.ДатаПроизводства, ДЕНЬ)"
			, "ДАТАВРЕМЯ(1, 1, 1)"
		);
	
	КонецЕсли;
		
	Запрос.Выполнить();
	#КонецОбласти
	
	#Область ВТ_Товары
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТ_Номенклатура_Характеристика.code КАК code,
		|	ВТ_Номенклатура_Характеристика.Номенклатура.Артикул КАК art,
		|	МАКСИМУМ(ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """")) КАК barcode,
		|	ВТ_Номенклатура_Характеристика.name КАК name,
		|	1 КАК pack,
		|	МАКСИМУМ(ЕСТЬNULL(ВТ_ЗакупочныеЦены.ЦенаСНДС, 0)) КАК price,
		|	МАКСИМУМ(ЕСТЬNULL(ВТ_ЗакупочныеЦены.ЦенаСНДС_Средняя, 0)) КАК price_Средняя
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	ВТ_Номенклатура_Характеристика КАК ВТ_Номенклатура_Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО (ШтрихкодыНоменклатуры.Номенклатура = ВТ_Номенклатура_Характеристика.Номенклатура)
		|			И (ШтрихкодыНоменклатуры.Характеристика = ВТ_Номенклатура_Характеристика.Характеристика)
		|			И (ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.ЕдиницаИзмерения, ВТ_Номенклатура_Характеристика.Номенклатура.ЕдиницаИзмерения) = ВТ_Номенклатура_Характеристика.Номенклатура.ЕдиницаИзмерения)
		|			И (ДЛИНАСТРОКИ(ШтрихкодыНоменклатуры.Штрихкод) <= 14)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗакупочныеЦены КАК ВТ_ЗакупочныеЦены
		|		ПО (ВТ_ЗакупочныеЦены.Номенклатура = ВТ_Номенклатура_Характеристика.Номенклатура)
		|			И (ВТ_ЗакупочныеЦены.Характеристика = ВТ_Номенклатура_Характеристика.Характеристика)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Номенклатура_Характеристика.code,
		|	ВТ_Номенклатура_Характеристика.Номенклатура.Артикул,
		|	ВТ_Номенклатура_Характеристика.name";
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.20.1") < 0 Тогда
	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (ДЛИНАСТРОКИ(ШтрихкодыНоменклатуры.Штрихкод) <= 14)", ""); // Функция не поддерживается.
	
	КонецЕсли;
	
	Запрос.Выполнить();
	
	#КонецОбласти
	
	#Область УничтожитьВТ
	
	Запрос.Текст =
		"УНИЧТОЖИТЬ ВТ_ЗакупочныеЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Организации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Номенклатура_Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Склады";
	
	Запрос.Выполнить();
	
	#КонецОбласти
	
	Возврат ТЗ;

КонецФункции // Конфигурация_UT11_ВыполнитьЗапросОстатки()

Процедура Конфигурация_UT11_ПодключитьСерии(Знач Запрос)

	Если Запрос.Параметры.НеВыгружатьСерии Тогда
	
		Запрос.Выполнить();
		
		Возврат;
	
	КонецЕсли;
	
	// Из-за комиссионых продаж не получается собрать данные по регистрам накопления "ВыручкаИСебестоимостьПродаж"
	//  приходится брать движения по документам. Но т.к. серии в отдельной табл. части, то приходится распределять по долям
	
	НомПоз1 = СтрНайтиЕх(Запрос.Текст, "ПОМЕСТИТЬ ");
	НомПоз2 = СтрНайтиЕх(Запрос.Текст, Символы.ПС, , НомПоз1 + 1);
	
	СигнатураПОМЕСТИТЬ	= Сред(Запрос.Текст, НомПоз1, НомПоз2 - НомПоз1);
	ИмяВТ				= СокрЛП(Сред(СигнатураПОМЕСТИТЬ, СтрДлина("ПОМЕСТИТЬ ")));
	ДокументВид			= Сред(ИмяВТ, СтрДлина("ВТ_") + 1);
	
	Запрос.Текст		= СтрЗаменить(Запрос.Текст, СигнатураПОМЕСТИТЬ, "ПОМЕСТИТЬ ВТ_Движения");
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Д.Ссылка КАК Регистратор,
		|	Д.Номенклатура КАК Номенклатура,
		|	Д.Характеристика КАК Характеристика,
		|	Д.Серия КАК Серия,
		|	СУММА(Д.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТ_Движения_Серии
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Серии КАК Д
		|ГДЕ
		|	(Д.Ссылка, Д.Номенклатура, Д.Характеристика) В
		|			(ВЫБРАТЬ
		|				ВТ_Движения.Регистратор,
		|				ВТ_Движения.Номенклатура,
		|				ВТ_Движения.Характеристика
		|			ИЗ
		|				ВТ_Движения КАК ВТ_Движения)
		|
		|СГРУППИРОВАТЬ ПО
		|	Д.Ссылка,
		|	Д.Серия,
		|	Д.Характеристика,
		|	Д.Номенклатура
		|
		|ИМЕЮЩИЕ
		|	СУММА(Д.Количество) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Движения_Серии.Регистратор КАК Регистратор,
		|	ВТ_Движения_Серии.Номенклатура КАК Номенклатура,
		|	ВТ_Движения_Серии.Характеристика КАК Характеристика,
		|	СУММА(ВТ_Движения_Серии.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТ_Движения_Серии_Итоги
		|ИЗ
		|	ВТ_Движения_Серии КАК ВТ_Движения_Серии
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Движения_Серии.Характеристика,
		|	ВТ_Движения_Серии.Номенклатура,
		|	ВТ_Движения_Серии.Регистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Движения_Серии.Регистратор КАК Регистратор,
		|	ВТ_Движения_Серии.Номенклатура КАК Номенклатура,
		|	ВТ_Движения_Серии.Характеристика КАК Характеристика,
		|	ВТ_Движения_Серии.Серия КАК Серия,
		|	ВТ_Движения_Серии.Количество КАК Числитель,
		|	ВТ_Движения_Серии_Итоги.Количество КАК Знаменатель
		|ПОМЕСТИТЬ ВТ_Серии
		|ИЗ
		|	ВТ_Движения_Серии КАК ВТ_Движения_Серии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Движения_Серии_Итоги КАК ВТ_Движения_Серии_Итоги
		|		ПО ВТ_Движения_Серии.Регистратор = ВТ_Движения_Серии_Итоги.Регистратор
		|			И ВТ_Движения_Серии.Номенклатура = ВТ_Движения_Серии_Итоги.Номенклатура
		|			И ВТ_Движения_Серии.Характеристика = ВТ_Движения_Серии_Итоги.Характеристика
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Номенклатура,
		|	Характеристика";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.РеализацияТоваровУслуг.Серии КАК Д", "Документ." + ДокументВид + ".Серии КАК Д");
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"УНИЧТОЖИТЬ ВТ_Движения_Серии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Движения_Серии_Итоги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Движения.Склад КАК Склад,
		|	ВТ_Движения.Клиент КАК Клиент,
		|	ВТ_Движения.ТорговаяТочка КАК ТорговаяТочка,
		|	ВТ_Движения.АдресДоставки КАК АдресДоставки,
		|	ВТ_Движения.Партнер КАК Партнер,
		|	ВТ_Движения.Контрагент КАК Контрагент,
		|	ВТ_Движения.Договор КАК Договор,
		|	ВТ_Движения.ТорговыйПредставитель КАК ТорговыйПредставитель,
		|	ЕСТЬNULL(ВТ_Серии.Серия, ВТ_Движения.Серия) КАК Серия,
		|	ВТ_Движения.Регистратор КАК Регистратор,
		|	ВТ_Движения.Накладная КАК Накладная,
		|	ВТ_Движения.doc_ttn КАК doc_ttn,
		|	ВТ_Движения.Организация КАК Организация,
		|	ВТ_Движения.Номенклатура КАК Номенклатура,
		|	ВТ_Движения.Характеристика КАК Характеристика,
		|	ВТ_Движения.curr_date КАК curr_date,
		|	ВТ_Движения.doc_number КАК doc_number,
		|	ВТ_Движения.doc_parent КАК doc_parent,
		|	ВТ_Движения.oper_type КАК oper_type,
		|	ВТ_Движения.deliv_date КАК deliv_date,
		|	ВТ_Движения.order_stat КАК order_stat,
		|	ВЫРАЗИТЬ(ВТ_Движения.quantity * ЕСТЬNULL(ВТ_Серии.Числитель / ВТ_Серии.Знаменатель, 1) КАК ЧИСЛО(32, 9)) КАК quantity,
		|	ВЫРАЗИТЬ(ВТ_Движения.amount * ЕСТЬNULL(ВТ_Серии.Числитель / ВТ_Серии.Знаменатель, 1) КАК ЧИСЛО(18, 2)) КАК amount,
		|	ВЫРАЗИТЬ(ВТ_Движения.discount * ЕСТЬNULL(ВТ_Серии.Числитель / ВТ_Серии.Знаменатель, 1) КАК ЧИСЛО(18, 2)) КАК discount,
		|	ВЫРАЗИТЬ(ВТ_Движения.vat * ЕСТЬNULL(ВТ_Серии.Числитель / ВТ_Серии.Знаменатель, 1) КАК ЧИСЛО(18, 2)) КАК vat,
		|	ВТ_Движения.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ ВТ_Врем
		|ИЗ
		|	ВТ_Движения КАК ВТ_Движения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Серии КАК ВТ_Серии
		|		ПО (ВТ_Серии.Регистратор = ВТ_Движения.Регистратор)
		|			И (ВТ_Серии.Номенклатура = ВТ_Движения.Номенклатура)
		|			И (ВТ_Серии.Характеристика = ВТ_Движения.Характеристика)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Движения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Серии";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ВТ_Врем", "ПОМЕСТИТЬ " + ИмяВТ);
	
	Запрос.Выполнить();

КонецПроцедуры // Конфигурация_UT11_ПодключитьСерии()

#КонецОбласти

Функция ТекстОтбораПоТипуДокументов(Знач ПолеОтбораПоТипу, Знач ДоступныеТипыДокументов, Знач ТипыДокументов)

	ТекстОтбораПоТипуДокументов = ""; Разд = "";
	
	ДоступныеТипыДокументов = РазложитьСтрокуВМассивПодстрок(ДоступныеТипыДокументов, ",", Истина, Истина);
	
	Для каждого ТипДокумента Из ДоступныеТипыДокументов Цикл
		
		ТипыДокументовСтрока = ТипыДокументов.НайтиПоЗначению(Тип("ДокументСсылка." + ТипДокумента));
		Если ТипыДокументовСтрока <> Неопределено и ТипыДокументовСтрока.Пометка Тогда
		
			ТекстОтбораПоТипуДокументов = ТекстОтбораПоТипуДокументов + Разд + ПолеОтбораПоТипу + " ССЫЛКА Документ." + ТипДокумента;
			
			Разд = "
			|	ИЛИ "
		
		КонецЕсли;
	
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстОтбораПоТипуДокументов) Тогда
	
		ТекстОтбораПоТипуДокументов = "ЛОЖЬ";
		
	Иначе
		
		ТекстОтбораПоТипуДокументов = "(" + ТекстОтбораПоТипуДокументов + "
		|)";
	
	КонецЕсли;

	Возврат ТекстОтбораПоТипуДокументов;
	
КонецФункции // ТекстОтбораПоТипуДокументов()

Функция ПроверитьЗапрос(Знач ЗапросТекст, ПоляЗапроса)
	
	Перем Поля, ПоляНачаты;
	Перем Группировки, ГруппировкиНачаты;
	
	Поля				= Новый Массив;
	ПоляНачаты			= Ложь;
	
	Группировки			= Новый Массив;
	ГруппировкиНачаты	= Ложь;
	
	Для каждого СтрокаТекста Из СтрРазделитьЕх(ЗапросТекст, Символы.ПС, Ложь) Цикл // Символы.ПС + Символы.ВК
	
		Если СтрокаТекста = "ВЫБРАТЬ" Тогда
		
			ПоляНачаты = Истина;
		
		ИначеЕсли СтрокаТекста = "ИЗ" Тогда
		
			ПоляНачаты = Ложь;
		
		ИначеЕсли СтрокаТекста = "СГРУППИРОВАТЬ ПО" Тогда
			
			ГруппировкиНачаты = Истина;
		
		ИначеЕсли СтрокаТекста = "ИМЕЮЩИЕ" или СтрокаТекста = "УПОРЯДОЧИТЬ ПО" Тогда
			
			ГруппировкиНачаты = Ложь;
		
		ИначеЕсли ПоляНачаты Тогда
			
			НомПоз = СтрНайтиЕх(СтрокаТекста, " КАК ");
			Поля.Добавить(СокрЛП(Лев(СтрокаТекста, НомПоз - 1)));
		
		ИначеЕсли ГруппировкиНачаты Тогда
			
			НомПоз = СтрНайтиЕх(СтрокаТекста, ",");
			Если НомПоз Тогда
			
				Группировка = Лев(СтрокаТекста, НомПоз - 1);
				
			Иначе
				
				Группировка = СтрокаТекста;
				
			КонецЕсли;
			
			Группировки.Добавить(СокрЛП(Группировка));
		
		КонецЕсли;
	
	КонецЦикла;
	
	Если ПоляЗапроса = Неопределено Тогда
	
		ПоляЗапроса	= Поля;
		
	Иначе
		
		Поля		= ПоляЗапроса;
	
	КонецЕсли;
	
	ЛишниеГруппировки = Новый Массив;
	Для каждого Группировка Из Группировки Цикл
	
		Если Поля.Найти(Группировка) = Неопределено Тогда
			
			ЛишниеГруппировки.Добавить(Группировка);
		
		КонецЕсли;
	
	КонецЦикла;
	
	Если ЛишниеГруппировки.Количество() Тогда
	
		ВызватьИсключение "Лишняя/ние группировка(и) """ + СтрСоединитьЕх(ЛишниеГруппировки, ", ") + """!";
	
	КонецЕсли;
	
КонецФункции // ПроверитьЗапрос()

Функция ВыполнитьЗапросСПроверками(Знач Запрос, Знач КорректныйManfid)
	
	Перем ПоляЗапроса;
	
	ПроверитьManfid(Запрос, КорректныйManfid);
	
	ЗапросТекст = ВРег(Запрос.Текст);
	
	ПоляЗапроса = Неопределено;
	
	Для каждого ПодзапросТекст Из СтрРазделитьЕх(ЗапросТекст, "ОБЪЕДИНИТЬ ВСЕ", Ложь) Цикл
	
		ПроверитьЗапрос(ПодзапросТекст, ПоляЗапроса);
	
	КонецЦикла;
	
	Если СтрНайтиЕх(ЗапросТекст, ВРег(".quantity")) Тогда
	
		ДобавитьОкругление(Запрос);
	
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
КонецФункции // ВыполнитьЗапросСПроверками()

#КонецОбласти

#Область Таблицы

#Область Производитель_6009
// Ekoprom

Функция epcatal(Запрос)
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТ_Товары.code КАК code,
		|	ВТ_Товары.art КАК art,
		|	ВТ_Товары.barcode КАК barcode,
		|	ВТ_Товары.name КАК name,
		|	ВТ_Товары.pack КАК pack,
		|	&manfid КАК manfid
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|
		|УПОРЯДОЧИТЬ ПО
		|	code";
			
	Возврат ВыполнитьЗапросСПроверками(Запрос, 6009);
	
КонецФункции // epcatal()	

Функция epclient(Запрос)
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Клиенты.clientcode КАК clientcode,
		|	ВТ_Клиенты.clientname КАК clientname,
		|	ВТ_Клиенты.address_ur КАК address_ur,
		|	ВТ_Клиенты.address КАК address,
		|	ВТ_Клиенты.inn КАК inn,
		|	ВТ_Клиенты.kpp КАК kpp,
		|	ВТ_Клиенты.spocode КАК spocode,
		|	ВТ_Клиенты.sponame КАК sponame,
		|	ВТ_Клиенты.spoaddress КАК spoaddress,
		|	ВТ_Клиенты.kladrcode КАК kladrcode,
		|	ВТ_Клиенты.zip_code КАК zip_code,
		|	ВТ_Клиенты.mccode КАК mccode,
		|	ВТ_Клиенты.mcname КАК mcname,
		|	&manfid КАК manfid
		|ИЗ
		|	ВТ_Клиенты КАК ВТ_Клиенты
		|
		|УПОРЯДОЧИТЬ ПО
		|	clientname";
		
	Возврат ВыполнитьЗапросСПроверками(Запрос, 6009);
	
КонецФункции // epclient()

Функция epsr(Запрос)
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТ_ТорговыеПредставители.tpcode КАК tpcode,
		|	ВТ_ТорговыеПредставители.tpname КАК tpname,
		|	ВТ_ТорговыеПредставители.tptypeid КАК tptypeid,
		|	&manfid КАК manfid
		|ИЗ
		|	ВТ_ТорговыеПредставители КАК ВТ_ТорговыеПредставители
		|
		|УПОРЯДОЧИТЬ ПО
		|	tpcode";
	
	Возврат ВыполнитьЗапросСПроверками(Запрос, 6009);
	
КонецФункции // epsr()

Функция epwh(Запрос)
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Филиалы.whcode КАК whcode,
		|	ВТ_Филиалы.whname КАК whname,
		|	ВТ_Филиалы.whaddress КАК whaddress,
		|	&manfid КАК manfid
		|ИЗ
		|	ВТ_Филиалы КАК ВТ_Филиалы
		|
		|УПОРЯДОЧИТЬ ПО
		|	whname";

	Возврат ВыполнитьЗапросСПроверками(Запрос, 6009);
	
КонецФункции // epwh()

Функция epsales(Запрос)
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТ_Продажи.whcode КАК whcode,
		|	ВТ_Продажи.code КАК code,
		|	ВТ_Продажи.doc_date КАК curr_date,
		|	ВТ_Продажи.exp_date КАК exp_date,
		|	ВТ_Продажи.scd_number КАК scd_number,
		|	ВТ_Продажи.doc_number КАК doc_number,
		|	ВТ_Продажи.doc_parent КАК doc_parent,
		|	ВТ_Продажи.oper_type КАК oper_type,
		|	ВТ_Продажи.doc_ttn КАК doc_ttn,
		|	ВТ_Продажи.doc_inv КАК doc_inv,
		|	МАКСИМУМ(ВТ_Продажи.order_date) КАК order_date,
		|	МАКСИМУМ(ВТ_Продажи.deliv_date) КАК deliv_date,
		|	ВТ_Продажи.clientcode КАК clientcode,
		|	ВТ_Продажи.spocode КАК spocode,
		|	ВТ_Продажи.tpcode КАК tpcode,
		|	ВТ_Продажи.opcode КАК opcode,
		|	ВТ_Продажи.order_stat КАК order_stat,
		|	ВТ_Продажи.ru КАК ru,
		|	ВЫРАЗИТЬ(СУММА(ВТ_Продажи.quantity) КАК ЧИСЛО(32, 9)) КАК quantity,
		|	ВТ_Продажи.weight КАК weight,
		|	СУММА(ВТ_Продажи.amount_bp) КАК amount_bp,
		|	СУММА(ВТ_Продажи.amount_cp) КАК amount_cp,
		|	СУММА(ВТ_Продажи.discount) КАК discount,
		|	СУММА(ВТ_Продажи.vat) КАК vat,
		|	&manfid КАК manfid
		|ИЗ
		|	ВТ_Продажи КАК ВТ_Продажи
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Продажи.whcode,
		|	ВТ_Продажи.code,
		|	ВТ_Продажи.doc_date,
		|	ВТ_Продажи.exp_date,
		|	ВТ_Продажи.scd_number,
		|	ВТ_Продажи.doc_number,
		|	ВТ_Продажи.doc_parent,
		|	ВТ_Продажи.oper_type,
		|	ВТ_Продажи.doc_ttn,
		|	ВТ_Продажи.doc_inv,
		|	ВТ_Продажи.clientcode,
		|	ВТ_Продажи.spocode,
		|	ВТ_Продажи.tpcode,
		|	ВТ_Продажи.opcode,
		|	ВТ_Продажи.order_stat,
		|	ВТ_Продажи.ru,
		|	ВТ_Продажи.weight
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_Продажи.doc_date,
		|	ВТ_Продажи.oper_type,
		|	ВТ_Продажи.doc_number,
		|	ВТ_Продажи.code";
	
	Возврат ВыполнитьЗапросСПроверками(Запрос, 6009);
КонецФункции // epsales()

Функция eprest(Запрос)
	
	Возврат ВыполнитьЗапросОстатки(Запрос, 6009,
		"ВЫБРАТЬ
		|	ВТ_ОстаткиИОбороты.whcode КАК whcode,
		|	ВТ_ОстаткиИОбороты.code КАК code,
		|	НАЧАЛОПЕРИОДА(&Дн, ДЕНЬ) КАК curr_date,
		|	ВТ_ОстаткиИОбороты.exp_date КАК exp_date,
		|	ВТ_ОстаткиИОбороты.scd_number КАК scd_number,
		|	ВТ_ОстаткиИОбороты.inv_type КАК inv_type,
		|	ВТ_ОстаткиИОбороты.ru КАК ru,
		|	ВЫРАЗИТЬ(СУММА(ВТ_ОстаткиИОбороты.beg_rest) КАК ЧИСЛО(32, 9)) КАК beg_rest,
		|	ВЫРАЗИТЬ(СУММА(ВТ_ОстаткиИОбороты.in_qty) КАК ЧИСЛО(32, 9)) КАК in_qty,
		|	ВЫРАЗИТЬ(СУММА(ВТ_ОстаткиИОбороты.out_qty) КАК ЧИСЛО(32, 9)) КАК out_qty,
		|	ВЫРАЗИТЬ(СУММА(ВТ_ОстаткиИОбороты.end_rest) КАК ЧИСЛО(32, 9)) КАК end_rest,
		|	СУММА(ВТ_ОстаткиИОбороты.beg_amount) КАК beg_amount,
		|	СУММА(ВТ_ОстаткиИОбороты.in_amount) КАК in_amount,
		|	СУММА(ВТ_ОстаткиИОбороты.out_amount) КАК out_amount,
		|	СУММА(ВТ_ОстаткиИОбороты.end_amount) КАК end_amount,
		|	ВТ_ОстаткиИОбороты.weight КАК weight,
		|	&manfid КАК manfid
		|ИЗ
		|	ВТ_ОстаткиИОбороты КАК ВТ_ОстаткиИОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОстаткиИОбороты.whcode,
		|	ВТ_ОстаткиИОбороты.code,
		|	ВТ_ОстаткиИОбороты.exp_date,
		|	ВТ_ОстаткиИОбороты.scd_number,
		|	ВТ_ОстаткиИОбороты.inv_type,
		|	ВТ_ОстаткиИОбороты.ru,
		|	ВТ_ОстаткиИОбороты.weight
		|
		|УПОРЯДОЧИТЬ ПО
		|	code,
		|	whcode");
КонецФункции // eprest()

#КонецОбласти

#КонецОбласти

Функция СообщитьПрогресс(Знач Параметры, Знач Текст, Знач ШагПрогресса = 1)

	Параметры.ДлительныеОперацииТекущаяОперация = Параметры.ДлительныеОперацииТекущаяОперация + ШагПрогресса;
	
	Прогресс = Мин(99, Окр(100 * Параметры.ДлительныеОперацииТекущаяОперация / Параметры.ДлительныеОперацииКоличество, 0));
	
	ЭтоУправляемоеПриложение = ЭтоУправляемоеПриложение();
	
	#Область ФормыУправляемые
	Если ЭтоУправляемоеПриложение Тогда
		
	ДлительныеОперации.СообщитьПрогресс(Прогресс, Параметры.НастройкаИмя + " " + Текст);
	
	КонецЕсли;
	#КонецОбласти
	
	Возврат Текст;
	
КонецФункции // СообщитьПрогресс()

Функция ОбщийМодуль(Знач Имя)

	ЭтоУправляемоеПриложение = ЭтоУправляемоеПриложение();
	
	#Область ФормыУправляемые
	Если ЭтоУправляемоеПриложение Тогда
		
	Возврат ОбщегоНазначения.ОбщийМодуль(Имя);
	
	КонецЕсли;
	#КонецОбласти

КонецФункции // ОбщийМодуль()

#Область ПолучениеДанных

Процедура ДобавитьОкругление(Знач Запрос)

	Перем Текст;
	
	Текст = СтрЗаменить(Запрос.Текст
		, " КАК ЧИСЛО(32, 9)) КАК "
		, ?(Запрос.Параметры.Округлять
		, " КАК ЧИСЛО(18, 0)) КАК "
		, " КАК ЧИСЛО(18, 3)) КАК "
	));
	
	Если Запрос.Текст = Текст Тогда
	
		ВызватьИсключение "Сигнатура для округления ("" КАК ЧИСЛО(32, 9)) КАК "") не указана в тексте запроса! " + Запрос.Текст;
	
	КонецЕсли;
	
	Запрос.Текст = Текст;
	
КонецПроцедуры // ДобавитьОкругление()

Процедура МассивОписанийТаблицДобавить(Знач МассивОписанийТаблиц, Знач Имя, Знач Представление, Знач ТЗ)

	Если ТЗ = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Для каждого ТаблицаОписание Из МассивОписанийТаблиц Цикл
	
		Если ТаблицаОписание.Имя = Имя Тогда
		
			ВызватьИсключение "Дублирование таблицы";
		
		КонецЕсли;
	
	КонецЦикла;
	
	ТаблицаОписание = Новый Структура;
	ТаблицаОписание.Вставить("Имя"				, Имя);
	ТаблицаОписание.Вставить("Представление"	, Представление);
	ТаблицаОписание.Вставить("ТЗ"				, ТЗ);
	
	МассивОписанийТаблиц.Добавить(ТаблицаОписание);

КонецПроцедуры // МассивОписанийТаблицДобавить()

Процедура Создать_ВТ_ТаблицаПересчета(Знач Запрос)

	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000000
		|	ТаблицаПересчета.Используется КАК Используется,
		|	ТаблицаПересчета.Номенклатура КАК Номенклатура,
		|	ТаблицаПересчета.Коэффициент КАК Коэффициент,
		|	ТаблицаПересчета.ru КАК ru,
		|	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_ТаблицаПересчета_Врем
		|ИЗ
		|	&ТаблицаПересчета КАК ТаблицаПересчета
		|ГДЕ
		|	ТаблицаПересчета.Используется
		|
		|УПОРЯДОЧИТЬ ПО
		|	Используется
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаПересчета_Врем.Номенклатура КАК Номенклатура,
		|	ВТ_ТаблицаПересчета_Врем.Коэффициент КАК Коэффициент,
		|	ВТ_ТаблицаПересчета_Врем.ru КАК ru
		|ПОМЕСТИТЬ ВТ_ТаблицаПересчета
		|ИЗ
		|	ВТ_ТаблицаПересчета_Врем КАК ВТ_ТаблицаПересчета_Врем
		|ГДЕ
		|	(ВТ_ТаблицаПересчета_Врем.Номенклатура, ВТ_ТаблицаПересчета_Врем.НомерСтроки) В
		|			(ВЫБРАТЬ
		|				ВТ_ТаблицаПересчета_Врем_2.Номенклатура КАК Номенклатура,
		|				МИНИМУМ(ВТ_ТаблицаПересчета_Врем_2.НомерСтроки) КАК НомерСтроки
		|			ИЗ
		|				ВТ_ТаблицаПересчета_Врем КАК ВТ_ТаблицаПересчета_Врем_2
		|			СГРУППИРОВАТЬ ПО
		|				ВТ_ТаблицаПересчета_Врем_2.Номенклатура)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТаблицаПересчета_Врем";
	
	Запрос.Выполнить(); // ВТ_ТаблицаПересчета
	
КонецПроцедуры // Создать_ВТ_ТаблицаПересчета()

Процедура Создать_ВТ_ДополнительныеСведения(Знач Запрос)

	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000000
		|	ДополнительныеСведения.Объект КАК Объект,
		|	ДополнительныеСведения.Свойство КАК Свойство,
		|	ДополнительныеСведения.Значение КАК Значение,
		|	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_ДополнительныеСведения_Врем
		|ИЗ
		|	&ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Используется
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДополнительныеСведения.Используется
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДополнительныеСведения_Врем.Объект КАК Объект,
		|	ВТ_ДополнительныеСведения_Врем.Свойство КАК Свойство,
		|	ВТ_ДополнительныеСведения_Врем.Значение КАК Значение
		|ПОМЕСТИТЬ ВТ_ДополнительныеСведения
		|ИЗ
		|	ВТ_ДополнительныеСведения_Врем КАК ВТ_ДополнительныеСведения_Врем
		|ГДЕ
		|	(ВТ_ДополнительныеСведения_Врем.Объект, ВТ_ДополнительныеСведения_Врем.Свойство, ВТ_ДополнительныеСведения_Врем.НомерСтроки) В
		|			(ВЫБРАТЬ
		|				ВТ_ДополнительныеСведения_Врем_2.Объект КАК Объект,
		|				ВТ_ДополнительныеСведения_Врем_2.Свойство КАК Свойство,
		|				МИНИМУМ(ВТ_ДополнительныеСведения_Врем_2.НомерСтроки) КАК НомерСтроки
		|			ИЗ
		|				ВТ_ДополнительныеСведения_Врем КАК ВТ_ДополнительныеСведения_Врем_2
		|			СГРУППИРОВАТЬ ПО
		|				ВТ_ДополнительныеСведения_Врем_2.Объект,
		|				ВТ_ДополнительныеСведения_Врем_2.Свойство)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект,
		|	Свойство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ДополнительныеСведения_Врем";
	
	Запрос.Выполнить(); // ВТ_ДополнительныеСведения
	
КонецПроцедуры // Создать_ВТ_ДополнительныеСведения()

Функция КодировкаТекста(Знач НастройкиОбщие)

	Перем Кодировка;
	
	ОТ = Новый ОписаниеТипов("КодировкаТекста");
	
	Кодировка = ОТ.ПривестиЗначение(НастройкиОбщие.КодировкаТекста);
	
	Если ЗначениеЗаполнено(Кодировка) Тогда
	
		Возврат Кодировка;
	
	КонецЕсли;
	
	Возврат КодировкаТекста.ANSI;

КонецФункции // КодировкаТекста()

Процедура Создать_ВТ_ТипыФилиалов(Знач ТипыФилиаловМассив, Знач ШаблонНастроек, Знач Запрос)

	Перем ТипыФилиалов;
	
	ТипыФилиалов = ШаблонНастроек.ТипыФилиалов.Скопировать();
	
	Для каждого ТипФилиалаОписание Из ТипыФилиаловМассив Цикл
	
		Если	Не ТипФилиалаОписание.Используется
			Или Не ЗначениеЗаполнено(ТипФилиалаОписание.whtype)
			Или ТипыФилиалов.Найти(ТипФилиалаОписание.Филиал, "Филиал") <> Неопределено
		Тогда
		
			Продолжить;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТипыФилиалов.Добавить(), ТипФилиалаОписание);
	
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТипыФилиалов", ТипыФилиалов);
	
	Запрос.Текст = "ВЫБРАТЬ ТипыФилиалов.* ПОМЕСТИТЬ ВТ_ТипыФилиалов ИЗ &ТипыФилиалов КАК ТипыФилиалов ИНДЕКСИРОВАТЬ ПО Филиал";
	Запрос.Выполнить();
	
	//Возврат ТипыФилиалов;

КонецПроцедуры // Создать_ВТ_ТипыФилиалов()

Процедура Создать_ВТ_ВиртуальныеКлиенты(Запрос, ШаблонНастроек, ВиртуальныеКлиенты, ЗамещающиеКлиенты)
	
	ТзВиртуальныеКлиенты	= ШаблонНастроек.ВиртуальныеКлиенты.СкопироватьКолонки();
	ТзЗамещающиеКлиенты		= ШаблонНастроек.ЗамещающиеКлиенты.СкопироватьКолонки();
	
	Для каждого ВиртуальныеКлиентыСтрока Из ВиртуальныеКлиенты Цикл
	
		Если ВиртуальныеКлиентыСтрока.Используется
			И ЗначениеЗаполнено(ВиртуальныеКлиентыСтрока.clientcode)
			И ТзВиртуальныеКлиенты.Найти(ВиртуальныеКлиентыСтрока.clientcode, "clientcode") = Неопределено
		Тогда
		
			ЗаполнитьЗначенияСвойств(ТзВиртуальныеКлиенты.Добавить(), ВиртуальныеКлиентыСтрока);
		
		КонецЕсли;
	
	КонецЦикла;
	
	Для каждого ЗамещающиеКлиентыСтрока Из ЗамещающиеКлиенты Цикл
	
		Если ЗамещающиеКлиентыСтрока.Используется
			И ЗначениеЗаполнено(ЗамещающиеКлиентыСтрока.Клиент)
			И ЗначениеЗаполнено(ЗамещающиеКлиентыСтрока.ВиртуальныйКлиент)
			И ТзЗамещающиеКлиенты.Найти(ЗамещающиеКлиентыСтрока.Клиент, "Клиент") = Неопределено
			И ТзВиртуальныеКлиенты.Найти(ЗамещающиеКлиентыСтрока.ВиртуальныйКлиент, "clientcode") <> Неопределено
			
		Тогда
		
			ЗаполнитьЗначенияСвойств(ТзЗамещающиеКлиенты.Добавить(), ЗамещающиеКлиентыСтрока);
		
		КонецЕсли;
	
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТзВиртуальныеКлиенты", ТзВиртуальныеКлиенты);
	Запрос.УстановитьПараметр("ТзЗамещающиеКлиенты"	, ТзЗамещающиеКлиенты);
	
	Запрос.Текст =
	"ВЫБРАТЬ ТзВиртуальныеКлиенты.* ПОМЕСТИТЬ ТзВиртуальныеКлиенты	ИЗ &ТзВиртуальныеКлиенты	КАК ТзВиртуальныеКлиенты	Индексировать ПО clientcode;
	|ВЫБРАТЬ ТзЗамещающиеКлиенты.*	ПОМЕСТИТЬ ТзЗамещающиеКлиенты	ИЗ &ТзЗамещающиеКлиенты		КАК ТзЗамещающиеКлиенты		Индексировать ПО ВиртуальныйКлиент;
	|ВЫБРАТЬ ТзЗамещающиеКлиенты.Клиент КАК Клиент, ТзВиртуальныеКлиенты.*
	|	ПОМЕСТИТЬ ВТ_ВиртуальныеКлиенты
	|	ИЗ ТзВиртуальныеКлиенты КАК ТзВиртуальныеКлиенты ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТзЗамещающиеКлиенты КАК ТзЗамещающиеКлиенты ПО ТзЗамещающиеКлиенты.ВиртуальныйКлиент = ТзВиртуальныеКлиенты.clientcode
	|	Индексировать ПО Клиент;
	|УНИЧТОЖИТЬ ТзВиртуальныеКлиенты;
	|УНИЧТОЖИТЬ ТзЗамещающиеКлиенты;
	|";
	
	Запрос.Выполнить();
	
	Запрос.Параметры.Удалить("ТзВиртуальныеКлиенты");
	Запрос.Параметры.Удалить("ТзЗамещающиеКлиенты");
	
КонецПроцедуры // Создать_ВТ_ВиртуальныеКлиенты()

Функция Выгрузить(Знач Настройка, Знач НастройкиОбщие, Знач ПроизводительОписание)

	Перем Версия, СвойствоКаналРынка, СвойствоТорговыйПредставитель, ДополнительныеСведения;
	
	КонфигурацияКод = КонфигурацияКод();
	
	Запрос							= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц	= Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("БезНомеровТТН"						, Настройка.БезНомеровТТН);
	Запрос.УстановитьПараметр("ТипыДокументов"						, НастройкиОбщие.ТипыДокументов);
	Запрос.УстановитьПараметр("Округлять"							, НастройкиОбщие.Округлять);
	Запрос.УстановитьПараметр("СобственныйКонвертер_в_ANSI"			, НастройкиОбщие.СобственныйКонвертер_в_ANSI);
	Запрос.УстановитьПараметр("НеВыгружатьСерии"					, НастройкиОбщие.НеВыгружатьСерии);
	Запрос.УстановитьПараметр("ТорговойТочкойЯвляется"				, НастройкиОбщие.ТорговойТочкойЯвляется);
	Запрос.УстановитьПараметр("ТорговыйПредставитель"				, НастройкиОбщие.ТорговыйПредставитель);
	Запрос.УстановитьПараметр("ПеремещенияКакПродажи"				, НастройкиОбщие.ПеремещенияКакПродажи);
	Запрос.УстановитьПараметр("КлиентыБезПерсональныхДанных"		, НастройкиОбщие.КлиентыБезПерсональныхДанных);
	Запрос.УстановитьПараметр("НеОбезличиватьНаименования",
		?(НастройкиОбщие.Свойство("НеОбезличиватьНаименования")
		, НастройкиОбщие.НеОбезличиватьНаименования
		, Ложь
		)
	);
	Запрос.УстановитьПараметр("ПродажиПоЗакупочнымЦенам"			, НастройкиОбщие.ПродажиПоЗакупочнымЦенам);
	//Запрос.УстановитьПараметр("ПорогОкругленияБесплатногоТовара"	, 3); // До 3 рублей считаем бесплатным. Потом вынесу в настройки. Опция только для лотте
	Запрос.УстановитьПараметр("ВыделятьБесплатныйТовар"				, ПроизводительОписание.ВыделятьБесплатныйТовар);
	Запрос.УстановитьПараметр("ПорогОкругленияБесплатногоТовара"	, ПроизводительОписание.ПорогОкругленияБесплатногоТовара); // До 3 рублей считаем бесплатным.
	
	Запрос.УстановитьПараметр("ТорговыйПредставительПоУмолчанию"	, "ТП_НЕОПРЕДЕЛЕН");
	
	Запрос.УстановитьПараметр("ИспользоватьВнутренниеКодыХарактеристик"	, ?(НастройкиОбщие.Свойство("ИспользоватьВнутренниеКодыХарактеристик"), НастройкиОбщие.ИспользоватьВнутренниеКодыХарактеристик, Ложь));

	Запрос.УстановитьПараметр("ОтладкаОтображатьНаФормеВнутренниеКоды"	, Истина);

	Если Настройка.Свойство("ВидЦеныРозничная") Тогда
		Запрос.УстановитьПараметр("ВидЦеныРозничная", Настройка.ВидЦеныРозничная);
	КонецЕсли;

	Если НастройкиОбщие.Свойство("ВидЦеныЗакупочная") Тогда
		Запрос.УстановитьПараметр("ВидЦеныЗакупочная", НастройкиОбщие.ВидЦеныЗакупочная);
	КонецЕсли;
	
	Если НастройкиОбщие.Свойство("СвойствоКаналРынка", СвойствоКаналРынка) Тогда
		Запрос.УстановитьПараметр("СвойствоКаналРынка", СвойствоКаналРынка);
	КонецЕсли;
	
	Если	НастройкиОбщие.ТорговыйПредставитель = "ДополнительныйРеквизит"
		И	НастройкиОбщие.Свойство("СвойствоТорговыйПредставитель", СвойствоТорговыйПредставитель)
		И	ЗначениеЗаполнено(СвойствоТорговыйПредставитель)
	Тогда
	
		Запрос.УстановитьПараметр("СвойствоТорговыйПредставитель", СвойствоТорговыйПредставитель);
		
	КонецЕсли;
	
	ШаблонНастроек = ШаблонНастроек();
	
	Запрос.УстановитьПараметр("ТаблицаПересчета", ШаблонНастроек.ТаблицаПересчета.Скопировать());
	Для каждого ТаблицаПересчетаСтрокаОписание Из НастройкиОбщие.ТаблицаПересчета Цикл
	
		ЗаполнитьЗначенияСвойств(Запрос.Параметры.ТаблицаПересчета.Добавить(), ТаблицаПересчетаСтрокаОписание);
	
	КонецЦикла;
	Создать_ВТ_ТаблицаПересчета(Запрос);
	
	Если НастройкиОбщие.Свойство("ТипыФилиалов") Тогда
	
		Создать_ВТ_ТипыФилиалов(НастройкиОбщие.ТипыФилиалов, ШаблонНастроек, Запрос);
		
	КонецЕсли;
	
	Если НастройкиОбщие.Свойство("ВиртуальныеКлиенты") И НастройкиОбщие.Свойство("ЗамещающиеКлиенты") Тогда
	
		Создать_ВТ_ВиртуальныеКлиенты(Запрос, ШаблонНастроек, НастройкиОбщие.ВиртуальныеКлиенты, НастройкиОбщие.ЗамещающиеКлиенты);
	
	КонецЕсли;
	
	ТаблицаТранслита = Новый Соответствие;
	Для каждого ТаблицаТранслитаСтрокаОписание Из НастройкиОбщие.ТаблицаТранслита Цикл
		
		БукваАлфавита			= ВРег(СокрЛП(Лев(СокрЛП(ТаблицаТранслитаСтрокаОписание.БукваАлфавита), 1)));
		БукваАлфавитаТранслит	= СокрЛП(ТаблицаТранслитаСтрокаОписание.БукваАлфавитаТранслит);
		
		Если Не ЗначениеЗаполнено(БукваАлфавита) или Не ЗначениеЗаполнено(БукваАлфавитаТранслит) Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		ТаблицаТранслита.Вставить(БукваАлфавита			, БукваАлфавитаТранслит);
		ТаблицаТранслита.Вставить(НРег(БукваАлфавита)	, НРег(БукваАлфавитаТранслит));
	
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаТранслита", ТаблицаТранслита);
	
	Если ШаблонНастроек.Свойство("ДополнительныеСведения", ДополнительныеСведения) Тогда
	
		Запрос.УстановитьПараметр("ДополнительныеСведения", ДополнительныеСведения.Скопировать());
		Для каждого ДополнительныеСведенияСтрокаОписание Из НастройкиОбщие.ДополнительныеСведения Цикл
		
			ЗаполнитьЗначенияСвойств(Запрос.Параметры.ДополнительныеСведения.Добавить(), ДополнительныеСведенияСтрокаОписание);
		
		КонецЦикла;
		Создать_ВТ_ДополнительныеСведения(Запрос);
	
	КонецЕсли;
	
	Версия = Настройка.Версия;
	
	Запрос.УстановитьПараметр("ДатаНач"								, Настройка.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон"								, КонецДня(Настройка.ДатаКон));
	
	Запрос.УстановитьПараметр("manfid"								, Настройка.manfid);
	Запрос.УстановитьПараметр("НастройкаИмя"						, Настройка.НастройкаИмя);
	Запрос.УстановитьПараметр("Версия"								, Версия);
	Запрос.УстановитьПараметр("ДопустимыНулевыеКоличества"			, ПроизводительОписание.ДопустимыНулевыеКоличества);
	
	Запрос.УстановитьПараметр("НаименованиеОбезличенногоФизлица"	, ПроизводительОписание.НаименованиеОбезличенногоФизлица);
	Запрос.УстановитьПараметр("ОбезличиватьФизическихЛиц"			, ЗначениеЗаполнено(ПроизводительОписание.НаименованиеОбезличенногоФизлица));
	//Запрос.УстановитьПараметр(
	//	"ОбезличиватьФизическихЛиц"
	//	, ?(Настройка.manfid = 2288 // Bayer Crop Science
	//		, Истина
	//		, Ложь
	//	)
	//);
	
	Если НастройкиОбщие.Свойство("СвойствоЗамещающийКлиент") Тогда
	
		Запрос.УстановитьПараметр("СвойствоЗамещающийКлиент", НастройкиОбщие.СвойствоЗамещающийКлиент);
	
	КонецЕсли;
	
	КоличествоФайлов = Число(ПроизводительОписание.КоличествоФайловСписок.НайтиПоЗначению(Версия).Представление);
	
	#Область ЗапросПараметрыСкд
	
	Запрос.УстановитьПараметр("ОсновнаяОрганизация", ?(ЗначениеЗаполнено(Настройка.ОсновнаяОрганизация), Настройка.ОсновнаяОрганизация, Неопределено));
	
	СоответствиеПеременныхЗапросаОтборам = Новый Соответствие;
	
	//Т = ШаблонНастроек();
	Для каждого Колонка Из ШаблонНастроек.Настройка.Колонки Цикл
	
		ОтборИмя = Колонка.Имя;
		
		ОтборСкдОписание = ОтборСкдОписание(ОтборИмя, ШаблонНастроек);
		
		Если ОтборСкдОписание = Неопределено Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		СоответствиеПеременныхЗапросаОтборам.Вставить(ОтборСкдОписание.ИмяПеременнойЗапроса, ОтборИмя);
		
		Запрос.УстановитьПараметр(
				ОтборСкдОписание.ИмяПеременнойЗапроса
			,	СкдВыполнить(Скд(ОтборСкдОписание.Тип, Настройка[ОтборИмя]))
		);
	
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СоответствиеПеременныхЗапросаОтборам", СоответствиеПеременныхЗапросаОтборам);

	//Если Запрос.Параметры.Номенклатура = Неопределено Тогда
	//	
	//	Ошибка = Настройка.НастройкаИмя + " - Не установлен отбор товаров";
	//	
	//	СообщитьПользователю(
	//			Ошибка
	//		,,	СоответствиеПеременныхЗапросаОтборам["Номенклатура"] + ".Настройки.Отбор"
	//	);
	//	
	//	ВызватьИсключение Ошибка;
	//
	//КонецЕсли;
	
	#КонецОбласти
	
	Если Запрос.Параметры.Свойство("Скидки", ) Тогда
	
		Запрос.УстановитьПараметр("ЕстьСкидки"						, ЗначениеЗаполнено(Запрос.Параметры.Скидки));
		
	КонецЕсли;
	
	ДнейПериода = 1 + (НачалоДня(Настройка.ДатаКон) - НачалоДня(Настройка.ДатаНач)) / 3600 / 12;
	
	ДлительныеОперацииКоличество =
			1 // ВТ_Номенклатура
		+	1 // ВТ_Склады
		+	1 // ВТ_Организации
		+	1 // ВТ_ЗакупочныеЦены
		+	1 // ВТ_Продажи
		+	1 // ВТ_Скидки
		
		+	КоличествоФайлов - 1 // за минусом остатков, они отдельно
		+	ДнейПериода // остатки (по количеству дней периода)
	;
	
	Запрос.УстановитьПараметр("ДлительныеОперацииКоличество"		, ДлительныеОперацииКоличество);
	Запрос.УстановитьПараметр("ДлительныеОперацииТекущаяОперация"	, 0);
	Запрос.УстановитьПараметр("БСП_СтаройВерсии"					, БСП_СтаройВерсии());
	
	Запрос.УстановитьПараметр("ИспользоватьКодУпаковкиВместоКодаШтуки", ПроизводительОписание.ИспользоватьКодУпаковкиВместоКодаШтуки); // Меняем "ru = 1" на "ru = 0" для некоторых производителей
	
	СоздатьВременныеТаблицы(Запрос);
	
	МассивОписанийТаблиц = Новый Массив;
	
	#Область Производитель_6009
	// Ekoprom
	
	Если Запрос.Параметры.manfid = 6009 Тогда
	
		eprest = eprest(Запрос);
		
		МассивОписанийТаблицДобавить(МассивОписанийТаблиц, "epcatal"	, СообщитьПрогресс(Запрос.Параметры, "Товары (epcatal)")					, epcatal(Запрос));
		МассивОписанийТаблицДобавить(МассивОписанийТаблиц, "epclient"	, СообщитьПрогресс(Запрос.Параметры, "Клиенты (epclient)")					, epclient(Запрос));
		МассивОписанийТаблицДобавить(МассивОписанийТаблиц, "epsr"		, СообщитьПрогресс(Запрос.Параметры, "Торговые представители (epsr)")		, epsr(Запрос));
		МассивОписанийТаблицДобавить(МассивОписанийТаблиц, "epwh"		, СообщитьПрогресс(Запрос.Параметры, "Филиалы (epwh)")						, epwh(Запрос));
		МассивОписанийТаблицДобавить(МассивОписанийТаблиц, "epsales"	, СообщитьПрогресс(Запрос.Параметры, "Документы (epsales)")					, epsales(Запрос));
		МассивОписанийТаблицДобавить(МассивОписанийТаблиц, "eprest"		, "Остатки (eprest)"														, eprest);
		
	КонецЕсли;
	
	#КонецОбласти
	
	ВыгрузкаПредставление = "[" + Запрос.Параметры.manfid + "] " + ПроизводительОписание.Наименование + ?(Запрос.Параметры.Версия, ", v." + Запрос.Параметры.Версия, "");
	
	КоличествоФайловФактическое = МассивОписанийТаблиц.Количество();
	Если Не КоличествоФайловФактическое Тогда
	
		ВызватьИсключение "Выгрузка по производителю """ + ВыгрузкаПредставление + """ пока не реализована!";
		
	ИначеЕсли КоличествоФайловФактическое <> КоличествоФайлов Тогда
		
		ВызватьИсключение "Выгрузка по производителю """ + ВыгрузкаПредставление + """ сформировано " + КоличествоФайловФактическое + " файлов, а требуется " + КоличествоФайлов + "!";
		
	КонецЕсли;
	
	Кодировка = КодировкаТекста(НастройкиОбщие);
	
	Для х = 0 По МассивОписанийТаблиц.ВГраница() Цикл
		ОписаниеТаблицыСтруктура = МассивОписанийТаблиц[х];
		
		ПрогрессВыполнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 из %2 %3.txt"
			,	х + 1
			,	МассивОписанийТаблиц.Количество()
			,	ОписаниеТаблицыСтруктура.Имя
		);
		
		#Область Производитель_Не_8052
		// Не Coca Cola
		
		Если Запрос.Параметры.manfid <> 8052 Тогда
		
			ФайлТекст = ТЗ_в_Текст(ОписаниеТаблицыСтруктура.ТЗ,	ПрогрессВыполнения,	Запрос.Параметры);
		
		КонецЕсли;
		
		#КонецОбласти
		
		ОписаниеТаблицыСтруктура.Вставить("ФайлДвоичныеДанные",
			ПолучитьДвоичныеДанныеИзСтрокиЕх(ФайлТекст, Кодировка, Запрос.Параметры.СобственныйКонвертер_в_ANSI)
		);
	
	КонецЦикла;
	
	Возврат МассивОписанийТаблиц;

КонецФункции // Выгрузить()

Функция ПолучитьДанные(ПараметрыВыгрузки) Экспорт
	
	РезультатВыгрузкиМассив = Новый Массив;
	
	ВсеПроизводители = ВсеПроизводители(Истина);
	
	Для каждого Настройка Из ПараметрыВыгрузки.Настройки Цикл
		
		РезультатВыгрузкиОписание = Новый Структура;
		
		РезультатВыгрузкиОписание.Вставить("Настройка"		, Настройка);
		РезультатВыгрузкиОписание.Вставить("НастройкиОбщие"	, ПараметрыВыгрузки.НастройкиОбщие);
		
		ПроизводительОписание = ВсеПроизводители[Настройка.manfid];
		
		Попытка
			
			Данные = Выгрузить(Настройка, ПараметрыВыгрузки.НастройкиОбщие, ПроизводительОписание);
			
		Исключение
			
			Данные = Неопределено;
			
			РезультатВыгрузкиОписание.Вставить("ОписаниеОшибки", ОписаниеОшибки());
			
			ЗаписьЖурналаРегистрацииСервер(
					УровеньЖурналаРегистрации.Ошибка
				,,,	ОписаниеОшибки()
				,	РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
				,	ПроизводительОписание.Наименование
			);

		КонецПопытки;
		
		РезультатВыгрузкиОписание.Вставить("Данные", Данные);
	
		РезультатВыгрузкиМассив.Добавить(РезультатВыгрузкиОписание);
		
	КонецЦикла;
	
	Возврат РезультатВыгрузкиМассив;
	
КонецФункции // ПолучитьДанные()

Функция ПолучитьДанныеВФоне(ПараметрыВыгрузки, АдресХранилища) Экспорт

	РезультатВыгрузкиМассив = ПолучитьДанные(ПараметрыВыгрузки);
	
	ПоместитьВоВременноеХранилище(РезультатВыгрузкиМассив, АдресХранилища);

КонецФункции // ПолучитьДанныеВФоне()

Функция ПроверитьВозможностьВыгрузкиНаСервере(Знач ПараметрыВыгрузки) Экспорт

	Перем РежимРаботыВОблаке;

	ВсеПроизводители	= ВсеПроизводители(Истина);
	
	НастройкиОбщие		= ПараметрыВыгрузки.НастройкиОбщие;
	
	РежимРаботыВОблаке	= РежимРаботыВОблаке();
	
	Для х = -ПараметрыВыгрузки.Настройки.ВГраница() По 0 Цикл
	
		Настройка = ПараметрыВыгрузки.Настройки[-х];
		
		Если Не Настройка.НастройкаИспользуется Тогда
		
			ПараметрыВыгрузки.Настройки.Удалить(-х);
			Продолжить;
		
		КонецЕсли;
		
		ПроизводительОписание = ВсеПроизводители[Настройка.manfid];
		
		Если Не Настройка.Свойство("Транспорты") Тогда
		
			Настройка.Вставить("Транспорты", Транспорт_ВсеТранспорты(Настройка, НастройкиОбщие, ПроизводительОписание, Истина));
		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Настройка.Транспорты) Тогда
			
			Сообщение = "Каталог выгрузки " + ?(ПустаяСтрока(Настройка.КаталогВыгрузки), "не указан", """" + Настройка.КаталогВыгрузки + """ недоступен") + ". Параметры доступа к FTP / HTTP не указаны или доступ запрещен. Выгрузка не будет выполнена";
			
			ЗаписьЖурналаРегистрацииСервер(
					УровеньЖурналаРегистрации.Ошибка
				,,,	Сообщение
				,	РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
				,	ПроизводительОписание.Наименование
			);
			
			ПараметрыВыгрузки.Настройки.Удалить(-х);
		
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ПараметрыВыгрузки.Настройки.Количество()
	
КонецФункции // ПроверитьВозможностьВыгрузкиНаСервере()

#КонецОбласти

#Область Транспорт

Функция Транспорт_Добавить(Транспорты, Знач ТранспортИмя, Знач Настройка, Знач НастройкиОбщие, Знач ПроизводительОписание, Знач ПроверятьДоступность = Ложь) Экспорт

	Если ТипЗнч(Транспорты) <> Тип("Массив") Тогда
	
		Транспорты = Новый Массив;
	
	КонецЕсли;
	
	ПроизводительИмя = ПроизводительОписание.Наименование;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПроизводительИмя"	, ПроизводительИмя);
	ДополнительныеПараметры.Вставить("НастройкаИмя"		, Настройка.НастройкаИмя);
	
	ТранспортОписание = Новый Структура;
	ТранспортОписание.Вставить("ТранспортИмя"			, СокрЛП(ВРег(ТранспортИмя)));
	ТранспортОписание.Вставить("ФайлыДляОтправкиМассив"	, Новый Массив);
	ТранспортОписание.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	ТранспортОписание.Вставить("Проверен"				, Ложь);
	
	Если ТранспортОписание.ТранспортИмя = "ФАЙЛ" Тогда
	
		ТранспортОписание.Вставить("КаталогВыгрузки", СокрЛП(Настройка.КаталогВыгрузки));
		
		Если	Не ЗначениеЗаполнено(ТранспортОписание.КаталогВыгрузки)
			Или ПроверятьДоступность И Не КаталогВыгрузкиДоступен(ТранспортОписание.КаталогВыгрузки)
		Тогда
		
			ТранспортОписание = Неопределено;
		
		КонецЕсли;
	
	ИначеЕсли ТранспортОписание.ТранспортИмя = "ФТП" Тогда
		
		Если Не Настройка.ФТП_Использовать Тогда
		
			ТранспортОписание = Неопределено;
			
		Иначе	
		
			ТранспортОписание.Вставить("ФТП_Сервер"		, СокрЛП(ПроизводительОписание.ФТП_Сервер));
			ТранспортОписание.Вставить("ФТП_Порт"		, ПроизводительОписание.ФТП_Порт);
			ТранспортОписание.Вставить("ФТП_Логин"		, СокрЛП(Настройка.ФТП_Логин));
			ТранспортОписание.Вставить("ФТП_Пароль"		, СокрЛП(Настройка.ФТП_Пароль));
			ТранспортОписание.Вставить("ФТП_Каталог"	, СокрЛП(ПроизводительОписание.ФТП_Каталог));
			
			Если ПроверятьДоступность Тогда
			
				Попытка
				
					Фтп(
						ТранспортОписание.ФТП_Сервер
						, ТранспортОписание.ФТП_Порт
						, ТранспортОписание.ФТП_Логин
						, ТранспортОписание.ФТП_Пароль
						, ТранспортОписание.ФТП_Каталог
						, 5
					);
				
				Исключение
					
					ЗаписьЖурналаРегистрацииСервер(
							УровеньЖурналаРегистрации.Ошибка
						,,,	"FTP: " + ОписаниеОшибки()
						,	РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
						,	ПроизводительИмя
					);
					
					ТранспортОписание = Неопределено;
				
				КонецПопытки;
			
			КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли ТранспортОписание.ТранспортИмя = "HTTP" Тогда
		
		ТранспортОписание.Вставить("HTTP_Сервер"	, СокрЛП(ПроизводительОписание.HTTP_Сервер));
		ТранспортОписание.Вставить("HTTP_ПартнерИмя", СокрЛП(Настройка.HTTP_ПартнерИмя));
		
		Если	Не ЗначениеЗаполнено(ТранспортОписание.HTTP_Сервер)
			Или Не ЗначениеЗаполнено(ТранспортОписание.HTTP_ПартнерИмя)
			Или Не НастройкиОбщие.HTTP_Использовать
			Или Настройка.HTTP_Использовать = 0
			
			Тогда
		
			ТранспортОписание = Неопределено;
			
		Иначе
			
			HTTP_API_KEY = ?(Настройка.HTTP_Использовать = 1, Настройка.HTTP_API_KEY, НастройкиОбщие.HTTP_API_KEY);
			
			Если Не ЗначениеЗаполнено(HTTP_API_KEY) Тогда
			
				ТранспортОписание = Неопределено;
				
			Иначе
				
				ТранспортОписание.Вставить("HTTP_API_KEY", СокрЛП(HTTP_API_KEY));
				
			КонецЕсли;
		
		КонецЕсли;
		
		Если ТранспортОписание <> Неопределено И ПроверятьДоступность Тогда
		
			Попытка
				
				//partners = HTTP_Сервер_МассивПартнеров(ТранспортОписание.HTTP_Сервер, ТранспортОписание.HTTP_API_KEY, Настройка.manfid);
				//
				//Для х = -partners.ВГраница() По 0 Цикл
				//
				//	Если partners[-х].PartnerName <> ТранспортОписание.HTTP_ПартнерИмя Тогда
				//	
				//		partners.Удалить(-х);
				//	
				//	КонецЕсли;
				//
				//КонецЦикла;
				
				//Если Не ЗначениеЗаполнено(partners) Тогда
				Если Не HTTP_Сервер_Доступен(ТранспортОписание.HTTP_Сервер, ТранспортОписание.HTTP_API_KEY) Тогда
				
					ТранспортОписание = Неопределено;
					
					ЗаписьЖурналаРегистрацииСервер(
							УровеньЖурналаРегистрации.Ошибка
						//,,,	"HTTP: Имя партнера указано неправильно: """ + ТранспортОписание.HTTP_ПартнерИмя + """"
						,,,	"HTTP сервер недоступен"
						,	РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
						,	ПроизводительИмя
					);
				
				КонецЕсли;
				
			Исключение
				
				ЗаписьЖурналаРегистрацииСервер(
						УровеньЖурналаРегистрации.Ошибка
					,,,	"HTTP сервер недоступен: " + ОписаниеОшибки()
					,	РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
					,	ПроизводительИмя
				);
				
				ТранспортОписание = Неопределено;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТранспортОписание <> Неопределено Тогда
	
		//Транспорты.Добавить(Новый ФиксированнаяСтруктура(ТранспортОписание));
		ТранспортОписание.Проверен = Истина;
		
		Транспорты.Добавить(ТранспортОписание);
	
	КонецЕсли;
	
	Возврат ТранспортОписание;

КонецФункции // Транспорт_Добавить()

Функция Транспорт_ВсеТранспорты(Знач Настройка, Знач НастройкиОбщие, Знач ПроизводительОписание, Знач ПроверятьДоступность = Ложь)

	Перем Транспорты;
	
	Транспорты = Новый Массив;
	
	Транспорт_Добавить(Транспорты, "Файл"	, Настройка, НастройкиОбщие, ПроизводительОписание, ПроверятьДоступность);
	Транспорт_Добавить(Транспорты, "ФТП"	, Настройка, НастройкиОбщие, ПроизводительОписание, ПроверятьДоступность);
	Транспорт_Добавить(Транспорты, "HTTP"	, Настройка, НастройкиОбщие, ПроизводительОписание, ПроверятьДоступность);
	
	Возврат Транспорты;

КонецФункции // Транспорт_ВсеТранспорты()

Процедура Транспорт_ОтправитьФайлы(Знач Транспорты) Экспорт

	Для каждого ТранспортОписание Из Транспорты Цикл
		
		ДополнительныеПараметры	= ТранспортОписание.ДополнительныеПараметры;
		НастройкаИмя			= ДополнительныеПараметры.НастройкаИмя;
		ПроизводительИмя		= ДополнительныеПараметры.ПроизводительИмя;
		ФайлыДляОтправкиМассив	= ТранспортОписание.ФайлыДляОтправкиМассив;
		
		ТранспортИмя			= ТранспортОписание.ТранспортИмя;
		
		Если ТранспортИмя = "ФАЙЛ" Тогда
			
			#Область НеРежимРаботыВОблаке
			
			КаталогВыгрузки = ТранспортОписание.КаталогВыгрузки;
			
			Для каждого ФайлОписание Из ФайлыДляОтправкиМассив Цикл
				
				ФайлДвоичныеДанные		= ФайлОписание.ФайлДвоичныеДанные;
				ФайлИмя					= ФайлОписание.ФайлИмя;
				//ФайлКоличествоСтрок		= ФайлОписание.КоличествоСтрок;
				//ФайлКоличествоСтрок		= ФайлОписание.ФайлКоличествоСтрок;
				ПутьФайла				= КаталогВыгрузки + ФайлОписание.ФайлИмя;
			
				Попытка
				
					ФайлДвоичныеДанные.Записать(ПутьФайла);
					
					//ЗаписьЖурналаРегистрацииСервер(
					//		УровеньЖурналаРегистрации.Информация
					//	,,,	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					//			"%1. Файл создан %2, строк: %3"
					//			, НастройкаИмя				// 1
					//			, ПутьФайла					// 2
					//			, ФайлКоличествоСтрок		// 3
					//		)
					//	,	РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
					//	,	ПроизводительИмя
					//);
				
					ЗаписьЖурналаРегистрацииСервер(
							УровеньЖурналаРегистрации.Информация
						,,,	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								"%1. Файл создан %2, %3"
								, НастройкаИмя							// 1
								, ПутьФайла								// 2
								, ФайлОписание.ФайлПредставление		// 3
							)
						,	РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
						,	ПроизводительИмя
					);
				
				Исключение
					
					ЗаписьЖурналаРегистрацииСервер(
							УровеньЖурналаРегистрации.Ошибка
						,,,	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								"%1. Файл НЕ БЫЛ создан %2, %3:
								|%4"
								, НастройкаИмя											// 1
								, ПутьФайла												// 2
								, ФайлОписание.ФайлПредставление						// 3
								, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())		// 4
							)
						,	РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
						,	ПроизводительИмя
					);
					
					Прервать;
				
				КонецПопытки;
				
			КонецЦикла;
			
			#КонецОбласти
			
		ИначеЕсли ТранспортИмя = "ФТП" Тогда
			
			Попытка
			
				ФТП = Фтп(ТранспортОписание.ФТП_Сервер, ТранспортОписание.ФТП_Порт, ТранспортОписание.ФТП_Логин, ТранспортОписание.ФТП_Пароль, ТранспортОписание.ФТП_Каталог);
			
			Исключение
				
				ЗаписьЖурналаРегистрацииСервер(
						УровеньЖурналаРегистрации.Ошибка
					,,,	"При подключении к FTP произошла ошибка: " + ОписаниеОшибки()
					,	РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
					,	ПроизводительИмя
				);
				
				Продолжить;
				
			КонецПопытки;
			
			Для каждого ФайлОписание Из ФайлыДляОтправкиМассив Цикл
				
				Попытка
				
					ФайлДвоичныеДанные		= ФайлОписание.ФайлДвоичныеДанные;
					ФайлИмя					= ФайлОписание.ФайлИмя;
					//ФайлКоличествоСтрок		= ФайлОписание.КоличествоСтрок;
					//ФайлКоличествоСтрок		= ФайлОписание.ФайлКоличествоСтрок;
				
					ПотокВПамяти = Новый ПотокВПамяти();
					ЗаписьДанных = Новый ЗаписьДанных(ПотокВПамяти);
					
					ЗаписьДанных.Записать(ФайлДвоичныеДанные);
					ЗаписьДанных.Закрыть();
					ПотокВПамяти.Перейти(0, ПозицияВПотоке.Начало);
					
					ФТП.Записать(ФайлИмя, ПотокВПамяти);
					ПотокВПамяти.Закрыть();
					
					//ЗаписьЖурналаРегистрацииСервер(
					//		УровеньЖурналаРегистрации.Информация
					//	,,,	"Файл отправлен на FTP: " + ФайлИмя + ", строк: " + ФайлКоличествоСтрок
					//	,	РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
					//	,	ПроизводительИмя
					//);
					
					ЗаписьЖурналаРегистрацииСервер(
							УровеньЖурналаРегистрации.Информация
						,,,	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								"%1. Файл отправлен на FTP: %2, %3"
								, НастройкаИмя						// 1
								, ФайлИмя							// 2
								, ФайлОписание.ФайлПредставление	// 3
							)
						,	РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
						,	ПроизводительИмя
					);
				
				Исключение
					
					//ЗаписьЖурналаРегистрацииСервер(
					//		УровеньЖурналаРегистрации.Ошибка
					//	,,,	"Файл НЕ БЫЛ отправлен на FTP: " + ФайлИмя + ", строк: " + ФайлКоличествоСтрок + " " + ОписаниеОшибки()
					//	,	РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
					//	,	ПроизводительИмя
					//);
					
					ЗаписьЖурналаРегистрацииСервер(
							УровеньЖурналаРегистрации.Информация
						,,,	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								"%1. Файл НЕ БЫЛ отправлен на FTP: %2, %3 %4"
								, НастройкаИмя						// 1
								, ФайлИмя							// 2
								, ФайлОписание.ФайлПредставление	// 3
								, ОписаниеОшибки()					// 4
							)
						,	РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
						,	ПроизводительИмя
					);
					
					Прервать;
				
				КонецПопытки;
				
			КонецЦикла;
			
		ИначеЕсли ТранспортИмя = "HTTP" Тогда
			
			Попытка
				
				ФайлыПредставление = Новый Массив;
				Для каждого ФайлОписание Из ФайлыДляОтправкиМассив Цикл
					
					ФайлыПредставление.Добавить(ФайлОписание.ФайлИмя + " " + ФайлОписание.ФайлПредставление);
					
				КонецЦикла;
			
				СообщениеСервера = HTTP_Сервер_ОтправитьФайлы(
					ТранспортОписание.HTTP_ПартнерИмя
					, ТранспортОписание.HTTP_Сервер
					, ТранспортОписание.HTTP_API_KEY
					, ФайлыДляОтправкиМассив
				);
				
				ЗаписьЖурналаРегистрацииСервер(
						УровеньЖурналаРегистрации.Информация
					,,,	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"%1. Отправка файлов {%2} на %3 (%4) выполнено успешно: %5"
							, НастройкаИмя								// 1
							, СтрСоединитьЕх(ФайлыПредставление, "; ")	// 2
							, ТранспортОписание.HTTP_Сервер				// 3
							, ТранспортОписание.HTTP_ПартнерИмя			// 4
							, СообщениеСервера							// 5
							)
					,	РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
					,	ПроизводительИмя
				);
			
			Исключение
				
				ЗаписьЖурналаРегистрацииСервер(
						УровеньЖурналаРегистрации.Ошибка
					,,,	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"%1. Отправка файлов {%2} на %3 (%4) завершилась с ошибкой: %5"
							, НастройкаИмя										// 1
							, СтрСоединитьЕх(ФайлыПредставление, "; ")			// 2
							, ТранспортОписание.HTTP_Сервер						// 3
							, ТранспортОписание.HTTP_ПартнерИмя					// 4
							, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())	// 5
							)
					,	РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
					,	ПроизводительИмя
				);
			
			КонецПопытки;

		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // Транспорт_ОтправитьФайлы()

#КонецОбласти

#Область Автообмен

Функция АвтообменНаСервере(Знач ПараметрыВыгрузки) Экспорт

	Если Не ПроверитьВозможностьВыгрузкиНаСервере(ПараметрыВыгрузки) Тогда
	
		Возврат Неопределено;
	
	КонецЕсли;
	
	НастройкиОбщие			= ПараметрыВыгрузки.НастройкиОбщие;
	
	РезультатВыгрузкиМассив	= ПолучитьДанные(ПараметрыВыгрузки);
	
	ВсеПроизводители		= ВсеПроизводители(Истина);
		
	Попытка
		
		Для каждого РезультатВыгрузкиОписание Из РезультатВыгрузкиМассив Цикл
			
			Если РезультатВыгрузкиОписание = Неопределено Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			МассивОписанийТаблиц = РезультатВыгрузкиОписание.Данные;
			
			Если МассивОписанийТаблиц = Неопределено Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			Настройка				= РезультатВыгрузкиОписание.Настройка;
			
			//КаталогВыгрузкиДоступен	= Не ПустаяСтрока(Настройка.КаталогВыгрузки);
			
			ПроизводительОписание	= ВсеПроизводители[Настройка.manfid];
			
			//ДополнительныеПараметры = Новый Структура;
			//ДополнительныеПараметры.Вставить("Настройка"				, Настройка);
			//ДополнительныеПараметры.Вставить("НастройкиОбщие"			, ПараметрыВыгрузки.НастройкиОбщие);
			//ДополнительныеПараметры.Вставить("ПроизводительОписание"	, ПроизводительОписание);
			
			ФайлыДляОтправкиМассив = Новый Массив;
			
			Транспорты = Настройка.Транспорты;
			
			//Если Не ЗначениеЗаполнено(Транспорты) Тогда
			//
			//	Продолжить;
			//
			//КонецЕсли;
			
			Для х = 0 По МассивОписанийТаблиц.ВГраница() Цикл
			
				ОписаниеТаблицыСтруктура = МассивОписанийТаблиц[х];
				
				ФайлИмя					= ОписаниеТаблицыСтруктура.Имя + ".txt";
				ТЗ						= ОписаниеТаблицыСтруктура.ТЗ;
				ФайлДвоичныеДанные		= ОписаниеТаблицыСтруктура.ФайлДвоичныеДанные;
				
				ФайлОписание = Новый Структура;
				ФайлОписание.Вставить("ФайлДвоичныеДанные"		, ФайлДвоичныеДанные);
				ФайлОписание.Вставить("ФайлИмя"					, ФайлИмя);
				//ФайлОписание.Вставить("КоличествоСтрок"		, ТЗ.Количество());
				ФайлОписание.Вставить("ФайлКоличествоСтрок"		, ТЗ.Количество());
				
				ФайлОписаниеУстановитьПредставление(ФайлОписание);
				
				ФайлыДляОтправкиМассив.Добавить(ФайлОписание);
					
			КонецЦикла;
			
			Для каждого ТранспортОписание Из Транспорты Цикл
			
				ТранспортОписание.ФайлыДляОтправкиМассив = ФайлыДляОтправкиМассив;
			
			КонецЦикла;
			
			Транспорт_ОтправитьФайлы(Транспорты);
			
		КонецЦикла;
		
	Исключение

		ЗаписьЖурналаРегистрацииСервер(
				УровеньЖурналаРегистрации.Ошибка
			,,,	ОписаниеОшибки()
			,	РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
			,	ПроизводительОписание.Наименование
		);
		
	КонецПопытки;

	Возврат РезультатВыгрузкиМассив;

КонецФункции // АвтообменНаСервере()

Процедура АвтообменНаСервереВФоне(ПараметрыВыгрузки, АдресХранилища) Экспорт

	РезультатВыгрузкиМассив = АвтообменНаСервере(ПараметрыВыгрузки);
	
	ПоместитьВоВременноеХранилище(РезультатВыгрузкиМассив, АдресХранилища);

КонецПроцедуры // АвтообменНаСервереВФоне()

#КонецОбласти

#Область Скд

Функция ОтборСкдОписание(Знач ОтборИмя, Знач ШаблонНастроек) Экспорт

	НомПоз = СтрНайтиЕх(ОтборИмя, "_");
	Если СтрНайтиЕх(ОтборИмя, "Отбор") <> 1
		или Не НомПоз
	Тогда
	
		Возврат Неопределено;
	
	КонецЕсли;
	
	Заголовок = ""; Разд = "";
	Типы = Новый Массив;
	Для каждого Тип Из СтрРазделитьЕх(Сред(ОтборИмя, НомПоз + 1), "__", Ложь) Цикл
		
		Тип = Тип("СправочникСсылка." + Тип);
		Типы.Добавить(Тип);
		
		Заголовок = Заголовок + Разд + Метаданные.НайтиПоТипу(Тип).ПредставлениеОбъекта;
		Разд = ", ";
	
	КонецЦикла;
	
	ОтборСкдОписание = Новый Структура;
	ОтборСкдОписание.Вставить("Тип"						, Типы);
	ОтборСкдОписание.Вставить("ОтборИмя"				, ОтборИмя);
	ОтборСкдОписание.Вставить("Имя"						, Лев(ОтборИмя, НомПоз - 1));
	ОтборСкдОписание.Вставить("ИмяПеременнойЗапроса"	, Сред(ОтборСкдОписание.Имя, СтрДлина("Отбор") + 1));

	//Т = ШаблонНастроек().Настройка;
	Т = ШаблонНастроек.Настройка;
	
	Колонка = Т.Колонки.Найти(ОтборИмя);
	Если Колонка <> Неопределено и ЗначениеЗаполнено(Колонка.Заголовок) Тогда
	
		Заголовок = Колонка.Заголовок;
	
	КонецЕсли;
	
	ОтборСкдОписание.Вставить("Заголовок", Заголовок);
	
	Возврат ОтборСкдОписание;
КонецФункции // ОтборСкдОписание()

Функция ПрисоединяемыеСвойства(Знач СправочникТип)
	
	Попытка
	
	Исключение
	
	КонецПопытки;
	
	Возврат "";

КонецФункции // ПрисоединяемыеСвойства()

Функция Скд(Знач СправочникТипы, Знач Отборы = Неопределено, Знач Заголовок = Неопределено) Экспорт

	Перем Скд;
	
	Если Отборы = Неопределено Тогда
	
		Отборы = Новый Массив;
	
	КонецЕсли;
	
	ЗапросТекст		= ""; Разд = "";
	СоставнойТип	= СправочникТипы.Количество() > 1;
	
	Для х = 0 По СправочникТипы.ВГраница() Цикл
	
		СправочникТип = СправочникТипы[х];
	
		СправочникМетаданные	= Метаданные.НайтиПоТипу(СправочникТип);
		СправочникТипИмя		= СправочникМетаданные.Имя;
		Иерархический			= 
			СправочникМетаданные.Иерархический
			и СправочникМетаданные.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов
		;

		ЗапросТекст = ЗапросТекст + Разд + 
			"ВЫБРАТЬ
			|	Справочник.Ссылка КАК Ссылка
			|	" + ?(СоставнойТип, ",ТИПЗНАЧЕНИЯ(Справочник.Ссылка) КАК ВидСправочника", "")
			+ ?(х, "", "
			|{ВЫБРАТЬ
			|	Ссылка.*
			|	" + ?(СоставнойТип, ",ВидСправочника", "") + "}
			|") + "
			|ИЗ
			|	Справочник." + СправочникТипИмя + " КАК Справочник
			|ГДЕ
			|	НЕ Справочник.ПометкаУдаления
			|{ГДЕ
			|	Справочник.Ссылка.*
			|	" + ?(СоставнойТип, ",ТИПЗНАЧЕНИЯ(Справочник.Ссылка) КАК ВидСправочника", "") + "}
			| " + ПрисоединяемыеСвойства(СправочникТип)
		;
		
		Разд = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
			
	КонецЦикла;
	
	Скд = Новый СхемаКомпоновкиДанных;
	
	Скд_ИсточникДанных = Скд.ИсточникиДанных.Добавить();
	Скд_ИсточникДанных.Имя					= "ИсточникДанных";
	Скд_ИсточникДанных.ТипИсточникаДанных	= "Local";
	
	СкдНаборДанных = Скд.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	СкдНаборДанных.Имя							= "Выборка";
	СкдНаборДанных.ИсточникДанных				= Скд_ИсточникДанных.Имя;
	СкдНаборДанных.АвтоЗаполнениеДоступныхПолей	= Истина;
	СкдНаборДанных.Запрос						= ЗапросТекст;
	
	СкдНаборДанных_Поля_Поле = СкдНаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	СкдНаборДанных_Поля_Поле.Поле			= "Ссылка";
	СкдНаборДанных_Поля_Поле.ПутьКДанным	= "Ссылка";
	СкдНаборДанных_Поля_Поле.Заголовок		= ?(ЗначениеЗаполнено(Заголовок), Заголовок, СправочникМетаданные.ПредставлениеОбъекта);
	
	Если СоставнойТип Тогда
	
		СкдНаборДанных_Поля_Поле = СкдНаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		СкдНаборДанных_Поля_Поле.Поле			= "ВидСправочника";
		СкдНаборДанных_Поля_Поле.ПутьКДанным	= "ВидСправочника";
		СкдНаборДанных_Поля_Поле.Заголовок		= "Вид справочника";
	
	КонецЕсли;
	
	СкдВариантНастроек = Скд.ВариантыНастроек.Добавить();
	СкдВариантНастроек.Имя = "Основной";
	
	СкдВариантНастроек_Выбор = СкдВариантНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	СкдВариантНастроек_Выбор.Поле			= Новый ПолеКомпоновкиДанных("Ссылка");
	СкдВариантНастроек_Выбор.Использование	= Истина;
	
	СкдВариантНастроек_Структура = СкдВариантНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	СкдВариантНастроек_Структура_Выбор = СкдВариантНастроек_Структура.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	СкдВариантНастроек_Структура_Выбор.Поле				= Новый ПолеКомпоновкиДанных("Ссылка");
	СкдВариантНастроек_Структура_Выбор.Использование	= Истина;
	
	СкдВариантНастроек_Структура_Группировка = СкдВариантНастроек_Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	СкдВариантНастроек_Структура_Группировка.Поле			= Новый ПолеКомпоновкиДанных("Ссылка");
	СкдВариантНастроек_Структура_Группировка.Использование	= Истина;
	СкдВариантНастроек_Структура_Группировка.ТипГруппировки	= ТипГруппировкиКомпоновкиДанных.Элементы;
	
	ОтборУстановлен = МассивВОтбор(СкдВариантНастроек.Настройки.Отбор.Элементы, Отборы);
	СкдВариантНастроек.Настройки.ДополнительныеСвойства.Вставить("ОтборУстановлен", ОтборУстановлен);
	
	Возврат Скд;

КонецФункции // Скд()

Функция СкдВыполнить(Знач Скд) Экспорт

	СкдНастройки = Скд.ВариантыНастроек.Основной.Настройки;
	
	Если Не СкдНастройки.ДополнительныеСвойства.ОтборУстановлен Тогда
	
		Возврат Неопределено;
	
	КонецЕсли;
	
	КомпоновщикМакета	= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки		= КомпоновщикМакета.Выполнить(Скд, СкдНастройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ТЗ = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	Возврат ТЗ.ВыгрузитьКолонку("Ссылка");
	
КонецФункции // СкдВыполнить()

Функция МассивВОтбор(Знач ОтборЭлементы, Знач ОтборМассив, Знач ОтборУстановлен = Ложь) Экспорт
	Если Не ОтборМассив.Количество() Тогда
	
		ОтборМассив = ЗначениеВМассиве(
			Новый Структура("Тип,ЛевоеЗначение,Использование,ВидСравнения"
			, Тип("ЭлементОтбораКомпоновкиДанных")
			, Новый ПолеКомпоновкиДанных("Ссылка")
			, Ложь
			, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
			)
		);
		//Возврат ОтборУстановлен;
	
	КонецЕсли;
	
	ОтборЭлементы.Очистить();
	
	Для каждого ОтборСтруктура Из ОтборМассив Цикл
	
		ОтборЭлемент = ОтборЭлементы.Добавить(ОтборСтруктура.Тип);
		
		Если ОтборСтруктура.Тип = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		
			ЗаполнитьЗначенияСвойств(ОтборЭлемент, ОтборСтруктура, , "Элементы");
			
			Если МассивВОтбор(ОтборЭлемент.Элементы, ОтборСтруктура.Элементы) Тогда
			
				Если ОтборСтруктура.Использование Тогда
				
					ОтборУстановлен = Истина;
				
				КонецЕсли;
			
			КонецЕсли;
			
		Иначе
			
			Если ОтборСтруктура.Использование Тогда
			
				ОтборУстановлен = Истина;
			
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ОтборЭлемент, ОтборСтруктура);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтборУстановлен;
КонецФункции // МассивВОтбор()

Функция ОтборВМассив(Знач ОтборЭлементы, Знач ОтборМассив = Неопределено) Экспорт

	Если ОтборМассив = Неопределено Тогда
	
		ОтборМассив = Новый Массив;
	
	КонецЕсли;
	
	Для каждого Элемент Из ОтборЭлементы Цикл
		
		ОтборСтруктура = Новый Структура;
		ОтборСтруктура.Вставить("Использование"	, Элемент.Использование);
		ОтборСтруктура.Вставить("Тип"			, ТипЗнч(Элемент));
		ОтборМассив.Добавить(ОтборСтруктура);
		
		Если ОтборСтруктура.Тип = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		
			ОтборСтруктура.Вставить("ЛевоеЗначение"	, Элемент.ЛевоеЗначение);
			ОтборСтруктура.Вставить("ВидСравнения"	, Элемент.ВидСравнения);
			ОтборСтруктура.Вставить("ПравоеЗначение", Элемент.ПравоеЗначение);
			
		Иначе
			
			ОтборСтруктура.Вставить("ТипГруппы"	, Элемент.ТипГруппы);
			ОтборСтруктура.Вставить("Элементы"	, Новый Массив);
			
			ОтборВМассив(Элемент.Элементы, ОтборСтруктура.Элементы);
		КонецЕсли;
	
	КонецЦикла;

	Возврат ОтборМассив;
КонецФункции // ОтборВМассив()

Процедура ВосстановитьОтборСкдИзСтаройНастройки(Знач ОтборМассив, Знач СтарыйПараметрИмя, Знач ПараметрыВыгрузкиСохраненные)
	Перем СтарыйПараметрСписок;
	
	ДопустимыеТипы = Новый Массив;
	ДопустимыеТипы.Добавить(Тип("СписокЗначений"));
	ДопустимыеТипы.Добавить(Тип("Массив"));
	ОТ = Новый ОписаниеТипов(ДопустимыеТипы);
	
	Если Не ОтборМассив.Количество()
		и ПараметрыВыгрузкиСохраненные.Свойство(СтарыйПараметрИмя, СтарыйПараметрСписок)
		и ЗначениеЗаполнено(ОТ.ПривестиЗначение(СтарыйПараметрСписок))
	Тогда
	
		Если ТипЗнч(СтарыйПараметрСписок) = Тип("Массив") Тогда
		
			Для каждого ОтборОписание Из СтарыйПараметрСписок Цикл
			
				ОтборМассив.Добавить(ОтборОписание);
			
			КонецЦикла;
			
		Иначе	
			
			ОтборМассив.Добавить(
				Новый Структура("Тип,ЛевоеЗначение,Использование,ВидСравнения,ПравоеЗначение"
				, Тип("ЭлементОтбораКомпоновкиДанных")
				, Новый ПолеКомпоновкиДанных("Ссылка")
				, Истина
				, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
				, СтарыйПараметрСписок
			));
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры // ВосстановитьОтборСкдИзСтаройНастройки()

Функция ИнициализироватьОтбор(Знач СправочникИмя, Знач ЭлементОтбора, Знач Заголовок) Экспорт

	Отборы = ЗначениеВМассиве(
		Новый Структура("Тип,ЛевоеЗначение,Использование,ВидСравнения"
		, Тип("ЭлементОтбораКомпоновкиДанных")
		, Новый ПолеКомпоновкиДанных("Ссылка")
		, Ложь
		, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
		)
	);
	
	Скд = Скд(СправочникИмя, Отборы, Заголовок);
	
	СкдАдрес = ПоместитьВоВременноеХранилище(Скд, Новый УникальныйИдентификатор);
	ЭлементОтбора.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СкдАдрес));
	ЭлементОтбора.ЗагрузитьНастройки(Скд.ВариантыНастроек.Основной.Настройки);
	
	Возврат СкдАдрес;
	
КонецФункции // ИнициализироватьОтбор()

#КонецОбласти

Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
	
	#Область Версия1
	Версия1	= Новый Массив;
	НомПоз	= Найти(Строка1, ".");
	Пока НомПоз Цикл
	
		Версия1.Добавить(СокрЛП(Лев(Строка1, НомПоз - 1)));
		
		Строка1	= Сред(Строка1, НомПоз + 1);
		НомПоз	= Найти(Строка1, ".");

	КонецЦикла;
	Если Не ПустаяСтрока(Строка1) Тогда
	
		Версия1.Добавить(СокрЛП(Строка1));
	
	КонецЕсли;
	
	Если Версия1.Количество() <> 4 Тогда
		ВызватьИсключение
			НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: " + СтрокаВерсии1 + "'");
	КонецЕсли;
	#КонецОбласти
	
	#Область Версия2
	Версия2	= Новый Массив;
	НомПоз	= Найти(Строка2, ".");
	Пока НомПоз Цикл
	
		Версия2.Добавить(СокрЛП(Лев(Строка2, НомПоз - 1)));
		Строка2	= Сред(Строка2, НомПоз + 1);
		НомПоз	= Найти(Строка2, ".");

	КонецЦикла;
	Если Не ПустаяСтрока(Строка2) Тогда
	
		Версия2.Добавить(СокрЛП(Строка2));
	
	КонецЕсли;
	Если Версия2.Количество() <> 4 Тогда
		ВызватьИсключение
	    	НСтр("ru = 'Неправильный формат параметра СтрокаВерсии2: " + СтрокаВерсии2 + "'");
	КонецЕсли;
	#КонецОбласти
	
	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ВерсияПриложения()

	Перем СистемнаяИнформация, ВерсияПриложения, ТекущаяСовместимость, РежимСовместимости;
	
	ТекущаяСовместимость	= Метаданные.РежимСовместимости;
	РежимСовместимости		= Метаданные.СвойстваОбъектов.РежимСовместимости;
	
	Если ТекущаяСовместимость = РежимСовместимости.НеИспользовать Тогда
	
		СистемнаяИнформация	= Новый СистемнаяИнформация;
		ВерсияПриложения	= СистемнаяИнформация.ВерсияПриложения;
		
		Возврат ВерсияПриложения;
		
	КонецЕсли;
	
	Возврат РежимСовместимостиСтрокой(ТекущаяСовместимость);
	
КонецФункции // ВерсияПриложения()

Функция РежимСовместимостиСтрокой(Знач РежимСовместимости)

	РежимСовместимостиСтрокой = СтрЗаменить(СтрЗаменить(РежимСовместимости, "Версия", ""), "_", ".") + ".1";
	
	Возврат РежимСовместимостиСтрокой;

КонецФункции // РежимСовместимостиСтрокой()

#Область ФормыУправляемые_Макроподстановка

Функция СтрНайтиЕх(Знач ИсходнаяСтрока, Знач ПодстрокаПоиска, Знач НаправлениеПоискаСтрокой = "СНачала", Знач НачальнаяПозиция = 1, Знач НомерВхождения = 1)
	
	Возврат СтрНайти(
		ИсходнаяСтрока
		, ПодстрокаПоиска
		, ?(НаправлениеПоискаСтрокой = "СКонца", НаправлениеПоиска.СКонца, НаправлениеПоиска.СНачала)
		, НачальнаяПозиция
		, НомерВхождения
	);
	
КонецФункции // СтрНайтиЕх()

Функция СтрРазделитьЕх(Знач ИсходнаяСтрока, Знач Разделитель, Знач ВключатьПустые = Истина)
	
	Возврат СтрРазделить(ИсходнаяСтрока, Разделитель, ВключатьПустые);
	
КонецФункции // СтрРазделитьЕх()

Функция СтрСоединитьЕх(Знач МассивСтрок, Знач Разделитель = Неопределено) Экспорт
	
	Возврат СтрСоединить(МассивСтрок, Разделитель);
	
КонецФункции

Функция СтрНачинаетсяСЕх(Знач Строка, Знач СтрокаПоиска)
	
	Возврат СтрНачинаетсяС(Строка, СтрокаПоиска)
	
КонецФункции // СтрНачинаетсяСЕх()

Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Значение, Разделитель, ПропускатьПустыеСтроки, СокращатьНепечатаемыеСимволы);
	
КонецФункции

Функция СвернутьМассив(Знач Массив)
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(Массив);
	
КонецФункции

Функция ПобитовыйСдвигВправоЕх(Знач Число, Знач Смещение)

	Возврат ПобитовыйСдвигВправо(Число, Смещение);

КонецФункции // ПобитовыйСдвигВправоЕх()

Функция ПобитовоеИЕх(Знач Число1, Знач Число2)

	Возврат ПобитовоеИ(Число1, Число2);

КонецФункции // ПобитовоеИЕх()

#КонецОбласти