&НаСервере
Функция ОбработкаОбъект()

	Перем ОбработкаОбъект;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	//УстановитьСоответствиеОбъектаИФормы(ОбработкаОбъект);
	
	//ОбработкаОбъект.ФормаУникальныйИдентификатор = ЭтаФорма.УникальныйИдентификатор;
	
	Возврат ОбработкаОбъект;

КонецФункции // ОбработкаОбъект()

&НаСервереБезКонтекста
Процедура ПрименитьНастройкиКЭлементуФормы(Знач ЭлементФормы, Знач ЭлементФормыОписание)

	ЭлементФормы.Видимость = ЭлементФормыОписание <> Неопределено;
	Если ЭлементФормыОписание <> Неопределено Тогда
		
		ЭлементФормы.ОграничениеТипа	= ЭлементФормыОписание.ТипЗначения;
		ЭлементФормы.Заголовок			= ЭлементФормыОписание.Заголовок;
	
	КонецЕсли;

КонецПроцедуры // ПрименитьНастройкиКЭлементуФормы()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработкаОбъект				= ОбработкаОбъект();
	СведенияОВнешнейОбработке	= ОбработкаОбъект.СведенияОВнешнейОбработке();
	НастройкиВыгрузки			= ОбработкаОбъект.Серриализация_Загрузка();
	ШаблонНастроек				= ОбработкаОбъект.ШаблонНастроек();
	ВсеКонстанты				= ОбработкаОбъект.ВсеКонстанты();
	ВсеПроизводители			= Новый Соответствие;
	
	ЭтаФорма.Заголовок			= СведенияОВнешнейОбработке.Версия + " (" + ВсеКонстанты.КонфигурацияПредставление + ")";
	
	#Область СозданиеРеквизитовФормы

	ДобавляемыеРеквизиты = Новый Массив;
	
	НовыйРеквизит = Новый РеквизитФормы("Переменные", Новый ОписаниеТипов());
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	#Область Отборы_Реквизиты
	ДобавляемыеРеквизитыОтбора = Новый Массив;
	Для каждого Колонка Из ШаблонНастроек.Настройка.Колонки Цикл
		ОтборИмя = Колонка.Имя;
		
		ОтборСкдОписание = ОбработкаОбъект.ОтборСкдОписание(ОтборИмя, ШаблонНастроек);
		
		Если ОтборСкдОписание = Неопределено Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		НовыйРеквизит = Новый РеквизитФормы(ОтборИмя, Новый ОписаниеТипов("КомпоновщикНастроекКомпоновкиДанных"));
		НовыйРеквизит.СохраняемыеДанные	= Истина;
		НовыйРеквизит.Заголовок			= Колонка.Заголовок;
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
		ДобавляемыеРеквизитыОтбора.Добавить(Новый Структура("Реквизит,ОтборСкдОписание", НовыйРеквизит, ОтборСкдОписание));
		
	КонецЦикла;
	#КонецОбласти
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, );
	
	Индекс = 0;
	Для каждого НовыйЭлементОписание Из ДобавляемыеРеквизитыОтбора Цикл
		Индекс = Индекс + 1;
		НовыйРеквизит = НовыйЭлементОписание.Реквизит;
	
		НовыйЭлемент = Элементы.Добавить(НовыйРеквизит.Имя, Тип("ПолеФормы"), Элементы.ГруппаОтборы);
		НовыйЭлемент.ПутьКДанным			= НовыйРеквизит.Имя + ".Настройки.Отбор";
		НовыйЭлемент.Вид					= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок				= "[" + Индекс + "] " + НовыйРеквизит.Заголовок;
		НовыйЭлемент.АвтоМаксимальнаяШирина	= Ложь;
		НовыйЭлемент.МаксимальнаяШирина		= 0;
		НовыйЭлемент.УстановитьДействие("Очистка", "ПолеОтбораСКД_Очистка");
		
	КонецЦикла;
	
	#Область Отборы_ЭлементыФормы
	ЭтаФорма.Переменные = Новый Структура;
	ЭтаФорма.Переменные.Вставить("Отборы", Новый Структура);
	
	Для каждого НовыйЭлементОписание Из ДобавляемыеРеквизитыОтбора Цикл
		ОтборСкдОписание	= НовыйЭлементОписание.ОтборСкдОписание;
		НовыйРеквизит		= НовыйЭлементОписание.Реквизит;
		
		ОтборСкдОписание.Вставить("СкдАдрес"	, ОбработкаОбъект.ИнициализироватьОтбор(
				ОтборСкдОписание.Тип
			,	ЭтаФорма[НовыйРеквизит.Имя]
			,	ОтборСкдОписание.Заголовок
		));
		
		ЭтаФорма.Переменные.Отборы.Вставить(ОтборСкдОписание.ОтборИмя, ОтборСкдОписание);
		
		Если ВРег(ОтборСкдОписание.Имя) = ВРег("ОтборНоменклатура") Тогда
		
			ОтборНоменклатура = ЭтаФорма.Элементы.Найти(ОтборСкдОписание.ОтборИмя);
			ОтборНоменклатура.ШрифтЗаголовка			= Новый Шрифт(ОтборНоменклатура.ШрифтЗаголовка, , , Истина, , Истина);
			ОтборНоменклатура.ЦветТекстаЗаголовка		= Новый Цвет(0, 0, 255);
			ОтборНоменклатура.АвтоОтметкаНезаполненного	= Истина;
		
		КонецЕсли;
	
	КонецЦикла;
	
	#КонецОбласти
	
	#КонецОбласти
	
	НастройкиВыгрузкиШаблон = Новый Структура;
	НастройкиВыгрузкиШаблон.Вставить("Настройка"			, Новый ФиксированнаяСтруктура(ОбработкаОбъект.НастройкаПроверить(ШаблонНастроек)));
	НастройкиВыгрузкиШаблон.Вставить("НастройкиОбщие"		, Новый ФиксированнаяСтруктура(ОбработкаОбъект.ТипизироватьПоШаблону(ШаблонНастроек.НастройкиОбщие)));
	НастройкиВыгрузкиШаблон.Вставить("ТаблицаПересчета"		, Новый ФиксированнаяСтруктура(ОбработкаОбъект.ТипизироватьПоШаблону(ШаблонНастроек.ТаблицаПересчета)));
	НастройкиВыгрузкиШаблон.Вставить("ТаблицаТранслита"		, Новый ФиксированнаяСтруктура(ОбработкаОбъект.ТипизироватьПоШаблону(ШаблонНастроек.ТаблицаТранслита)));
	НастройкиВыгрузкиШаблон.Вставить("ТипыФилиалов"			, Новый ФиксированнаяСтруктура(ОбработкаОбъект.ТипизироватьПоШаблону(ШаблонНастроек.ТипыФилиалов)));
	
	ЭтаФорма.Переменные.Вставить("ЗакрыватьФормуБезПредупреждения"	, Ложь);
	ЭтаФорма.Переменные.Вставить("ИмяСервера"						, ИмяКомпьютера());
	ЭтаФорма.Переменные.Вставить("ПолноеИмяОбъекта"					, ОбработкаОбъект.Метаданные().ПолноеИмя());
	ЭтаФорма.Переменные.Вставить("РежимРаботыВОблаке"				, ОбработкаОбъект.РежимРаботыВОблаке());
	ЭтаФорма.Переменные.Вставить("НастройкиВыгрузкиШаблон"			, НастройкиВыгрузкиШаблон);
	ЭтаФорма.Переменные.Вставить("ВсеПроизводители"					, ВсеПроизводители);
	ЭтаФорма.Переменные.Вставить("ВсеКонстанты"						, ВсеКонстанты);
	
	ЭтаФорма.Элементы.КодировкаТекста.ОграничениеТипа = ШаблонНастроек.НастройкиОбщие.Колонки.КодировкаТекста.ТипЗначения;
	ЭтаФорма.Элементы.КодировкаТекста.СписокВыбора.Очистить();
	Для каждого КодировкаТекстаСтрокаСписка Из ВсеКонстанты.КодировкаТекста Цикл
	
		ЗаполнитьЗначенияСвойств(ЭтаФорма.Элементы.КодировкаТекста.СписокВыбора.Добавить(), КодировкаТекстаСтрокаСписка);
	
	КонецЦикла;
	
	ПрименитьНастройкиКЭлементуФормы(Элементы.СвойствоКаналРынка						, ШаблонНастроек.НастройкиОбщие.Колонки.Найти("СвойствоКаналРынка"));
	ПрименитьНастройкиКЭлементуФормы(Элементы.СвойствоЗамещающийКлиент					, ШаблонНастроек.НастройкиОбщие.Колонки.Найти("СвойствоЗамещающийКлиент"));
	ПрименитьНастройкиКЭлементуФормы(Элементы.ВидЦеныРозничная							, ШаблонНастроек.Настройка.Колонки.Найти("ВидЦеныРозничная"));
	ПрименитьНастройкиКЭлементуФормы(Элементы.ОсновнаяОрганизация						, ШаблонНастроек.Настройка.Колонки.Найти("ОсновнаяОрганизация"));
	ПрименитьНастройкиКЭлементуФормы(Элементы.СвойствоТорговыйПредставитель				, ШаблонНастроек.НастройкиОбщие.Колонки.Найти("СвойствоТорговыйПредставитель"));
	ПрименитьНастройкиКЭлементуФормы(Элементы.ВидЦеныЗакупочная							, ШаблонНастроек.НастройкиОбщие.Колонки.Найти("ВидЦеныЗакупочная"));
	ПрименитьНастройкиКЭлементуФормы(Элементы.ИспользоватьВнутренниеКодыХарактеристик	, ШаблонНастроек.НастройкиОбщие.Колонки.Найти("ИспользоватьВнутренниеКодыХарактеристик"));
	
	Для каждого ПроизводительОписание Из ОбработкаОбъект.ВсеПроизводители() Цикл
		
		ВсеПроизводители.Вставить(ПроизводительОписание.manfid, ПроизводительОписание);
		
		Элементы.Производитель.СписокВыбора.Добавить(
			ПроизводительОписание.manfid
			, ПроизводительОписание.Наименование + " [" + Формат(ПроизводительОписание.manfid, "ЧЦ=10; ЧН=; ЧГ=0") + "]"
		);
	
	КонецЦикла;
	
	Элементы.Производитель.СписокВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	Элементы.Производитель.Видимость = ВсеПроизводители.Количество() > 1;
	
	Если Не РольДоступна("ПолныеПрава") Тогда
		Элементы.ФормаКомандаПерейтиВоВнешниеОбработки.Видимость = Ложь;
	КонецЕсли;
	
	#Область ДобавлятьКНомерам
	Элементы.ДобавлятьКНомерам.Видимость = НастройкиВыгрузкиШаблон.Настройка.Свойство("ДобавлятьКНомерам", );
	
	Для каждого ДобавлятьКНомерамСтрока Из ВсеКонстанты.ДобавлятьКНомерам Цикл
		
		ЗаполнитьЗначенияСвойств(Элементы.ДобавлятьКНомерам.СписокВыбора.Добавить(), ДобавлятьКНомерамСтрока);
	
	КонецЦикла;
	#КонецОбласти
	
	НастройкиВыгрузкиПрименить(НастройкиВыгрузки);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура НастройкиВыгрузкиПрименить(Знач НастройкиВыгрузки)
	Перем ДополнительныеСведения, ТипыФилиалов;
	
	НастройкиВыгрузки.НастройкиОбщие.Свойство("ТипыДокументов", ТипыДокументов);
	
	Элементы.КомандаДополнительныеСведения.Видимость =
		НастройкиВыгрузки.НастройкиОбщие.Свойство("ДополнительныеСведения", ДополнительныеСведения);
	
	Элементы.КомандаТипыФилиалов.Видимость =
		НастройкиВыгрузки.НастройкиОбщие.Свойство("ТипыФилиалов", ТипыФилиалов);
	
	ПолучитьСвойствоИЗаполнитьСписокВыбора(Элементы.ТорговойТочкойЯвляется	, НастройкиВыгрузки.НастройкиОбщие, "ТорговойТочкойЯвляется");
	ПолучитьСвойствоИЗаполнитьСписокВыбора(Элементы.ТорговыйПредставитель	, НастройкиВыгрузки.НастройкиОбщие, "ТорговыйПредставитель");
	
	ЭтаФорма.НастройкиОбщие_HTTP_Использовать	= НастройкиВыгрузки.НастройкиОбщие.HTTP_Использовать;
	ЭтаФорма.НастройкиОбщие_HTTP_API_KEY		= НастройкиВыгрузки.НастройкиОбщие.HTTP_API_KEY;
	
	Настройки = Новый Соответствие;
	
	СписокВыбора = Элементы.ВариантНастройки.СписокВыбора;
	СписокВыбора.Очистить();
	
	Для каждого Настройка Из НастройкиВыгрузки.Настройки Цикл
		
		НастройкаИмя = Настройка.НастройкаИмя;
		
		Настройки.Вставить(НастройкаИмя, Настройка);
		СписокВыбора.Добавить(НастройкаИмя, ВариантНастройкиПредставление(Настройка));
		
	КонецЦикла;
	
	ЭтаФорма.Переменные.Вставить("Настройки", Настройки);
	
	СписокВыбора.СортироватьПоПредставлению();
	
	#Область НастройкиОбщие
	
	РежимРаботыКлиент				= НастройкиВыгрузки.НастройкиОбщие.РежимРаботыКлиент;
	Округлять						= НастройкиВыгрузки.НастройкиОбщие.Округлять;
	СобственныйКонвертер_в_ANSI		= НастройкиВыгрузки.НастройкиОбщие.СобственныйКонвертер_в_ANSI;
	КодировкаТекста					= НастройкиВыгрузки.НастройкиОбщие.КодировкаТекста;
	НеВыгружатьСерии				= НастройкиВыгрузки.НастройкиОбщие.НеВыгружатьСерии;
	ПеремещенияКакПродажи			= НастройкиВыгрузки.НастройкиОбщие.ПеремещенияКакПродажи;
	КлиентыБезПерсональныхДанных	= НастройкиВыгрузки.НастройкиОбщие.КлиентыБезПерсональныхДанных;
	ПродажиПоЗакупочнымЦенам		= НастройкиВыгрузки.НастройкиОбщие.ПродажиПоЗакупочнымЦенам;
	ДатаНачалаУчета					= НастройкиВыгрузки.НастройкиОбщие.ДатаНачалаУчета;
	
	НастройкиВыгрузки.НастройкиОбщие.Свойство("СвойствоКаналРынка"						, СвойствоКаналРынка);
	НастройкиВыгрузки.НастройкиОбщие.Свойство("СвойствоЗамещающийКлиент"				, СвойствоЗамещающийКлиент);
	НастройкиВыгрузки.НастройкиОбщие.Свойство("СвойствоТорговыйПредставитель"			, СвойствоТорговыйПредставитель);
	НастройкиВыгрузки.НастройкиОбщие.Свойство("ВидЦеныЗакупочная"						, ВидЦеныЗакупочная);
	НастройкиВыгрузки.НастройкиОбщие.Свойство("ИспользоватьВнутренниеКодыХарактеристик"	, ИспользоватьВнутренниеКодыХарактеристик);
	
	НастройкиВыгрузки.НастройкиОбщие.Свойство("HTTP_Использовать"				, НастройкиОбщие_HTTP_Использовать);
	НастройкиВыгрузки.НастройкиОбщие.Свойство("HTTP_API_KEY"					, НастройкиОбщие_HTTP_API_KEY);
	
	ЭтаФорма.Переменные.Вставить("ТаблицаПересчета"			, НастройкиВыгрузки.НастройкиОбщие.ТаблицаПересчета);
	ЭтаФорма.Переменные.Вставить("ТаблицаТранслита"			, НастройкиВыгрузки.НастройкиОбщие.ТаблицаТранслита);
	ЭтаФорма.Переменные.Вставить("ДополнительныеСведения"	, ДополнительныеСведения);
	ЭтаФорма.Переменные.Вставить("ТипыФилиалов"				, ТипыФилиалов);
	
	#КонецОбласти

КонецПроцедуры // НастройкиВыгрузкиПрименить()

&НаКлиенте
Процедура НастройкиВыгрузкиПрименитьНаКлиенте()
	Перем СписокВыбора;

	СписокВыбора = Элементы.ВариантНастройки.СписокВыбора;
	
	НастрокаТекущая = Неопределено;
	Для каждого СписокВыбораСтрока Из СписокВыбора Цикл
	
		Настрока = ЭтаФорма.Переменные.Настройки[СписокВыбораСтрока.Значение];
		Если Настрока.НастройкаИспользуется Тогда
		
			НастрокаТекущая = Настрока;
			Прервать;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Если НастрокаТекущая = Неопределено Тогда
	
		НастрокаТекущая = ЭтаФорма.Переменные.Настройки[СписокВыбора[0].Значение];
	
	КонецЕсли;
	
	НастройкаНаФорму(НастрокаТекущая);
	
	ВариантНастройкиДоИзменения	= ВариантНастройки;
	
	СписокВыбора = Элементы.РежимРаботыКлиент.СписокВыбора;
	Если СписокВыбора.НайтиПоЗначению(РежимРаботыКлиент) = Неопределено	Тогда
	
		РежимРаботыКлиент = СписокВыбора[0].Значение;
	
	КонецЕсли;
	
	ТорговыйПредставительПриИзмененииНаКлиенте();
	
КонецПроцедуры // НастройкиВыгрузкиПрименитьНаКлиенте()

&НаСервере
Процедура ПолучитьСвойствоИЗаполнитьСписокВыбора(Знач Элемент, Знач ИсточникСвойств, Знач ИмяСвойства)

	Перем Форма, СписокВыбора;
	
	Форма = Новый Структура;
	Форма.Вставить(ИмяСвойства, );
	
	Элемент.Видимость = ИсточникСвойств.Свойство(ИмяСвойства, Форма[ИмяСвойства]);
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Форма);
	
	Если Не ЭтаФорма.Переменные.ВсеКонстанты.Свойство(ИмяСвойства, СписокВыбора) Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ЭлементСписокВыбора = Элемент.СписокВыбора;
	ЭлементСписокВыбора.Очистить();
	
	Для каждого СписокВыбораСтрока Из СписокВыбора Цикл
		
		ЗаполнитьЗначенияСвойств(ЭлементСписокВыбора.Добавить(), СписокВыбораСтрока);
	
	КонецЦикла;
	
	Элемент.Видимость = СписокВыбора.Количество();

КонецПроцедуры // ПолучитьСвойствоИЗаполнитьСписокВыбора()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Перем СписокВыбора;

	Если КлючУникальности = Неопределено Тогда
		
        ИмяОбработки = СтрРазделить(ЭтотОбъект.ИмяФормы, ".")[1];
        
        КлючУникальности = ИмяОбработки + Формат(ТекущаяДата(), "ДФ='yyyy-MM-dd''T''ЧЧ:мм:сс'"); // 2023-05-02T12:19:44
        
    КонецЕсли;	
	
	ЭтаФорма.Переменные.Вставить("ЭтоСервернаяБаза", Не СтрНачинаетсяС(ВРег(СтрокаСоединенияИнформационнойБазы()), "FILE="));
	
	СписокВыбора = Элементы.РежимРаботыКлиент.СписокВыбора;
	
	#Если ВебКлиент Тогда
		СписокВыбора.Добавить(1, "На WEB клиенте " + ИмяКомпьютераКлиент());
	#Иначе
		СписокВыбора.Добавить(1, "На клиенте " + ИмяКомпьютераКлиент());
	#КонецЕсли
	
	Если ЭтаФорма.Переменные.ЭтоСервернаяБаза Тогда
		
		СписокВыбора.Добавить(0, "На сервере " + ЭтаФорма.Переменные.ИмяСервера);
		
	КонецЕсли;
	
	НастройкиВыгрузкиПрименитьНаКлиенте();
	
	ПериодВыгрузкиЗапоминатьПриИзменении(Неопределено);
	
	Если Не ЭтаФорма.ИнструкцияНеПоказывать Тогда
	
		ИнструкцияПоказать();
	
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если РежимРаботыСервер(РежимРаботыКлиент) Тогда
		
		Если ЭтаФорма.Переменные.РежимРаботыВОблаке Тогда
			
			ОбщегоНазначенияКлиентСообщитьПользователю("При работе в ""облаке"" недоступен выбор каталога на сервере!");
			
			КаталогВыгрузки = "";
			
			Возврат;
		КонецЕсли;
		
#Область НеРежимРаботыВОблаке

		Попытка
			
			ОткрытьФорму(
					ЭтаФорма.Переменные.ПолноеИмяОбъекта + ".Форма.ВыборКаталогаНаСервереУправляемая"
				,	Новый Структура("Каталог", КаталогВыгрузки)
				,	ЭтаФорма
				,,,,Новый ОписаниеОповещения("КаталогФайловВыбор", ЭтаФорма)
				,	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
			);
			Возврат;
			
		Исключение
			
			ОбщегоНазначенияКлиентСообщитьПользователю(ОписаниеОшибки());
			
		КонецПопытки;
		
#КонецОбласти

	КонецЕсли;
	
	ДВК = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДВК.ПолноеИмяФайла	= КаталогВыгрузки;
	ДВК.Каталог			= КаталогВыгрузки;
	ДВК.Показать(Новый ОписаниеОповещения("КаталогВыгрузкиНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("ДВК", ДВК)));
	
КонецПроцедуры // КаталогВыгрузкиНачалоВыбора()

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДВК = ДополнительныеПараметры.ДВК;
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КаталогВыгрузки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ДВК.Каталог);
	
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры // КаталогВыгрузкиНачалоВыбораЗавершение()

&НаКлиенте
Процедура КаталогФайловВыбор(Знач Каталог, Знач Параметр) Экспорт
	Если Каталог = Неопределено Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(Каталог) Тогда
		Возврат;
	КонецЕсли;
	
	КаталогВыгрузки		= СокрЛП(Каталог);
	Модифицированность	= Истина;
КонецПроцедуры // КаталогФайловВыбор()

&НаСервере
Функция ВнешняяОбработкаСсылка()
	Если ЗначениеЗаполнено(Объект.СсылкаНаОбъект) Тогда
	
		Возврат Объект.СсылкаНаОбъект;
	
	КонецЕсли;
	
	Объект.СсылкаНаОбъект = ОбработкаОбъект().ВнешняяОбработкаСсылка();
	
	Возврат Объект.СсылкаНаОбъект;
КонецФункции // ВнешняяОбработкаСсылка()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЭтаФорма.Переменные.ЗакрыватьФормуБезПредупреждения Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Если ЗавершениеРаботы = Истина Тогда
			
			Если ЭтаФорма.Модифицированность Тогда
			
				ТекстПредупреждения = 
					"Настройки не будут сохранены.
					|Закрыть форму?";
				
				Отказ = Истина;
			
			КонецЕсли;
			
			Возврат;
		
		КонецЕсли;
		
		ВнешняяОбработкаСсылка = ВнешняяОбработкаСсылка();
		
		Если ЗначениеЗаполнено(ВнешняяОбработкаСсылка) Тогда
			
			// Сохраняем текущую настройку
			
			НастройкиНовые = НастройкиИзменились(ПараметрыВыгрузкиИзФормыВсе());
			
			Если НастройкиНовые <> Неопределено Тогда
			
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ВнешняяОбработкаСсылка"	, ВнешняяОбработкаСсылка);
				ДополнительныеПараметры.Вставить("НастройкиНовые"			, НастройкиНовые);
				
				Отказ		= Истина;
				
				ПоказатьВопрос(
						Новый ОписаниеОповещения("ПередЗакрытиемНастройкиПодтверждениеСохранения", ЭтаФорма, ДополнительныеПараметры)
					,	"Настройки изменились. Сохранить?"
					,	РежимДиалогаВопрос.ДаНетОтмена
				);
			
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
		
		Отказ = Истина;
		
		ПоказатьВопрос(
				Новый ОписаниеОповещения("ПередЗакрытиемНастройкиОтказОтСохранения", ЭтаФорма)
			,	"Данная обработка не зарегистрирована в справочнике внешних обработок.
				|Настройки сохранены не будут.
				|Закрыть форму?"
			,	РежимДиалогаВопрос.ДаНет
		);
		
	Исключение
		
		ОбщегоНазначенияКлиентСообщитьПользователю(ОписаниеОшибки());
		
	КонецПопытки;
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
Процедура ПередЗакрытиемНастройкиОтказОтСохранения(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если КодВозвратаДиалога.Нет = РезультатВопроса Тогда
		
		ОткрытьФорму("Справочник.ДополнительныеОтчетыИОбработки.ФормаСписка");
		
		Возврат;
		
	КонецЕсли;

	ЭтаФорма.Переменные.ЗакрыватьФормуБезПредупреждения = Истина;
	
	ЭтаФорма.Закрыть();
КонецПроцедуры // ПередЗакрытиемНастройкиОтказОтСохранения()

&НаКлиенте
Процедура ПередЗакрытиемНастройкиПодтверждениеСохранения(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если КодВозвратаДиалога.Отмена = РезультатВопроса Тогда
		
		Возврат;
		
	ИначеЕсли КодВозвратаДиалога.Да = РезультатВопроса Тогда
		
		Серриализация_Сохранение(ДополнительныеПараметры.ВнешняяОбработкаСсылка, ДополнительныеПараметры.НастройкиНовые);
		
	КонецЕсли;
	
	ЭтаФорма.Переменные.ЗакрыватьФормуБезПредупреждения = Истина;
	
	ЭтаФорма.Закрыть();
КонецПроцедуры // ПередЗакрытиемНастройкиПодтверждениеСохранения()

&НаКлиентеНаСервереБезКонтекста
Функция РежимРаботыСервер(Знач ПараметрыВыгрузки)
	Перем РежимРаботыКлиент, НастройкиОбщие;
	
	Если ТипЗнч(ПараметрыВыгрузки) = Тип("Булево") или ТипЗнч(ПараметрыВыгрузки) = Тип("Число") Тогда
	
		РежимРаботыКлиент = ПараметрыВыгрузки;
		
	ИначеЕсли ТипЗнч(ПараметрыВыгрузки) = Тип("Структура") Тогда
		
		Если Не ПараметрыВыгрузки.Свойство("НастройкиОбщие", НастройкиОбщие) Тогда
		
			НастройкиОбщие = ПараметрыВыгрузки;
		
		КонецЕсли;
		
		РежимРаботыКлиент = НастройкиОбщие.РежимРаботыКлиент;
		
	Иначе
		
		ВызватьИсключение "::РежимРаботыСервер() - Некорректный аргумент """ + РежимРаботыКлиент + """";
		
	КонецЕсли;
	
	Возврат Не РежимРаботыКлиент;

КонецФункции // РежимРаботыСервер()

&НаКлиенте
Процедура Автообмен(Знач ПараметрыВыгрузки)
	
	Если Не ПараметрыВыгрузки.Настройки.Количество() Тогда
		
		Элементы.ФормаКомандаСоздатьФайлы.Доступность = Истина;
		Возврат;
		
	КонецЕсли;
	
	Элементы.ФормаКомандаСоздатьФайлы.Доступность = Ложь;
	
	НастройкиОбщие = ПараметрыВыгрузки.НастройкиОбщие;
	
	// Выгружать будем не весь пакет настроек, а по одной. Чтобы сократить время выполнения и расход памяти
	ПараметрыВыгрузкиЕдиничная = Новый Структура;
	ПараметрыВыгрузкиЕдиничная.Вставить("Настройки"		, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыВыгрузки.Настройки[0]));
	ПараметрыВыгрузкиЕдиничная.Вставить("НастройкиОбщие", НастройкиОбщие);
	
	ПараметрыВыгрузки.Настройки.Удалить(0);
	ЭтаФорма.Переменные.Вставить("ПараметрыВыгрузки", ПараметрыВыгрузки); // Сохраняем оставшиеся выгрузки в реквизите формы, чтобы продолжить по окончанию
	
	Если РежимРаботыСервер(ПараметрыВыгрузки) Тогда
	
		Результат = АвтообменНаСервере(ПараметрыВыгрузкиЕдиничная);
		
		АвтообменЗавершение(Результат, НастройкиОбщие);
		
		Возврат;
		
	КонецЕсли;
	
	ПроверитьВозможностьВыгрузкиНаКлиенте(ПараметрыВыгрузкиЕдиничная);
	
КонецПроцедуры // Автообмен()

&НаКлиенте
Процедура АвтообменЗавершение(Знач Результат, Знач НастройкиОбщие)

	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
	
		Результат = Новый Структура("РезультатВыгрузкиМассив, РезультатФоновогоЗадания", Новый Массив);
	
	КонецЕсли;
	
	Если Результат.РезультатФоновогоЗадания <> Неопределено Тогда
		
		ПодключитьОбработчикРезультата(Результат.РезультатФоновогоЗадания, НастройкиОбщие);
		Возврат;
		
	КонецЕсли;
	
	АвтообменНаКлиентеЗавершение(Результат.РезультатВыгрузкиМассив, НастройкиОбщие);

КонецПроцедуры // АвтообменЗавершение()

&НаКлиенте
Процедура ПроверитьВозможностьВыгрузкиНаКлиенте(Знач ПараметрыВыгрузки)

	Перем РежимРаботыВОблаке, ВсеПроизводители;

	ВсеПроизводители	= ЭтаФорма.Переменные.ВсеПроизводители;
	
	НастройкиОбщие		= ПараметрыВыгрузки.НастройкиОбщие;
	
	РежимРаботыВОблаке	= ЭтаФорма.Переменные.РежимРаботыВОблаке;
	
	ИндексыПроверяемыхНастроекМассив = Новый Массив;
	
	Для х = -ПараметрыВыгрузки.Настройки.ВГраница() По 0 Цикл
	
		Настройка = ПараметрыВыгрузки.Настройки[-х];
		
		Если Не Настройка.НастройкаИспользуется Тогда
		
			ПараметрыВыгрузки.Настройки.Удалить(-х);
			Продолжить;
		
		КонецЕсли;
		
		ПроизводительОписание = ВсеПроизводители[Настройка.manfid];
		
		Если Настройка.Свойство("Транспорты") Тогда
			
			Если Не ЗначениеЗаполнено(Настройка.Транспорты) Тогда
			
				ЗаписьЖурналаРегистрацииКлиент(
						"Ошибка"
					,,,	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"Каталог выгрузки %1. Параметры доступа к FTP / HTTP не указаны или доступ запрещен. Выгрузка не будет выполнена"
						, ?(ПустаяСтрока(Настройка.КаталогВыгрузки), "не указан", """" + Настройка.КаталогВыгрузки + """ недоступен")
						)
					,	"Независимая"
					,	ПроизводительОписание.Наименование
				);
				
				ПараметрыВыгрузки.Настройки.Удалить(-х);
			
			КонецЕсли;
		
		Иначе
				
			ИндексыПроверяемыхНастроекМассив.Добавить(-х);
				
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыВыгрузки"				, ПараметрыВыгрузки);
	ДополнительныеПараметры.Вставить("ИндексыПроверяемыхНастроекМассив"	, ИндексыПроверяемыхНастроекМассив);
	ДополнительныеПараметры.Вставить("ВсеПроизводители"					, ВсеПроизводители);
	
	ПроверитьВозможностьВыгрузкиНаКлиентеАсинх(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры // ПроверитьВозможностьВыгрузкиНаКлиенте()

&НаКлиенте
Процедура ПроверитьВозможностьВыгрузкиНаКлиентеАсинх(Знач Транспорты, Знач ДополнительныеПараметры) Экспорт

	Перем ИндексыПроверяемыхНастроекМассив;
	
	ПараметрыВыгрузки	= ДополнительныеПараметры.ПараметрыВыгрузки;
	Настройки			= ПараметрыВыгрузки.Настройки;
	НастройкиОбщие		= ПараметрыВыгрузки.НастройкиОбщие;
	ВсеПроизводители	= ДополнительныеПараметры.ВсеПроизводители;
	
	НастройкиКоличество	= Настройки.Количество();
	
	Если Не НастройкиКоличество Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ИндексыПроверяемыхНастроекМассив = ДополнительныеПараметры.ИндексыПроверяемыхНастроекМассив;
	
	Если ТипЗнч(Транспорты) = Тип("Массив") Тогда
		
		ВГраница		= ИндексыПроверяемыхНастроекМассив.ВГраница();
		НастройкаИндекс = ИндексыПроверяемыхНастроекМассив[ВГраница];
		ИндексыПроверяемыхНастроекМассив.Удалить(ВГраница);
		
		Настройка				= Настройки[НастройкаИндекс];
		ПроизводительОписание	= ВсеПроизводители[Настройка.manfid];
		
		Если Не ЗначениеЗаполнено(Транспорты) Тогда
		
			ЗаписьЖурналаРегистрацииКлиент(
					"Ошибка"
				,,,	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"Каталог выгрузки %1. Параметры доступа к FTP / HTTP не указаны или доступ запрещен. Выгрузка не будет выполнена"
					, ?(ПустаяСтрока(Настройка.КаталогВыгрузки), "не указан", """" + Настройка.КаталогВыгрузки + """ недоступен")
					)
				,	"Независимая"
				,	ПроизводительОписание.Наименование
			);
			
			Настройки.Удалить(НастройкаИндекс);
			
		Иначе
			
			Настройка.Вставить("Транспорты", Транспорты);
		
		КонецЕсли;
	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИндексыПроверяемыхНастроекМассив) Тогда
	
		Если Настройки.Количество() Тогда
			
			Результат = ПолучитьДанныеНаСервере(ПараметрыВыгрузки);
			
		Иначе
			
			Результат = Новый Структура;
			Результат.Вставить("РезультатФоновогоЗадания"	, Неопределено);
			Результат.Вставить("РезультатВыгрузкиМассив"	, Новый Массив);
			
		КонецЕсли;
		
		АвтообменЗавершение(Результат, НастройкиОбщие);
		
		Возврат;
	
	КонецЕсли;
	
	Настройка				= Настройки[ИндексыПроверяемыхНастроекМассив.ВГраница()];
	ПроизводительОписание	= ВсеПроизводители[Настройка.manfid];
	
	Транспорты = Транспорт_ВсеТранспорты(
		Настройка
		, НастройкиОбщие
		, ПроизводительОписание
	);
	
	Транспорт_ВсеТранспорты_Проверить(Транспорты, Новый ОписаниеОповещения(
		"ПроверитьВозможностьВыгрузкиНаКлиентеАсинх"
		, ЭтаФорма
		, ДополнительныеПараметры
	));
	
КонецПроцедуры // ПроверитьВозможностьВыгрузкиНаКлиентеАсинх()

&НаСервереБезКонтекста
Функция CRC32(Знач ФайлДвоичныеДанные)

	ХешФункцияCRC32 = Новый ХешированиеДанных(ХешФункция.CRC32);
	ХешФункцияCRC32.Добавить(ФайлДвоичныеДанные);
	
	Возврат ХешФункцияCRC32.ХешСумма;
	
КонецФункции // CRC32()

&НаКлиенте
Процедура ФайлОписаниеУстановитьПредставление(Знач ФайлОписание) Экспорт

	Перем ФайлДвоичныеДанные;
	
	ФайлОписание.Свойство("ФайлДвоичныеДанные", ФайлДвоичныеДанные);
	
	Если ТипЗнч(ФайлДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
		
		ФайлОписание.Вставить("ФайлРазмер"	, ФайлДвоичныеДанные.Размер());
		//ФайлОписание.Вставить("ФайлCRC32"	, CRC32(ФайлДвоичныеДанные));
		
	Иначе
		
		ФайлОписание.Вставить("ФайлРазмер"	, 0);
		//ФайлОписание.Вставить("ФайлCRC32"	, 0);
	
	КонецЕсли;
	
	ФайлОписание.Вставить("ФайлПредставление", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		//"строк: %1, байт: %2, CRC32: %3"
		"строк: %1, байт: %2"
		, ФайлОписание.ФайлКоличествоСтрок	// 1
		, ФайлОписание.ФайлРазмер			// 2
		//, ФайлОписание.ФайлCRC32			// 3
	));

КонецПроцедуры // ФайлОписаниеУстановитьПредставление()

&НаКлиенте
Процедура АвтообменНаКлиентеЗавершение(Знач РезультатВыгрузкиМассив, Знач НастройкиОбщие)
	
	//Если Не РежимРаботыСервер(ЭтаФорма.Переменные.ПараметрыВыгрузки) Тогда
	Если Не РежимРаботыСервер(НастройкиОбщие.РежимРаботыКлиент) Тогда
	
		Попытка
			
			Для х = 0 По РезультатВыгрузкиМассив.Количество() - 1 Цикл
				
				РезультатВыгрузкиОписание = РезультатВыгрузкиМассив[х];
				
				Если РезультатВыгрузкиОписание = Неопределено Тогда
					
					ОбщегоНазначенияКлиентСообщитьПользователю(
						"Выгрузка " + (х + 1) + " не выполнена"
					);
					
					Продолжить;
				
				КонецЕсли;
				
				МассивОписанийТаблиц = РезультатВыгрузкиОписание.Данные;
				
				Если МассивОписанийТаблиц = Неопределено Тогда
					
					ОбщегоНазначенияКлиентСообщитьПользователю(
						РезультатВыгрузкиОписание.Настройка.НастройкаИмя + ". Выгрузка не выполнена
						|" + РезультатВыгрузкиОписание.ОписаниеОшибки
					);
					
					Продолжить;
				
				КонецЕсли;
				
				Настройка = РезультатВыгрузкиОписание.Настройка;
				ВсеПроизводители		= ЭтаФорма.Переменные.ВсеПроизводители;
				ПроизводительОписание	= ВсеПроизводители[Настройка.manfid];
				
				ФайлыДляОтправкиМассив = Новый Массив;
				
				Транспорты = Настройка.Транспорты;
				
				ФайлыДляОтправкиМассив = Новый Массив;
			
				Для каждого ТаблицаОписание Из МассивОписанийТаблиц Цикл
					ФайлДвоичныеДанные	= ТаблицаОписание.ФайлДвоичныеДанные;
					ФайлИмя				= ТаблицаОписание.Имя + ".txt";
					
					ФайлОписание = Новый Структура;
					ФайлОписание.Вставить("ФайлДвоичныеДанные"		, ФайлДвоичныеДанные);
					ФайлОписание.Вставить("ФайлИмя"					, ФайлИмя);
					//ФайлОписание.Вставить("КоличествоСтрок"			, ТаблицаОписание.КоличествоСтрок);
					ФайлОписание.Вставить("ФайлКоличествоСтрок"		, ТаблицаОписание.КоличествоСтрок);
					
					ФайлОписаниеУстановитьПредставление(ФайлОписание);
					
					ФайлыДляОтправкиМассив.Добавить(ФайлОписание);
					
				КонецЦикла;
				
				Для каждого ТранспортОписание Из Транспорты Цикл
				
					ТранспортОписание.ФайлыДляОтправкиМассив = ФайлыДляОтправкиМассив;
				
				КонецЦикла;
				
				Транспорт_ОтправитьФайлы(Транспорты);
				
			КонецЦикла;
			
		Исключение
			
			ЗаписьЖурналаРегистрацииКлиент(
					"Ошибка"
				,,,	ОписаниеОшибки()
				,	"Независимая"
				,	ПроизводительОписание.Наименование
			);
			
		КонецПопытки;

	КонецЕсли;
	
	Автообмен(ЭтаФорма.Переменные.ПараметрыВыгрузки); // Выполняем дальнейшую выгрузку
	
КонецПроцедуры // АвтообменНаКлиентеЗавершение()

&НаСервере
Функция ПолучитьДанныеНаСервере(Знач ПараметрыВыгрузки)
	Перем ОбработкаОбъект, Результат;
	
	ОбработкаОбъект	= ОбработкаОбъект();
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатФоновогоЗадания", ПолучитьДанныеВФоне("ПолучитьДанныеВФоне", ОбработкаОбъект, ПараметрыВыгрузки));
	Результат.Вставить("РезультатВыгрузкиМассив"
		, ?(Результат.РезультатФоновогоЗадания = Неопределено
		, МассивОписанийТаблицВТаблицыФормы(ОбработкаОбъект.ПолучитьДанные(ПараметрыВыгрузки))
		, Неопределено
	));
	
	Возврат Результат;
	
КонецФункции // ПолучитьДанныеНаСервере()

&НаСервере
Функция АвтообменНаСервере(Знач ПараметрыВыгрузки)
	
	Перем ОбработкаОбъект, Результат;
	
	ОбработкаОбъект	= ОбработкаОбъект();
		
	ОбработкаОбъект.ПроверитьВозможностьВыгрузкиНаСервере(ПараметрыВыгрузки);
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатФоновогоЗадания"	, Неопределено);
	Результат.Вставить("РезультатВыгрузкиМассив"	, Новый Массив);
	
	Если Не ПараметрыВыгрузки.Настройки.Количество() Тогда
	
		Возврат Результат;
	
	КонецЕсли;
	
	Результат.РезультатФоновогоЗадания = ПолучитьДанныеВФоне("АвтообменНаСервереВФоне", ОбработкаОбъект, ПараметрыВыгрузки);
	
	Если Результат.РезультатФоновогоЗадания = Неопределено Тогда
		
		// Делаем выгрузку и отображаем результат на форме
		МассивОписанийТаблицВТаблицыФормы(ОбработкаОбъект.АвтообменНаСервере(ПараметрыВыгрузки));
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // АвтообменНаСервере()

#Область Транспорт

&НаКлиенте
Функция Транспорт_Добавить(Транспорты, Знач ТранспортИмя, Знач Настройка, Знач НастройкиОбщие, Знач ПроизводительОписание)

	Если ТипЗнч(Транспорты) <> Тип("Массив") Тогда
	
		Транспорты = Новый Массив;
	
	КонецЕсли;
	
	ПроизводительИмя = ПроизводительОписание.Наименование;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПроизводительИмя"		, ПроизводительИмя);
	ДополнительныеПараметры.Вставить("НастройкаИмя"			, Настройка.НастройкаИмя);
	
	ТранспортОписание = Новый Структура;
	ТранспортОписание.Вставить("ТранспортИмя"				, СокрЛП(ВРег(ТранспортИмя)));
	ТранспортОписание.Вставить("ФайлыДляОтправкиМассив"		, Новый Массив);
	ТранспортОписание.Вставить("ДополнительныеПараметры"	, ДополнительныеПараметры);
	ТранспортОписание.Вставить("Проверен"					, Ложь);
	
	Если ТранспортОписание.ТранспортИмя = "ФАЙЛ" Тогда
	
		ТранспортОписание.Вставить("КаталогВыгрузки", СокрЛП(Настройка.КаталогВыгрузки));
		
		Если Не ЗначениеЗаполнено(ТранспортОписание.КаталогВыгрузки) Тогда
		
			ТранспортОписание = Неопределено;
		
		КонецЕсли;
	
	ИначеЕсли ТранспортОписание.ТранспортИмя = "ФТП" Тогда
		
		#Если ВебКлиент Тогда
			
			Возврат Транспорт_Добавить_НаСервере(Транспорты, ТранспортИмя, Настройка, НастройкиОбщие, ПроизводительОписание, Истина);
			
		#КонецЕсли
		
		Если Не Настройка.ФТП_Использовать Или Не ЗначениеЗаполнено(Настройка.ФТП_Логин) Тогда
		
			ТранспортОписание = Неопределено;
			
		Иначе	
		
			ТранспортОписание.Вставить("ФТП_Сервер"		, СокрЛП(ПроизводительОписание.ФТП_Сервер));
			ТранспортОписание.Вставить("ФТП_Порт"		, ПроизводительОписание.ФТП_Порт);
			ТранспортОписание.Вставить("ФТП_Логин"		, СокрЛП(Настройка.ФТП_Логин));
			ТранспортОписание.Вставить("ФТП_Пароль"		, СокрЛП(Настройка.ФТП_Пароль));
			ТранспортОписание.Вставить("ФТП_Каталог"	, СокрЛП(ПроизводительОписание.ФТП_Каталог));
			
			Попытка
			
				Фтп(
					ТранспортОписание.ФТП_Сервер
					, ТранспортОписание.ФТП_Порт
					, ТранспортОписание.ФТП_Логин
					, ТранспортОписание.ФТП_Пароль
					, ТранспортОписание.ФТП_Каталог
					, 5
				);
				
				ТранспортОписание.Проверен = Истина;
			
			Исключение
				
				ЗаписьЖурналаРегистрацииКлиент(
						"Ошибка"
					,,,	"FTP: " + ОписаниеОшибки()
					,	"Независимая"
					,	ПроизводительИмя
				);
				
				ТранспортОписание = Неопределено;
			
			КонецПопытки;
			
		КонецЕсли;

	ИначеЕсли ТранспортОписание.ТранспортИмя = "HTTP" Тогда
		
		#Если ВебКлиент Тогда
			
			Возврат Транспорт_Добавить_НаСервере(Транспорты, ТранспортИмя, Настройка, НастройкиОбщие, ПроизводительОписание, Истина);
			
		#КонецЕсли
		
		ТранспортОписание.Вставить("HTTP_Сервер"	, СокрЛП(ПроизводительОписание.HTTP_Сервер));
		ТранспортОписание.Вставить("HTTP_ПартнерИмя", СокрЛП(Настройка.HTTP_ПартнерИмя));
		
		Если	Не ЗначениеЗаполнено(ТранспортОписание.HTTP_Сервер)
			Или Не ЗначениеЗаполнено(ТранспортОписание.HTTP_ПартнерИмя)
			Или Не НастройкиОбщие.HTTP_Использовать
			Или Настройка.HTTP_Использовать = 0
			
			Тогда
		
			ТранспортОписание = Неопределено;
			
		Иначе
			
			HTTP_API_KEY = ?(Настройка.HTTP_Использовать = 1, Настройка.HTTP_API_KEY, НастройкиОбщие.HTTP_API_KEY);
			
			Если Не ЗначениеЗаполнено(HTTP_API_KEY) Тогда
			
				ТранспортОписание = Неопределено;
				
			Иначе
				
				ТранспортОписание.Вставить("HTTP_API_KEY", СокрЛП(HTTP_API_KEY));
				
			КонецЕсли;
		
		КонецЕсли;

		Если ТранспортОписание <> Неопределено Тогда
		
			Попытка
			
				//partners = HTTP_Сервер_МассивПартнеров_НаКлиенте(ТранспортОписание.HTTP_Сервер, ТранспортОписание.HTTP_API_KEY, Настройка.manfid);
				//
				//Для х = -partners.ВГраница() По 0 Цикл
				//
				//	Если partners[-х].PartnerName <> ТранспортОписание.HTTP_ПартнерИмя Тогда
				//	
				//		partners.Удалить(-х);
				//	
				//	КонецЕсли;
				//
				//КонецЦикла;
				
				//Если Не ЗначениеЗаполнено(partners) Тогда
				Если Не HTTP_Сервер_Доступен_НаКлиенте(ТранспортОписание.HTTP_Сервер, ТранспортОписание.HTTP_API_KEY) Тогда
				
					ТранспортОписание = Неопределено;
					
					ЗаписьЖурналаРегистрацииКлиент(
							"Ошибка"
						//,,,	"HTTP: Имя партнера указано неправильно: """ + ТранспортОписание.HTTP_ПартнерИмя + """"
						,,,	"HTTP сервер недоступен"
						,	"Независимая"
						,	ПроизводительИмя
					);
				Иначе
					
					ТранспортОписание.Проверен = Истина;
					
				КонецЕсли;
				
			Исключение
				
				ЗаписьЖурналаРегистрацииКлиент(
						"Ошибка"
					//,,,	"HTTP: " + ОписаниеОшибки()
					,,,	"HTTP сервер недоступен: " + ОписаниеОшибки()
					,	"Независимая"
					,	ПроизводительИмя
				);
				
				ТранспортОписание = Неопределено;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТранспортОписание <> Неопределено Тогда
	
		Транспорты.Добавить(ТранспортОписание);
	
	КонецЕсли;
	
	Возврат ТранспортОписание;

КонецФункции // Транспорт_Добавить()

&НаСервере
Функция Транспорт_Добавить_НаСервере(Транспорты, Знач ТранспортИмя, Знач Настройка, Знач НастройкиОбщие, Знач ПроизводительОписание, Знач ПроверятьДоступность = Ложь)
	
	Возврат ОбработкаОбъект().Транспорт_Добавить(Транспорты, ТранспортИмя, Настройка, НастройкиОбщие, ПроизводительОписание, ПроверятьДоступность);
	
КонецФункции // Транспорт_Добавить_НаСервере()

&НаКлиенте
Функция Транспорт_ВсеТранспорты(Знач Настройка, Знач НастройкиОбщие, Знач ПроизводительОписание)

	Перем Транспорты;
	
	Транспорты = Новый Массив;
	
	Транспорт_Добавить(Транспорты, "Файл"	, Настройка, НастройкиОбщие, ПроизводительОписание);
	Транспорт_Добавить(Транспорты, "ФТП"	, Настройка, НастройкиОбщие, ПроизводительОписание);
	Транспорт_Добавить(Транспорты, "HTTP"	, Настройка, НастройкиОбщие, ПроизводительОписание);
	
	Возврат Транспорты;

КонецФункции // Транспорт_ВсеТранспорты()

&НаКлиенте
Процедура Транспорт_ВсеТранспорты_Проверить(Знач Транспорты, Знач ОписаниеОповещения) Экспорт

	ТранспортыПроверяемыеИндексыМассив = Новый Массив;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Транспорты"							, Транспорты);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения"					, ОписаниеОповещения);
	ДополнительныеПараметры.Вставить("ТранспортыПроверяемыеИндексыМассив"	, ТранспортыПроверяемыеИндексыМассив);
	
	Для ТранспортИндекс = 0 По Транспорты.ВГраница() Цикл
	
		ТранспортОписание = Транспорты[ТранспортИндекс];
	
		Если ТранспортОписание.Проверен Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		ТранспортыПроверяемыеИндексыМассив.Добавить(ТранспортИндекс);
		
	КонецЦикла;
	
	Транспорт_ВсеТранспорты_ПроверитьАсинх(Неопределено, ДополнительныеПараметры);

КонецПроцедуры // Транспорт_ВсеТранспорты_Проверить()

&НаКлиенте
Процедура Транспорт_ВсеТранспорты_ПроверитьАсинх(Знач Результат, Знач ДополнительныеПараметры) Экспорт

	Транспорты							= ДополнительныеПараметры.Транспорты;
	ТранспортыПроверяемыеИндексыМассив	= ДополнительныеПараметры.ТранспортыПроверяемыеИндексыМассив;
	
	Если Не ЗначениеЗаполнено(Транспорты) Или Не ЗначениеЗаполнено(ТранспортыПроверяемыеИндексыМассив) Тогда
	
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Транспорты);
		Возврат;
	
	КонецЕсли;
	
	ТранспортИндекс		= ТранспортыПроверяемыеИндексыМассив[ТранспортыПроверяемыеИндексыМассив.ВГраница()];
	ТранспортОписание	= Транспорты[ТранспортИндекс];
	
	Если ТипЗнч(Результат) = Тип("Булево") Тогда
		
		ТранспортыПроверяемыеИндексыМассив.Удалить(ТранспортыПроверяемыеИндексыМассив.ВГраница());
		
		Если Не Результат Тогда
		
			Транспорты.Удалить(ТранспортИндекс);
		
		КонецЕсли;
		
		Транспорт_ВсеТранспорты_ПроверитьАсинх(Неопределено, ДополнительныеПараметры);
		
		Возврат;
	
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ТранспортОписание", ТранспортОписание);
	
	ТранспортИмя = ТранспортОписание.ТранспортИмя;
	
	Если ТранспортИмя = "ФАЙЛ" Тогда
	
		Файл = Новый Файл(ТранспортОписание.КаталогВыгрузки);
		
		ДополнительныеПараметры.Вставить("ОписаниеОшибкиШаблон", "%1. При проверке существования пути ""%2"" произошла ошибка: %3!");
		
		Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения(
			"КаталогОкончаниеПроверкиСуществования"
			, ЭтаФорма
			, ДополнительныеПараметры
			, "КаталогОкончаниеПроверкиЗаписиОшибка"
			, ЭтаФорма
		));
	
	КонецЕсли;

КонецПроцедуры // Транспорт_ВсеТранспорты_ПроверитьАсинх()

&НаКлиенте
Процедура КаталогОкончаниеПроверкиСуществования(Существует, ДополнительныеПараметры) Экспорт

	ТранспортОписание = ДополнительныеПараметры.ТранспортОписание;
	
	Если Не Существует Тогда
	
		ОбщегоНазначенияКлиентСообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1. Выбранный путь ""%2"" не существует!"
			, ИмяКомпьютераКлиент()
			, ТранспортОписание.КаталогВыгрузки
		));
		
		Транспорт_ВсеТранспорты_ПроверитьАсинх(Ложь, ДополнительныеПараметры);
		
		Возврат;
	
	КонецЕсли;
	
	ДополнительныеПараметры.ОписаниеОшибкиШаблон = "%1. При определении, что путь ""%2"" является каталогом, произошла ошибка: %3!";
	Файл = Новый Файл(ТранспортОписание.КаталогВыгрузки);

	Файл.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения(
		"КаталогОкончаниеПроверкиЭтоКаталог"
		, ЭтаФорма
		, ДополнительныеПараметры
		, "КаталогОкончаниеПроверкиЗаписиОшибка"
		, ЭтаФорма
	));
	
КонецПроцедуры // КаталогОкончаниеПроверкиСуществования()

&НаКлиенте
Процедура КаталогОкончаниеПроверкиЭтоКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт

	ТранспортОписание = ДополнительныеПараметры.ТранспортОписание;
	
	Если Не ЭтоКаталог Тогда
	
		ОбщегоНазначенияКлиентСообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1. Выбранный путь ""%2"" не является каталогом!"
			, ИмяКомпьютераКлиент()
			, ТранспортОписание.КаталогВыгрузки
		));
		
		Транспорт_ВсеТранспорты_ПроверитьАсинх(Ложь, ДополнительныеПараметры);
		
		Возврат;
	
	КонецЕсли;
	
	ВременныйФайл	= ТранспортОписание.КаталогВыгрузки + СтрЗаменить(Новый УникальныйИдентификатор, "-", "") + ".tmp";
	Поток			= Новый ПотокВПамяти;
	ДвоичныеДанные	= Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	ДополнительныеПараметры.ОписаниеОшибкиШаблон = "%1. Не могу записать тестовый файл в ""%2""!";
 	ДополнительныеПараметры.Вставить("ВременныйФайл", ВременныйФайл);

	ДвоичныеДанные.НачатьЗапись(Новый ОписаниеОповещения(
		"КаталогОкончаниеПроверкиЗаписи"
		, ЭтаФорма
		, ДополнительныеПараметры
		, "КаталогОкончаниеПроверкиЗаписиОшибка"
		, ЭтаФорма)
		
		, ВременныйФайл
	);
	
КонецПроцедуры // КаталогОкончаниеПроверкиЭтоКаталог()

&НаКлиенте
Процедура КаталогОкончаниеПроверкиЗаписи(ДополнительныеПараметры) Экспорт

	ТранспортОписание	= ДополнительныеПараметры.ТранспортОписание;
	
	НачатьУдалениеФайлов(Новый ОписаниеОповещения(
		"КаталогОкончаниеПроверкиУдаленияВременногоФайла"
		, ЭтаФорма
		, ДополнительныеПараметры
		, "КаталогОкончаниеПроверкиЗаписиОшибка"
		, ЭтаФорма)
		
		, ДополнительныеПараметры.ВременныйФайл
		, ""
	);
	
КонецПроцедуры // КаталогОкончаниеПроверкиЗаписи()

&НаКлиенте
Процедура КаталогОкончаниеПроверкиУдаленияВременногоФайла(ДополнительныеПараметры) Экспорт

	Транспорт_ВсеТранспорты_ПроверитьАсинх(Истина, ДополнительныеПараметры);
	
КонецПроцедуры // КаталогОкончаниеПроверкиЗаписи()

&НаКлиенте
Процедура КаталогОкончаниеПроверкиЗаписиОшибка(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт

	СтандартнаяОбработка = Ложь;
	
	ТранспортОписание = ДополнительныеПараметры.ТранспортОписание;
	
	ОбщегоНазначенияКлиентСообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ДополнительныеПараметры.ОписаниеОшибкиШаблон
		, ИмяКомпьютераКлиент()
		, ТранспортОписание.КаталогВыгрузки
		, ИнформацияОбОшибке.Описание
	));
	
	Транспорт_ВсеТранспорты_ПроверитьАсинх(Ложь, ДополнительныеПараметры);

КонецПроцедуры // КаталогОкончаниеПроверкиЗаписиОшибка()

&НаКлиенте
Процедура Транспорт_ОтправитьФайлы(Знач Транспорты)
	
	#Если ВебКлиент Тогда
		
		ТранспортыСервера = Новый Массив;
		
		Для х = -Транспорты.ВГраница() По 0 Цикл
			
			ТранспортОписание = Транспорты[-х];
			
			Если ТранспортОписание.ТранспортИмя = "ФТП" Или ТранспортОписание.ТранспортИмя = "HTTP" Тогда
			
				ТранспортыСервера.Добавить(ТранспортОписание);
				
				Транспорты.Удалить(-х);
			
			КонецЕсли;
			
		КонецЦикла;
			
		Если ЗначениеЗаполнено(ТранспортыСервера) Тогда
		
			Транспорт_ОтправитьФайлы_НаСервере(ТранспортыСервера);
		
		КонецЕсли;
		
	#КонецЕсли

	Для каждого ТранспортОписание Из Транспорты Цикл
		
		ДополнительныеПараметры	= ТранспортОписание.ДополнительныеПараметры;
		НастройкаИмя			= ДополнительныеПараметры.НастройкаИмя;
		ПроизводительИмя		= ДополнительныеПараметры.ПроизводительИмя;
		ФайлыДляОтправкиМассив	= ТранспортОписание.ФайлыДляОтправкиМассив;
		
		ТранспортИмя			= ТранспортОписание.ТранспортИмя;
		
		Если ТранспортИмя = "ФАЙЛ" Тогда
			
			КаталогВыгрузки = ТранспортОписание.КаталогВыгрузки;
			
			Для каждого ФайлОписание Из ФайлыДляОтправкиМассив Цикл
				
				ФайлДвоичныеДанные		= ФайлОписание.ФайлДвоичныеДанные;
				ФайлИмя					= ФайлОписание.ФайлИмя;
				ПутьФайла				= КаталогВыгрузки + ФайлОписание.ФайлИмя;
				
				ФайлДвоичныеДанные.НачатьЗапись(
					Новый ОписаниеОповещения(
						"СоздатьФайлНаКлиентеЗавершение"
						, ЭтаФорма
						, Новый Структура("ФайлОписание, ТранспортОписание", ФайлОписание, ТранспортОписание)
						, "СоздатьФайлНаКлиентеОшибка"
						, ЭтаФорма)
					, ПутьФайла);
					
			КонецЦикла;
			
		ИначеЕсли ТранспортИмя = "ФТП" Тогда
			
			#Если Не ВебКлиент Тогда
				
			Попытка
			
				ФТП = Фтп(ТранспортОписание.ФТП_Сервер, ТранспортОписание.ФТП_Порт, ТранспортОписание.ФТП_Логин, ТранспортОписание.ФТП_Пароль, ТранспортОписание.ФТП_Каталог);
			
			Исключение
				
				ЗаписьЖурналаРегистрацииКлиент(
						"Ошибка"
					,,,	"При подключении к FTP произошла ошибка: " + ОписаниеОшибки()
					,	"Независимая"
					,	ПроизводительИмя
				);
				
				Продолжить;
				
			КонецПопытки;
			
			Для каждого ФайлОписание Из ФайлыДляОтправкиМассив Цикл
				
				Попытка
				
					ФайлДвоичныеДанные		= ФайлОписание.ФайлДвоичныеДанные;
					ФайлИмя					= ФайлОписание.ФайлИмя;
				
					ПотокВПамяти = Новый ПотокВПамяти();
					ЗаписьДанных = Новый ЗаписьДанных(ПотокВПамяти);
					
					ЗаписьДанных.Записать(ФайлДвоичныеДанные);
					ЗаписьДанных.Закрыть();
					ПотокВПамяти.Перейти(0, ПозицияВПотоке.Начало);
					
					ФТП.Записать(ФайлИмя, ПотокВПамяти);
					ПотокВПамяти.Закрыть();
					
					ЗаписьЖурналаРегистрацииКлиент(
							"Информация"
						,,,	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								"%1. Файл отправлен на FTP: %2, %3"
								, НастройкаИмя						// 1
								, ФайлИмя							// 2
								, ФайлОписание.ФайлПредставление	// 3
							)
						,	"Независимая"
						,	ПроизводительИмя
					);
				
				Исключение
					
					ЗаписьЖурналаРегистрацииКлиент(
							"Информация"
						,,,	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								"%1. Файл НЕ БЫЛ отправлен на FTP: %2, %3 %4"
								, НастройкаИмя						// 1
								, ФайлИмя							// 2
								, ФайлОписание.ФайлПредставление	// 3
								, ОписаниеОшибки()					// 4
							)
						,	"Независимая"
						,	ПроизводительИмя
					);
					
					Прервать;
				
				КонецПопытки;
				
			КонецЦикла;
			
			#КонецЕсли
			
		ИначеЕсли ТранспортИмя = "HTTP" Тогда
			
			#Если Не ВебКлиент Тогда
			Попытка
				
				ФайлыПредставление = Новый Массив;
				Для каждого ФайлОписание Из ФайлыДляОтправкиМассив Цикл
					
					ФайлыПредставление.Добавить(ФайлОписание.ФайлИмя + " " + ФайлОписание.ФайлПредставление);
					
				КонецЦикла;
			
				СообщениеСервера = HTTP_Сервер_ОтправитьФайлы(
					ТранспортОписание.HTTP_ПартнерИмя
					, ТранспортОписание.HTTP_Сервер
					, ТранспортОписание.HTTP_API_KEY
					, ФайлыДляОтправкиМассив
				);
	
				ЗаписьЖурналаРегистрацииКлиент(
						"Информация"
					,,,	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"%1. Отправка файлов {%2} на %3 (%4) выполнено успешно: %5"
							, НастройкаИмя								// 1
							, СтрСоединить(ФайлыПредставление, "; ")	// 2
							, ТранспортОписание.HTTP_Сервер				// 3
							, ТранспортОписание.HTTP_ПартнерИмя			// 4
							, СообщениеСервера							// 5
							)
					,	"Независимая"
					,	ПроизводительИмя
				);
				
			Исключение
				
				ЗаписьЖурналаРегистрацииКлиент(
						"Ошибка"
					,,,	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"%1. Отправка файлов {%2} на %3 (%4) завершилась с ошибкой: %5"
							, НастройкаИмя										// 1
							, СтрСоединить(ФайлыПредставление, "; ")			// 2
							, ТранспортОписание.HTTP_Сервер						// 3
							, ТранспортОписание.HTTP_ПартнерИмя					// 4
							, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())	// 5
							)
					,	"Независимая"
					,	ПроизводительИмя
				);
				
			КонецПопытки;
			#КонецЕсли

		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // Транспорт_ОтправитьФайлы()

&НаСервере
Процедура Транспорт_ОтправитьФайлы_НаСервере(Знач Транспорты)
	
	ОбработкаОбъект().Транспорт_ОтправитьФайлы(Транспорты);
	
КонецПроцедуры // Транспорт_ОтправитьФайлы_НаСервере()

&НаКлиенте
Процедура СоздатьФайлНаКлиентеЗавершение(Знач ДополнительныеПараметры) Экспорт
	
	Перем ФайлОписание, НастройкаИмя, ПутьФайла;
	
	ФайлОписание		= ДополнительныеПараметры.ФайлОписание;
	
	ТранспортОписание	= ДополнительныеПараметры.ТранспортОписание;
	ПутьФайла			= ТранспортОписание.КаталогВыгрузки + ФайлОписание.ФайлИмя;
	НастройкаИмя		= ТранспортОписание.ДополнительныеПараметры.НастройкаИмя;
	ПроизводительИмя	= ТранспортОписание.ДополнительныеПараметры.ПроизводительИмя;
					
	ЗаписьЖурналаРегистрацииКлиент(
			"Информация"
		,,,	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1. Файл создан %2, %3"
				, НастройкаИмя							// 1
				, ПутьФайла								// 2
				, ФайлОписание.ФайлПредставление		// 3
			)
		,	"Независимая"
		,	ПроизводительИмя
	);
				
КонецПроцедуры // СоздатьФайлНаКлиентеЗавершение()

&НаКлиенте
Процедура СоздатьФайлНаКлиентеОшибка(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	Перем ФайлОписание, НастройкаИмя, ПутьФайла;
	
	ФайлОписание		= ДополнительныеПараметры.ФайлОписание;
	
	ТранспортОписание	= ДополнительныеПараметры.ТранспортОписание;
	ПутьФайла			= ТранспортОписание.КаталогВыгрузки + ФайлОписание.ФайлИмя;
	НастройкаИмя		= ТранспортОписание.ДополнительныеПараметры.НастройкаИмя;
	ПроизводительИмя	= ТранспортОписание.ДополнительныеПараметры.ПроизводительИмя;
	
	ЗаписьЖурналаРегистрацииКлиент(
			"Ошибка"
		,,,	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1. Файл НЕ БЫЛ создан %2, %3:
				|%4"
				, НастройкаИмя											// 1
				, ПутьФайла												// 2
				, ФайлОписание.ФайлПредставление						// 3
				, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())		// 4
			)
		,	"Независимая"
		,	ПроизводительИмя
	);
	
КонецПроцедуры // СоздатьФайлНаКлиентеОшибка()

#КонецОбласти

&НаСервере
Функция ЗаписьЖурналаРегистрацииКлиент(Знач Уровень, Знач ОбъектМетаданных, Знач Данные, Знач Комментарий, Знач РежимТранзакции, Знач manf)

	ОбработкаОбъект().ЗаписьЖурналаРегистрацииКлиент(
		Уровень, ОбъектМетаданных, Данные, Комментарий, РежимТранзакции, manf
	);
	
КонецФункции // ЗаписьЖурналаРегистрацииКлиент()

&НаКлиенте
Функция ИмяКомпьютераКлиент()
	Перем ИмяКомпьютера;
	
	#Если ВебКлиент Тогда
		ИмяКомпьютера = "Этот компьютер";
	#Иначе
		ИмяКомпьютера = ИмяКомпьютера();
	#КонецЕсли
	
	Возврат ИмяКомпьютера;
КонецФункции // ИмяКомпьютераКлиент()

&НаСервере
Функция ПолучитьДанныеВФоне(Знач ИмяМетода, Знач ОбработкаОбъект, Знач ПараметрыВыгрузки)

	Перем ОбработкаСсылка, Версия, НастройкаИмя;
	
	//Возврат Неопределено; // ТЕСТ
	
	Попытка
	
		ВыполнитьВФоне = Не ОбщегоНазначения.РежимОтладки();
	
	Исключение
		
		ВыполнитьВФоне = Истина;
		
	КонецПопытки;
	
//ВыполнитьВФоне = Ложь;
	
	Если ВыполнитьВФоне Тогда
		
		ВыполнитьВФоне = Ложь;
		
		ОбработкаСсылка	= ОбработкаОбъект.ВнешняяОбработкаСсылка();
		
		Если ЗначениеЗаполнено(ОбработкаСсылка) Тогда
		
			Версия = ОбработкаОбъект.СведенияОВнешнейОбработке().Версия;
			
			Если СокрЛП(Версия) = СокрЛП(ОбработкаСсылка.Версия) Тогда
			
				// Актуальная версия, можно выполнять в фоне
				
				ВыполнитьВФоне = Истина;
			
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	Если Не ВыполнитьВФоне Тогда
	
		Возврат Неопределено;
	
	КонецЕсли;
	
	НастройкаИмя = ""; Зпт = "";
	Для каждого Настройка Из ПараметрыВыгрузки.Настройки Цикл
	
		НастройкаИмя = НастройкаИмя + Зпт + """" + Настройка.НастройкаИмя + """";
		Зпт = ", ";
	
	КонецЦикла;
	
	НаименованиеЗадания	= НСтр("ru = '(Сислинк) Получение данных для " + НастройкаИмя + "'");
	
	ВыполняемыйМетод	= "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки";
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяОбработки"					, ЭтаФорма.Переменные.ПолноеИмяОбъекта);
	ПараметрыЗадания.Вставить("ИмяМетода"						, ИмяМетода);
	ПараметрыЗадания.Вставить("ПараметрыВыполнения"				, ПараметрыВыгрузки);
	ПараметрыЗадания.Вставить("ЭтоВнешняяОбработка"				, Истина);
	ПараметрыЗадания.Вставить("ДополнительнаяОбработкаСсылка"	, ОбработкаСсылка);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
			ВыполняемыйМетод
		,	ПараметрыЗадания
		,	ПараметрыВыполнения
		);
		
	Возврат РезультатФоновогоЗадания;

КонецФункции // ПолучитьДанныеВФоне()

&НаКлиенте
Процедура ПодключитьОбработчикРезультата(Знач РезультатФоновогоЗадания, Знач НастройкиОбщие)

	// Задание выполняется в фоне - ничего не делаем, ждем окончания
	
    ЭтаФорма.Переменные.Вставить("РезультатФоновогоЗадания", РезультатФоновогоЗадания);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
	
	ПараметрыОжидания.ВыводитьПрогрессВыполнения	= Истина;
	ПараметрыОжидания.ВыводитьОкноОжидания			= Ложь;
	
	Если ПараметрыОжидания.ВыводитьПрогрессВыполнения Тогда
	
		ПараметрыОжидания.ОповещениеОПрогрессеВыполнения	= Новый ОписаниеОповещения(
				"ФоновоеЗаданиеПрогрессВыполнения"
			,	ЭтаФорма
		);
	
	КонецЕсли;
	ПараметрыОжидания.Интервал = 1;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НастройкиОбщие", НастройкиОбщие);
	
	// подключаем обработчик ожидания и указываем описание оповещения о завершении задания	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ЭтаФорма.Переменные.РезультатФоновогоЗадания
		,	Новый ОписаниеОповещения("ФоновоеЗаданиеПриЗавершенииДлительнойОперации", ЭтаФорма, ДополнительныеПараметры)
		,	ПараметрыОжидания
	);	

КонецПроцедуры // ПодключитьОбработчикРезультата()

&НаКлиенте
Функция Фтп(Знач ФТП_Сервер, Знач ФТП_Порт, Знач ФТП_Логин, Знач ФТП_Пароль, Знач ФТП_Каталог, Знач Таймаут = 180)
	Перем Прокси, ФТП;
	
	#Если Не ВебКлиент Тогда
	Попытка
	
		Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("FTP");
		
	Исключение
		
		Прокси = Неопределено;
		
	КонецПопытки;
	
	ФТП = Новый FTPСоединение(
			СокрЛП(ФТП_Сервер)
		,	ФТП_Порт
		,	СокрЛП(ФТП_Логин)
		,	СокрЛП(ФТП_Пароль)
		,	Прокси
		,	Истина
		,	Таймаут
	);
	
	Разделитель		= "/";
	КаталогПолный	= "";
	Для каждого ФТП_Каталог Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФТП_Каталог, Разделитель, Истина, Истина) Цикл
		
		КаталогПолный = КаталогПолный + ФТП_Каталог + Разделитель;
		
		Попытка
		
			ФТП.УстановитьТекущийКаталог(ФТП_Каталог);
		
		Исключение
			
			ВызватьИсключение "Авторизация на ФТП пройдена, но при чтении каталога """ + Лев(КаталогПолный, СтрДлина(КаталогПолный) - 1) + """ произошла ошибка: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
		КонецПопытки;
	
	КонецЦикла;

	Возврат ФТП;
	
	#Иначе

	ВызватьИсключение "FTP не доступно на веб-клиенте";
		
	#КонецЕсли
	
КонецФункции // ФтпНаКлиенте()

&НаКлиенте
Функция ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	
	Если ИдентификаторКоманды = "ВыгрузкаДанных_АвтоРежим_Клиент" Тогда
		Автообмен(Серриализация_Загрузка());
	КонецЕсли;
	
КонецФункции // ВыполнитьКоманду()

&НаКлиентеНаСервереБезКонтекста
Функция ТипизироватьПоШаблону(Знач ШаблонНастроек, Знач СтруктураДанных = Неопределено)
	Перем ОТ, СтруктураДанныхКорректная, Значение;
	
	ОТ = Новый ОписаниеТипов("Структура");
	СтруктураДанных = ОТ.ПривестиЗначение(СтруктураДанных);

	СтруктураДанныхКорректная = Новый Структура;
	Для каждого КлючИЗначение Из ШаблонНастроек Цикл
	
		ОТ = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(КлючИЗначение.Значение)));
		СтруктураДанных.Свойство(КлючИЗначение.Ключ, Значение);
		СтруктураДанныхКорректная.Вставить(КлючИЗначение.Ключ, ОТ.ПривестиЗначение(Значение));
	
	КонецЦикла;
	
	Возврат СтруктураДанныхКорректная;
	
КонецФункции // ТипизироватьПоШаблону()

&НаКлиенте
Функция ПараметрыВыгрузкиИзФормыВсеНаКлиенте() Экспорт

	Возврат ПараметрыВыгрузкиИзФормыВсе();

КонецФункции // ПараметрыВыгрузкиИзФормыВсеНаКлиенте()

&НаСервере
Функция ПараметрыВыгрузкиИзФормы()

	Настройка = Новый Структура;
	Настройка.Вставить("ОсновнаяОрганизация"		, ОсновнаяОрганизация);
	Настройка.Вставить("КаталогВыгрузки"			, СокрЛП(КаталогВыгрузки));
	Настройка.Вставить("ДатаНач"					, НачалоДня(ПериодВыгрузки.ДатаНачала));
	Настройка.Вставить("ДатаКон"					, КонецДня(ПериодВыгрузки.ДатаОкончания));
	
	Настройка.Вставить("ФТП_Использовать"			, ФТП_Использовать);
	Настройка.Вставить("ФТП_Логин"					, ФТП_Логин);
	Настройка.Вставить("ФТП_Пароль"					, ФТП_Пароль);
	
	Настройка.Вставить("ДобавлятьКНомерам"			, ДобавлятьКНомерам);
	Настройка.Вставить("БезНомеровТТН"				, БезНомеровТТН);
	Настройка.Вставить("НастройкаИмя"				, ВариантНастройки);
	Настройка.Вставить("НастройкаИспользуется"		, ВариантНастройкиИспользуется);
	Настройка.Вставить("manfid"						, manfid);
	Настройка.Вставить("Версия"						, Версия);
	Настройка.Вставить("ПериодВыгрузкиДней"			, ПериодВыгрузкиДней);
	Настройка.Вставить("ВидЦеныРозничная"			, ВидЦеныРозничная);
	
	Настройка.Вставить("HTTP_Использовать"			, HTTP_Использовать);
	Настройка.Вставить("HTTP_API_KEY"				, HTTP_API_KEY);
	Настройка.Вставить("HTTP_ПартнерИмя"			, HTTP_ПартнерИмя);
	
	ОбработкаОбъект = ОбработкаОбъект();
	
	Для каждого КлючИЗначение Из ЭтаФорма.Переменные.Отборы Цикл
		ЭлементФормы = Элементы.Найти(КлючИЗначение.Ключ);
		
		РеквизитыФормы = Новый Структура;
		РеквизитыФормы.Вставить(КлючИЗначение.Ключ, );
		ЗаполнитьЗначенияСвойств(РеквизитыФормы, ЭтаФорма);
		
		РеквизитФормы = РеквизитыФормы[КлючИЗначение.Ключ];
		
		Если	ЭлементФормы			= Неопределено
			или ТипЗнч(ЭлементФормы)	<> Тип("ПолеФормы")
			или ТипЗнч(РеквизитФормы)	<> Тип("КомпоновщикНастроекКомпоновкиДанных")
		Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		Настройка.Вставить(
				КлючИЗначение.Ключ
			,	ОбработкаОбъект.ОтборВМассив(РеквизитФормы.ПолучитьНастройки().Отбор.Элементы)
		);
	
	КонецЦикла;
	
	НастройкаШаблон = Новый Структура(ЭтаФорма.Переменные.НастройкиВыгрузкиШаблон.Настройка);
	Возврат ТипизироватьПоШаблону(НастройкаШаблон, Настройка);
	
КонецФункции // ПараметрыВыгрузкиИзФормы()

&НаКлиенте
Функция ПараметрыВыгрузкиИзФормыОбщие()
	Перем НастройкиОбщие;
	
	НастройкиОбщие = Новый Структура;
	НастройкиОбщие.Вставить("РежимРаботыКлиент"							, Булево(РежимРаботыКлиент));
	НастройкиОбщие.Вставить("Округлять"									, Округлять);
	НастройкиОбщие.Вставить("СобственныйКонвертер_в_ANSI"				, СобственныйКонвертер_в_ANSI);
	НастройкиОбщие.Вставить("КодировкаТекста"							, КодировкаТекста);
	НастройкиОбщие.Вставить("ТорговыйПредставитель"						, ТорговыйПредставитель);
	НастройкиОбщие.Вставить("ТорговойТочкойЯвляется"					, ТорговойТочкойЯвляется);
	НастройкиОбщие.Вставить("ТипыДокументов"							, ТипыДокументов);
	НастройкиОбщие.Вставить("ТаблицаПересчета"							, ЭтаФорма.Переменные.ТаблицаПересчета);
	НастройкиОбщие.Вставить("ТаблицаТранслита"							, ЭтаФорма.Переменные.ТаблицаТранслита);
	НастройкиОбщие.Вставить("ДополнительныеСведения"					, ЭтаФорма.Переменные.ДополнительныеСведения);
	НастройкиОбщие.Вставить("ТипыФилиалов"								, ЭтаФорма.Переменные.ТипыФилиалов);
	НастройкиОбщие.Вставить("НеВыгружатьСерии"							, НеВыгружатьСерии);
	НастройкиОбщие.Вставить("ПеремещенияКакПродажи"						, ПеремещенияКакПродажи);
	НастройкиОбщие.Вставить("КлиентыБезПерсональныхДанных"				, КлиентыБезПерсональныхДанных);
	НастройкиОбщие.Вставить("ПродажиПоЗакупочнымЦенам"					, ПродажиПоЗакупочнымЦенам);
	НастройкиОбщие.Вставить("ДатаНачалаУчета"							, ДатаНачалаУчета);
	НастройкиОбщие.Вставить("СвойствоКаналРынка"						, СвойствоКаналРынка);
	НастройкиОбщие.Вставить("СвойствоЗамещающийКлиент"					, СвойствоЗамещающийКлиент);
	НастройкиОбщие.Вставить("СвойствоТорговыйПредставитель"				, СвойствоТорговыйПредставитель);
	НастройкиОбщие.Вставить("ВидЦеныЗакупочная"							, ВидЦеныЗакупочная);
	НастройкиОбщие.Вставить("ИспользоватьВнутренниеКодыХарактеристик"	, ИспользоватьВнутренниеКодыХарактеристик);
	
	НастройкиОбщие.Вставить("HTTP_Использовать"							, НастройкиОбщие_HTTP_Использовать);
	НастройкиОбщие.Вставить("HTTP_API_KEY"								, НастройкиОбщие_HTTP_API_KEY);
	
	Возврат ТипизироватьПоШаблону(ЭтаФорма.Переменные.НастройкиВыгрузкиШаблон.НастройкиОбщие, НастройкиОбщие);
	
КонецФункции // ПараметрыВыгрузкиИзФормыОбщие()

&НаКлиенте
Функция ПараметрыВыгрузкиИзФормыВсе()

	Перем Настройки;
	
	Настройка = ПараметрыВыгрузкиИзФормы();
	
	ВариантНастройкиВставить(Настройка);
	
	Настройки = Новый Массив;
	
	Для каждого СписокВыбораСтрока Из Элементы.ВариантНастройки.СписокВыбора Цикл
		
		НастройкаИмя	= СписокВыбораСтрока.Значение;
		
		Настройка		= ЭтаФорма.Переменные.Настройки[НастройкаИмя];
		
		Настройки.Добавить(Настройка);
	
	КонецЦикла;
	
	НастройкиВыгрузки = Новый Структура;
	НастройкиВыгрузки.Вставить("Настройки"			, Настройки);
	НастройкиВыгрузки.Вставить("НастройкиОбщие"		, ПараметрыВыгрузкиИзФормыОбщие());
	
	ТД = ТекущаяДата();
	
	Для каждого Настройка Из Настройки Цикл
	
		Если ЭтаФорма.ПериодВыгрузкиЗапоминать Тогда
		
			Настройка.ДатаНач = ПериодВыгрузки.ДатаНачала;
			Настройка.ДатаКон = ПериодВыгрузки.ДатаОкончания;
			
		Иначе
			
			Настройка.ДатаНач = НачалоДня(ТД) - (Настройка.ПериодВыгрузкиДней - 1) * 24 * 3600;
			Настройка.ДатаКон = КонецДня(ТД);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НастройкиВыгрузки.НастройкиОбщие.ДатаНачалаУчета) Тогда
		
			Настройка.ДатаНач = Макс(Настройка.ДатаНач, НастройкиВыгрузки.НастройкиОбщие.ДатаНачалаУчета);
		
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат НастройкиВыгрузки;

КонецФункции // ПараметрыВыгрузкиИзФормыВсе()

&НаСервере
Процедура НастройкаНаФорму(Знач Настройка)

	ВариантНастройки			= Настройка.НастройкаИмя;
	
	КаталогВыгрузки				= Настройка.КаталогВыгрузки;
	
	Элементы.ОсновнаяОрганизация.Видимость = Настройка.Свойство("ОсновнаяОрганизация", ОсновнаяОрганизация);
	
	ЭтаФорма.ВариантНастройки					= Настройка.НастройкаИмя;
	ЭтаФорма.ВариантНастройкиИспользуется		= Настройка.НастройкаИспользуется;
	ЭтаФорма.manfid								= Настройка.manfid;
	ЭтаФорма.Версия								= Настройка.Версия;
	
	ЭтаФорма.ФТП_Использовать					= Настройка.ФТП_Использовать;
	ЭтаФорма.ФТП_Логин							= Настройка.ФТП_Логин;
	ЭтаФорма.ФТП_Пароль							= Настройка.ФТП_Пароль;
	
	ЭтаФорма.HTTP_Использовать					= Настройка.HTTP_Использовать;
	ЭтаФорма.HTTP_API_KEY						= Настройка.HTTP_API_KEY;
	ЭтаФорма.HTTP_ПартнерИмя					= Настройка.HTTP_ПартнерИмя;
	
	Настройка.Свойство("ДобавлятьКНомерам"		, ДобавлятьКНомерам);
	Настройка.Свойство("БезНомеровТТН"			, БезНомеровТТН);
	
	ЭтаФорма.ПериодВыгрузкиДней					= Настройка.ПериодВыгрузкиДней;
	
	Настройка.Свойство("ВидЦеныРозничная"		, ВидЦеныРозничная);
	
	ПроизводительПриИзменении(Ложь);
	
	#Область Настройка_Отборы
	
	Для каждого КлючИЗначение Из ЭтаФорма.Переменные.Отборы Цикл
		ЭлементФормы = Элементы.Найти(КлючИЗначение.Ключ);
		
		РеквизитыФормы = Новый Структура;
		РеквизитыФормы.Вставить(КлючИЗначение.Ключ, );
		ЗаполнитьЗначенияСвойств(РеквизитыФормы, ЭтаФорма);
		
		РеквизитФормы = РеквизитыФормы[КлючИЗначение.Ключ];
		
		Если	ЭлементФормы			= Неопределено
			или ТипЗнч(ЭлементФормы)	<> Тип("ПолеФормы")
			или ТипЗнч(РеквизитФормы)	<> Тип("КомпоновщикНастроекКомпоновкиДанных")
		Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		МассивВОтбор(КлючИЗначение.Ключ, Настройка[КлючИЗначение.Ключ]);
	
	КонецЦикла;
	
	#КонецОбласти

	ВариантНастройкиУстановитьЗаголовок();
	
	СписокВыбора = Элементы.ВариантНастройки.СписокВыбора;
	СписокВыбораСтрока = СписокВыбора.НайтиПоЗначению(Настройка.НастройкаИмя);
	СписокВыбораСтрока.Представление = ВариантНастройкиПредставление(Настройка);
	
КонецПроцедуры // НастройкаНаФорму()

&НаСервере
Функция МассивВОтбор(Знач ОтборРеквизитИмя, Знач ОтборМассив, Знач ОтборУстановлен = Ложь)
	
	ОбработкаОбъект	= ОбработкаОбъект();
	
	РеквизитФормы	= ЭтаФорма[ОтборРеквизитИмя];
	
	ОтборЭлементы	= РеквизитФормы.Настройки.Отбор.Элементы;
	
	Возврат ОбработкаОбъект.МассивВОтбор(ОтборЭлементы, ОтборМассив, ОтборУстановлен);
	
КонецФункции // МассивВОтбор()

&НаКлиенте
Процедура ПолеОтбораСКД_Очистка(Элемент, СтандартнаяОбработка)
	Перем ОтборСкдОписание;
	
	Если Не ЭтаФорма.Переменные.Отборы.Свойство(Элемент.Имя, ОтборСкдОписание) Тогда
	
		Возврат;
	
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	МассивВОтбор(Элемент.Имя, Новый Массив);

КонецПроцедуры // ПолеОтбораСКД_Очистка()

&НаСервере
Функция Серриализация_Загрузка()
	Перем ОбработкаОбъект;
	
	ОбработкаОбъект = ОбработкаОбъект();
	
	Возврат ОбработкаОбъект.Серриализация_Загрузка();
	
КонецФункции // Серриализация_Загрузка()

// Сохраняет настройки во внешнюю обработку
//
&НаСервере
Функция НастройкиИзменились(Знач НастройкиНовые)
	Перем НастройкиСтарые, РеквизитИмя;
	
	ОбработкаОбъект = ОбработкаОбъект();
	
	Возврат ОбработкаОбъект.НастройкиИзменились(НастройкиНовые);
	
	//НастройкиСтарые = ОбработкаОбъект.Серриализация_Загрузка();
	//
	//ИсключаемыеРеквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
	//	ВРег("Настройки.ДатаНач,Настройки.ДатаКон")
	//	, ",", Истина, Истина
	//);
	//
	//Если ЗначенияРавны(НастройкиСтарые, НастройкиНовые, ИсключаемыеРеквизиты, РеквизитИмя) Тогда
	//
	//	Возврат Неопределено;
	//
	//КонецЕсли;
	//
	//Возврат НастройкиНовые;
КонецФункции // НастройкиИзменились()

&НаСервере
Процедура Серриализация_Сохранение(Знач ВнешняяОбработкаСсылка, Знач НастройкиНовые)

	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(ВнешняяОбработкаСсылка);
		
	Исключение
		
		ТекстОшибки = НСтр("ru='Не удалось заблокировать %Объект%. %ОписаниеОшибки%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Объект%"			, ВнешняяОбработкаСсылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%"	, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Попытка
		
			ОбщегоНазначенияСообщитьПользователю(ТекстОшибки, ВнешняяОбработкаСсылка);
		
		Исключение
			
			ОбщегоНазначенияСообщитьПользователю("" + ТекстОшибки + ", """ + ВнешняяОбработкаСсылка + """!");
			
		КонецПопытки;
		
		Возврат;
	КонецПопытки;
	
	ВнешняяОбработкаОбъект = ВнешняяОбработкаСсылка.ПолучитьОбъект();
	ВнешняяОбработкаОбъект.ХранилищеНастроек = Новый ХранилищеЗначения(НастройкиНовые);
	ВнешняяОбработкаОбъект.Записать();
	
	ЭтаФорма.Модифицированность = Ложь;
	
КонецПроцедуры // Серриализация_Сохранение()

&НаКлиенте
Процедура ТаблицаФормы_Колонка_Очистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры // ТаблицаФормы_Колонка_Очистка()

&НаКлиенте
Процедура ТаблицаФормы_Колонка_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры // ТаблицаФормы_Колонка_НачалоВыбора()

&НаКлиенте
Процедура ТаблицаФормы_Колонка_НачалоВыбораИзСписка(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры // ТаблицаФормы_Колонка_НачалоВыбораИзСписка()

Процедура УдалитьТаблицыФормы()

	Сигнатура = "ТаблицаДанных_";
	
	УдаляемыеРеквизиты = Новый Массив;
	Для каждого Реквизит Из ПолучитьРеквизиты() Цикл
		Если СтрНачинаетсяС(Реквизит.Имя, Сигнатура) Тогда
		
			УдаляемыеРеквизиты.Добавить(Реквизит.Имя);
		
		КонецЕсли;
	КонецЦикла;
	
	Если УдаляемыеРеквизиты.Количество() Тогда
	
		ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
	КонецЕсли;
	
	УдаляемыеРеквизиты = Новый Массив;
	Для каждого ЭлементФормы Из Элементы Цикл
	
		Если СтрНачинаетсяС(ЭлементФормы.Имя, Сигнатура) Тогда
		
			УдаляемыеРеквизиты.Добавить(ЭлементФормы.Имя);
		
		КонецЕсли;
	
	КонецЦикла;
	
	Для каждого ЭлементФормыИмя Из УдаляемыеРеквизиты Цикл
		
		ЭлементФормы = Элементы.Найти(ЭлементФормыИмя);
		
		Если ЭлементФормы <> Неопределено Тогда
		
			Элементы.Удалить(ЭлементФормы);
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры // УдалитьТаблицыФормы()

&НаСервере
Функция МассивОписанийТаблицВТаблицыФормы(Знач РезультатВыгрузкиМассив)
	Перем РезультатОписание;
	
	Если ТипЗнч(РезультатВыгрузкиМассив) = Тип("Строка") Тогда
	
		РезультатВыгрузкиМассив = ПолучитьИзВременногоХранилища(РезультатВыгрузкиМассив);
		
	КонецЕсли;
	
	ОТ = Новый ОписаниеТипов("Массив");
	РезультатВыгрузкиМассив = ОТ.ПривестиЗначение(РезультатВыгрузкиМассив);
	
	Сигнатура = "ТаблицаДанных_";
	
	Для каждого РезультатВыгрузкиОписание Из РезультатВыгрузкиМассив Цикл
		
		Если РезультатВыгрузкиОписание = Неопределено Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		МассивОписанийТаблиц	= РезультатВыгрузкиОписание.Данные;
		
		Если МассивОписанийТаблиц = Неопределено Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		НастройкаПредставление	= РезультатВыгрузкиОписание.Настройка.НастройкаИмя;
		НастройкаИмя			= Сигнатура + СтрЗаменить(Новый УникальныйИдентификатор, "-", "") + "_";
		
		СтраницаНастройки = Элементы.Добавить(НастройкаИмя + "ЗакладкаНастройки", Тип("ГруппаФормы"), Элементы.ГруппаСтраницы); //Закладки  ГруппаСтраницыСтраницаДанные
		СтраницаНастройки.Заголовок				= НастройкаПредставление;
		СтраницаНастройки.ОтображениеПодсказки	= ОтображениеПодсказки.Всплывающая;
		СтраницаНастройки.Подсказка				= "?" + СтраницаНастройки.Заголовок;
		
		СтраницыНастройки = Элементы.Добавить(НастройкаИмя + "ЗакладкаНастройкиСтраницы", Тип("ГруппаФормы"), СтраницаНастройки);
		СтраницыНастройки.Вид = ВидГруппыФормы.Страницы;
		СтраницыНастройки.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		
		Для х = 0 По МассивОписанийТаблиц.ВГраница() Цикл
		
			ОписаниеТаблицыСтруктура = МассивОписанийТаблиц[х];
		
			ТЗ						= ОписаниеТаблицыСтруктура.ТЗ;
			ТаблицаИмя				= НастройкаИмя + ОписаниеТаблицыСтруктура.Имя;
			ТаблицаПредставление	= ОписаниеТаблицыСтруктура.Представление;
				
			ДобавляемыеРеквизиты	= Новый Массив;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ТаблицаИмя, Новый ОписаниеТипов("ТаблицаЗначений"),"", НастройкаПредставление, Ложь));
			Для каждого ТзКолонка Из ТЗ.Колонки Цикл
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
					ТзКолонка.Имя
					, Новый ОписаниеТипов(ТзКолонка.ТипЗначения, , , , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная), Новый КвалификаторыДаты(ЧастиДаты.Дата))
					, ТаблицаИмя
					, ""
					, Ложь
				));
			КонецЦикла;
			ИзменитьРеквизиты(ДобавляемыеРеквизиты);
			
			Страница = Элементы.Добавить(ТаблицаИмя + "ЗакладкаНастройкиСтраницыСтраница", Тип("ГруппаФормы"), СтраницыНастройки);
			Страница.Заголовок				= "[" + (х + 1) + "] " + ТаблицаПредставление;
			Страница.ОтображениеПодсказки	= ОтображениеПодсказки.Всплывающая;
			Страница.Подсказка				= "?" + Страница.Заголовок;
			
			ТаблицаФормы = Элементы.Добавить(ТаблицаИмя, Тип("ТаблицаФормы"), Страница);
			
			ТаблицаФормы.ПутьКДанным				= ТаблицаИмя;
			ТаблицаФормы.ИзменятьПорядокСтрок		= Ложь;
			ТаблицаФормы.ИзменятьСоставСтрок		= Ложь;
			ТаблицаФормы.ПоложениеКоманднойПанели	= ПоложениеКоманднойПанелиЭлементаФормы.Верх;
			ТаблицаФормы.ПоложениеСтрокиПоиска		= ПоложениеСтрокиПоиска.Верх;
			ТаблицаФормы.ПоложениеЗаголовка			= ПоложениеЗаголовкаЭлементаФормы.Низ;
			ТаблицаФормы.ШрифтЗаголовка				= Новый Шрифт(ТаблицаФормы.ШрифтЗаголовка, , , Истина, , Истина);
			ТаблицаФормы.ЦветТекстаЗаголовка		= Новый Цвет(0, 0, 255);
			
			Для каждого ТзКолонка Из ТЗ.Колонки Цикл
				ТаблицаФормы_Колонка = Элементы.Добавить(ТаблицаИмя + ТзКолонка.Имя, Тип("ПолеФормы"), ТаблицаФормы);
				
				ТаблицаФормы_Колонка.Вид						= ВидПоляФормы.ПолеВвода;
				ТаблицаФормы_Колонка.ПутьКДанным				= ТаблицаИмя + "." + ТзКолонка.Имя;
				ТаблицаФормы_Колонка.РедактированиеТекста		= Ложь;
				ТаблицаФормы_Колонка.КнопкаОчистки				= Ложь;
				ТаблицаФормы_Колонка.КнопкаВыбора				= Ложь;
				ТаблицаФормы_Колонка.КнопкаСоздания				= Ложь;
				ТаблицаФормы_Колонка.КнопкаВыпадающегоСписка	= Ложь;
				ТаблицаФормы_Колонка.ВыбиратьТип				= Ложь;
				ТаблицаФормы_Колонка.ИсторияВыбораПриВводе		= ИсторияВыбораПриВводе.НеИспользовать;
				ТаблицаФормы_Колонка.Заголовок					= "[" + (1 + ТЗ.Колонки.Индекс(ТзКолонка)) + "] " + ТзКолонка.Имя;
				
				Если ТЗ.Колонки.Количество() > 10 и ТЗ.Колонки.Индекс(ТзКолонка) < 3 Тогда
				
					ТаблицаФормы_Колонка.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
				
				КонецЕсли;
				
				ТаблицаФормы_Колонка.УстановитьДействие("Очистка"				, "ТаблицаФормы_Колонка_Очистка");
				ТаблицаФормы_Колонка.УстановитьДействие("НачалоВыбора"			, "ТаблицаФормы_Колонка_НачалоВыбора");
				ТаблицаФормы_Колонка.УстановитьДействие("НачалоВыбораИзСписка"	, "ТаблицаФормы_Колонка_НачалоВыбораИзСписка");
			КонецЦикла;
			
			ЗначениеВРеквизитФормы(ТЗ, ТаблицаИмя);
			
			ОписаниеТаблицыСтруктура.Вставить("КоличествоСтрок", ТЗ.Количество());
			ОписаниеТаблицыСтруктура.Удалить("ТЗ");
			
		КонецЦикла;
	КонецЦикла;

	Возврат РезультатВыгрузкиМассив;
КонецФункции // МассивОписанийТаблицВТаблицыФормы()

&НаКлиенте
Процедура КомандаСоздатьФайлы(Команда)
	
	ПараметрыВыгрузки = ПараметрыВыгрузкиИзФормыВсе();
	
	Если ПараметрыВыгрузки.Настройки.Количество() > 1 Тогда
	
		СписокВыбора = Новый СписокЗначений;
		Для каждого Настройка Из ПараметрыВыгрузки.Настройки Цикл
		
			СписокВыбора.Добавить(
				Настройка.НастройкаИмя
				, ВариантНастройкиПредставление(Настройка) + ", " + ПредставлениеПериода(Настройка.ДатаНач, Настройка.ДатаКон, "ФП = Истина")
				, Настройка.НастройкаИспользуется
			);
		
		КонецЦикла;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("СписокЗначений", СписокВыбора);
		ПараметрыОткрытия.Вставить("Заголовок", "Выберите, что выгрузить");
	
		ДополнительныеПараметры = Новый Структура("ПараметрыВыгрузки", ПараметрыВыгрузки);
		
		ОткрытьФорму(
				ЭтаФорма.Переменные.ПолноеИмяОбъекта + ".Форма.ВыборИзСпискаУправляемая"
			,	ПараметрыОткрытия
			,	ЭтаФорма
			,,,
			,	Новый ОписаниеОповещения("КомандаСоздатьФайлыЗавершение", ЭтаФорма, ДополнительныеПараметры)
			,	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
        Возврат;
		
	КонецЕсли;
	
	Если Не КоллекцияКоличествоПомеченных(ПараметрыВыгрузки.Настройки, "НастройкаИспользуется") Тогда
	
		ПоказатьПредупреждение(, "Не выбрано ни одной настройки!", 10, "Ошибка");
		Возврат;
	
	КонецЕсли;
	
	УдалитьТаблицыФормы();
	Автообмен(ПараметрыВыгрузки);
	
КонецПроцедуры // КомандаСоздатьФайлы()

&НаКлиентеНаСервереБезКонтекста
Функция КоллекцияКоличествоПомеченных(Знач СписокЗначений, Знач РеквизитПометка = "Пометка", Знач Пометка = Истина)

	Перем КоличествоПомеченных;
	
	КоличествоПомеченных = 0;
	
	Для каждого СписокЗначенийСтрока Из СписокЗначений Цикл
	
		Если СписокЗначенийСтрока[РеквизитПометка] = Пометка Тогда
		
			КоличествоПомеченных = КоличествоПомеченных + 1;
		
		КонецЕсли;
	
	КонецЦикла;

	Возврат КоличествоПомеченных;
КонецФункции // КоллекцияКоличествоПомеченных()

&НаКлиенте
Процедура КомандаСоздатьФайлыЗавершение(СписокВыбора, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыгрузки = ДополнительныеПараметры.ПараметрыВыгрузки;
	
	Если СписокВыбора = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для х = -СписокВыбора.Количество() + 1 По 0 Цикл
		
		СписокВыбораСтрока = СписокВыбора[-х];
		
		Если Не СписокВыбораСтрока.Пометка Тогда
			
			ПараметрыВыгрузки.Настройки.Удалить(-х);
			Продолжить;
			
		КонецЕсли;
		
		ПараметрыВыгрузки.Настройки[-х].НастройкаИспользуется = Истина;
		
	КонецЦикла;
	
	Если Не КоллекцияКоличествоПомеченных(ПараметрыВыгрузки.Настройки, "НастройкаИспользуется") Тогда
	
		ПоказатьПредупреждение(, "Не выбрано ни одной настройки!", 10, "Ошибка");
		Возврат;
	
	КонецЕсли;
	
	УдалитьТаблицыФормы();
	Автообмен(ПараметрыВыгрузки);

КонецПроцедуры // КомандаСоздатьФайлыЗавершение()

&НаКлиенте
Процедура ФоновоеЗаданиеПрогрессВыполнения(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполняется" Тогда
		Если ЗначениеЗаполнено(Результат.Прогресс) Тогда
			Состояние(Результат.Прогресс.Текст, Результат.Прогресс.Процент, "Получение данных");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ФоновоеЗаданиеПрогрессВыполнения()

&НаКлиенте
Процедура ФоновоеЗаданиеПриЗавершенииДлительнойОперации(Результат, ДополнительныеПараметры) Экспорт
	
	Перем АвтообменНаКлиентеПараметрыМассив;
	
	// данный код сработает после завершения работы задания автоматически
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НастройкиОбщие = ДополнительныеПараметры.НастройкиОбщие;
	
	// Статус
	// АдресРезультата
	// АдресДополнительногоРезультата
	// КраткоеПредставлениеОшибки
	// ПодробноеПредставлениеОшибки
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатВыгрузкиМассив = МассивОписанийТаблицВТаблицыФормы(Результат.АдресРезультата);
		
		АвтообменНаКлиентеЗавершение(РезультатВыгрузкиМассив, НастройкиОбщие);
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбщегоНазначенияКлиентСообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
		
		РезультатВыгрузкиМассив = Новый Массив;
		АвтообменНаКлиентеЗавершение(РезультатВыгрузкиМассив, НастройкиОбщие);
		
	КонецЕсли;
	
КонецПроцедуры // ФоновоеЗаданиеПриЗавершенииДлительнойОперации()

&НаКлиенте
Процедура КаталогВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если РежимРаботыСервер(РежимРаботыКлиент) Тогда
	
		Возврат;
	
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		// Для линукса команда другая, отложим на потом
		
		НачатьЗапускПриложения(
			Новый ОписаниеОповещения("КаталогВыгрузкиОткрытиеЗавершение", ЭтаФорма)
		,	"explorer.exe /e /select," + Элемент.ТекстРедактирования);
		
	#Иначе
		
		ЗапуститьПриложение(Элемент.ТекстРедактирования);
		
	#КонецЕсли
	
КонецПроцедуры // КаталогВыгрузкиОткрытие()

&НаКлиенте
Процедура КаталогВыгрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт

КонецПроцедуры // КаталогВыгрузкиОткрытиеЗавершение()

Функция АвтоРежим()
	
	ОбработкаОбъект().ВыполнитьКоманду("ИдентификаторКоманды", "ПараметрыОбработки");
	
КонецФункции // АвтоРежим()

&НаКлиенте
Процедура КомандаСоздатьСкриптДляПланировщика(Команда)
	ОткрытьФорму(
			ЭтаФорма.Переменные.ПолноеИмяОбъекта + ".Форма.СоздатьСкриптДляПланировщикаУправляемая"
		,,,,,,
		,	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры // КомандаСоздатьСкриптДляПланировщика()

&НаКлиенте
Процедура КаталогВыгрузкиПриИзменении(Элемент)
	КаталогВыгрузки = СокрЛП(КаталогВыгрузки);
	
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	КаталогВыгрузки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВыгрузки);
	
	Если РежимРаботыСервер(РежимРаботыКлиент) Тогда
		
		КаталогВыгрузкиДоступенНаСервере(КаталогВыгрузки);
		
	Иначе
		
		КаталогВыгрузкиДоступен(КаталогВыгрузки);
		
	КонецЕсли;
КонецПроцедуры // КаталогВыгрузкиПриИзменении()

&НаСервере
Функция КаталогВыгрузкиДоступенНаСервере(Знач КаталогВыгрузки)
	
	Если ЭтаФорма.Переменные.РежимРаботыВОблаке Тогда
	
		КаталогВыгрузки = "";
		
		Возврат Ложь;
	
	КонецЕсли;
	
	Возврат ОбработкаОбъект().КаталогВыгрузкиДоступен(КаталогВыгрузки);
	
КонецФункции // КаталогВыгрузкиДоступенНаСервере()

&НаКлиенте
Функция КаталогВыгрузкиДоступен(Знач КаталогВыгрузки)
	
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		// Слишком сложные асинхронные проверки, игнорируем
		
		Возврат Истина;
		
	#КонецЕсли
	
	Файл = Новый Файл(СокрЛП(КаталогВыгрузки));
	Если Не Файл.Существует() Тогда
		
		ОбщегоНазначенияКлиентСообщитьПользователю(ИмяКомпьютераКлиент() + ". Выбранный путь не существует!");
		Возврат Ложь;
		
	ИначеЕсли Не Файл.ЭтоКаталог() Тогда
		
		ОбщегоНазначенияКлиентСообщитьПользователю(ИмяКомпьютераКлиент() + ". Выбранный путь не является каталогом!");
		Возврат Ложь;
		
	КонецЕсли;
	
	ВременныйФайл = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Файл.ПолноеИмя) + СтрЗаменить(Новый УникальныйИдентификатор, "-", "") + ".tmp";
	
	Попытка
		
		ЗаписьТекста = Новый ЗаписьТекста(ВременныйФайл);
		ЗаписьТекста.ЗаписатьСтроку(ТекущаяДата());
		ЗаписьТекста.Закрыть();
		
	Исключение
		
		ОбщегоНазначенияКлиентСообщитьПользователю(ИмяКомпьютераКлиент() + ". Не могу записать тестовый файл в " + КаталогВыгрузки + "!");
		Возврат Ложь;
		
	КонецПопытки;
	
	УдалитьФайлы(ВременныйФайл);
	
	Возврат Истина;
КонецФункции // КаталогВыгрузкиДоступен()

&НаКлиенте
Процедура КомандаПерейтиВоВнешниеОбработки(Команда)
	
	ВнешняяОбработкаСсылка = ВнешняяОбработкаСсылка();
	
	Если ЗначениеЗаполнено(ВнешняяОбработкаСсылка) Тогда
		
		ПоказатьЗначение(, ВнешняяОбработкаСсылка);
		
	Иначе
		
		ОткрытьФорму("Справочник.ДополнительныеОтчетыИОбработки.ФормаСписка");
		
	КонецЕсли;
	
КонецПроцедуры // КомандаПерейтиВоВнешниеОбработки()

&НаКлиенте
Процедура РежимРаботыКлиентПриИзменении(Элемент)
	
	Если РежимРаботыСервер(РежимРаботыКлиент) и ЭтаФорма.Переменные.РежимРаботыВОблаке Тогда
	
		КаталогВыгрузки = "";
	
	КонецЕсли;
	
КонецПроцедуры // РежимРаботыКлиентПриИзменении()

Процедура ФТП_ИспользоватьПриИзменении()
	
	Элементы.ФТП_Логин.Видимость		= ФТП_Использовать;
	Элементы.ФТП_Пароль.Видимость		= ФТП_Использовать;
	Элементы.КомандаФТП_Тест.Видимость	= ФТП_Использовать;
	
КонецПроцедуры // ФТП_ИспользоватьПриИзменении()

&НаКлиенте
Процедура ФТП_ИспользоватьПриИзмененииНаКлиенте(Элемент)
	
	ФТП_ИспользоватьПриИзменении();
	
КонецПроцедуры // ФТП_ИспользоватьПриИзмененииНаКлиенте()

&НаКлиенте
Процедура ПериодВыгрузкиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТД = ТекущаяДата();
	
	ПериодВыгрузки.Вариант			= ВариантСтандартногоПериода.ПроизвольныйПериод;
	ПериодВыгрузки.ДатаНачала		= НачалоДня(ТД) - (ПериодВыгрузкиДней - 1) * 24 * 3600;
	ПериодВыгрузки.ДатаОкончания	= КонецДня(ТД);
	
КонецПроцедуры // ПериодВыгрузкиОчистка()

Процедура ПериодВыгрузкиДнейПриИзменении()
	Перем ПроизводительОписание;
	
	ПроизводительОписание = ЭтаФорма.Переменные.ВсеПроизводители[manfid];
	
	Если ПериодВыгрузкиДней <= 0 Тогда
		
		ПериодВыгрузкиДней = ПроизводительОписание.ПериодВыгрузкиДней;
	
	КонецЕсли;
	
	Если Не ПериодВыгрузкиЗапоминать Тогда
		ПериодВыгрузки.Вариант			= ВариантСтандартногоПериода.ПроизвольныйПериод;
		
		ТД = ТекущаяДата();
		
		ПериодВыгрузки.ДатаНачала		= НачалоДня(ТД) - ПроизводительОписание.ПериодВыгрузкиДней * 24 * 3600; // НастройкиВыгрузки.НастройкиОбщие.ДатаНач;
		ПериодВыгрузки.ДатаОкончания	= КонецДня(ТД); // НастройкиВыгрузки.НастройкиОбщие.ДатаКон;
	КонецЕсли;
	
КонецПроцедуры // ПериодВыгрузкиДнейПриИзменении()

&НаКлиенте
Процедура ПериодВыгрузкиДнейПриИзмененииНаКлиенте(Элемент)
	
	ПериодВыгрузкиДнейПриИзменении();
	
КонецПроцедуры // ПериодВыгрузкиДнейПриИзмененииНаКлиенте()

&НаКлиенте
Процедура КомандаЗапуститьАвтообмен(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗапуститьАвтообменЗавершение", ЭтаФорма)
	,	"Запустить автообмен?
		|* Для завершения автообмена закройте обработку"
	, РежимДиалогаВопрос.ДаНет);
КонецПроцедуры // КомандаЗапуститьАвтообмен()

&НаКлиенте
Процедура КомандаЗапуститьАвтообменЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЭтаФорма.Переменные.Вставить("АвтообменНачало"	, ТекущаяДата() + 1000);
	ЭтаФорма.Переменные.Вставить("ФормаЗаголовок"	, ЭтаФорма.Заголовок);
	ПодключитьОбработчикОжидания("Таймер", 30, Ложь);
	Элементы.ФормаКомандаЗапуститьАвтообмен.Доступность = Ложь;
	Таймер();

КонецПроцедуры // КомандаЗапуститьАвтообменЗавершение()

&НаКлиентеНаСервереБезКонтекста
Функция СекундыПредставление(Знач ОсталосьСекунд)

	ОсталосьЧасов	= Цел(ОсталосьСекунд / 3600);	ОсталосьСекунд = ОсталосьСекунд - 3600 * ОсталосьЧасов;
	ОсталосьМинут	= Цел(ОсталосьСекунд / 60);		ОсталосьСекунд = ОсталосьСекунд - 60 * ОсталосьМинут;
	
	Возврат
		?(ОсталосьЧасов = 0, "", " " + ОсталосьЧасов + " ч.")
		+?(ОсталосьМинут = 0, "", " " + ОсталосьМинут + " м.")
		+?(ОсталосьСекунд = 0, "", " " + ОсталосьСекунд + " с.")
	;

КонецФункции // СекундыПредставление()

&НаКлиенте
Процедура Таймер()
	День				= 24 * 3600;
	ИнтервалАвтообмена	= День;

	ТД = ТекущаяДата();
	
	ПрошлоСекунд	= ТД - ЭтаФорма.Переменные.АвтообменНачало;
	ОсталосьСекунд	= ИнтервалАвтообмена - ПрошлоСекунд;
	Если ОсталосьСекунд <= 0 или ПрошлоСекунд <= 0 Тогда
	
		ОбщегоНазначенияКлиентСообщитьПользователю("Старт автообмена " + ТД);
		ЭтаФорма.Переменные.АвтообменНачало = ТД;
		ЭтаФорма.Заголовок = "До автообмена осталось" + СекундыПредставление(ИнтервалАвтообмена);
		
		ПараметрыВыгрузки = ПараметрыВыгрузкиИзФормыВсе();
		
		Автообмен(ПараметрыВыгрузки);
		
	Иначе
		
		ЭтаФорма.Заголовок = "До автообмена осталось" + СекундыПредставление(ОсталосьСекунд);
		
	КонецЕсли;
КонецПроцедуры // Таймер()

&НаКлиенте
Процедура КомандаФТП_Тест(Команда)
	
	Настройка 				= ПараметрыВыгрузкиИзФормы();
	НастройкиОбщие			= ПараметрыВыгрузкиИзФормыОбщие();
	ПроизводительОписание	= ЭтаФорма.Переменные.ВсеПроизводители[Настройка.manfid];
	
	Транспорты				= Новый Массив;
	ТранспортФТП			= Транспорт_Добавить(Транспорты, "ФТП", Настройка, НастройкиОбщие, ПроизводительОписание);
	
	ОбщегоНазначенияКлиентСообщитьПользователю(?(ТранспортФТП <> Неопределено, "ФТП доступно", "ФТП НЕ доступно"));
	
КонецПроцедуры // КомандаФТП_Тест()

&НаКлиенте
Процедура ТипыДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Перем СписокВыбора;
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = ТипыДокументов.Скопировать();
	
	Для каждого ТипыДокументовСтрокаЭталон Из ЭтаФорма.Переменные.ВсеКонстанты.ТипыДокументов Цикл
		
		Если СписокВыбора.НайтиПоЗначению(ТипыДокументовСтрокаЭталон.Значение) = Неопределено Тогда
		
			СписокВыбора.Добавить(ТипыДокументовСтрокаЭталон.Значение, ТипыДокументовСтрокаЭталон.Представление, Ложь, ТипыДокументовСтрокаЭталон.Картинка);
		
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СписокЗначений", СписокВыбора);
	ПараметрыОткрытия.Вставить("Заголовок", "Выберите типы документов");

	ДополнительныеПараметры = Новый Структура;
	
	ОткрытьФорму(
			ЭтаФорма.Переменные.ПолноеИмяОбъекта + ".Форма.ВыборИзСпискаУправляемая"
		,	ПараметрыОткрытия
		,	ЭтаФорма
		,,,
		,	Новый ОписаниеОповещения("ТипыДокументовНачалоВыбораЗавершение", ЭтаФорма, ДополнительныеПараметры)
		,	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры // ТипыДокументовНачалоВыбора()

&НаКлиенте
Процедура ТипыДокументовНачалоВыбораЗавершение(Список, ДополнительныеПараметры) Экспорт
	
	Если Список = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	
	ТипыДокументов.Очистить();
	
	Для каждого СписокСтрока Из Список Цикл
		
		Если СписокСтрока.Пометка Тогда
		
			ТипыДокументов.Добавить(СписокСтрока.Значение, СписокСтрока.Представление, Истина, СписокСтрока.Картинка);
		
		КонецЕсли;
		
	КонецЦикла;
	
	ТипыДокументов.СортироватьПоПредставлению();
	
	Если Не ТипыДокументов.Количество() Тогда
	
		ТипыДокументовВыбратьВсе();
	
	КонецЕсли;
	
КонецПроцедуры // ТипыДокументовНачалоВыбораЗавершение()

//&НаКлиенте
Процедура ТипыДокументовВыбратьВсе()

	ТипыДокументов.Очистить();
	
	Для каждого ТипыДокументовСтрокаЭталон Из ЭтаФорма.Переменные.ВсеКонстанты.ТипыДокументов Цикл
		
		ТипыДокументов.Добавить(ТипыДокументовСтрокаЭталон.Значение, ТипыДокументовСтрокаЭталон.Представление, Истина, ТипыДокументовСтрокаЭталон.Картинка);
		
	КонецЦикла;
	
	ТипыДокументов.СортироватьПоПредставлению();

КонецПроцедуры // ТипыДокументовВыбратьВсе()

&НаКлиенте
Процедура ТипыДокументовОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭтаФорма.Модифицированность = Истина;
	
	ТипыДокументовВыбратьВсе();
	
КонецПроцедуры // ТипыДокументовОчистка()

#Область ВариантНастройки

Функция ВариантНастройкиПредставление(Знач Настройка)

	ПроизводительОписание = ЭтаФорма.Переменные.ВсеПроизводители[Настройка.manfid];
	
	ВерсияОписание = ПроизводительОписание.Версии.НайтиПоЗначению(Настройка.Версия);
	
	Возврат Настройка.НастройкаИмя
		+ ?(ВерсияОписание = Неопределено, "", ", " + ВерсияОписание.Представление)
		+ ?(Не Настройка.НастройкаИспользуется, ", (выкл.)", "");

КонецФункции // ВариантНастройкиПредставление()

&НаКлиенте
Процедура ВариантНастройкиПриИзменении(Элемент)
	
	СписокВыбора = Элементы.ВариантНастройки.СписокВыбора;
	
	ВариантНастройки = СокрЛП(ВариантНастройки);
	
	Если ВариантНастройки = "" Тогда
		// Попытка удаления настройки
		
		ВариантНастройки = ВариантНастройкиДоИзменения; // Восстанавливаем состояние, т.к. сначала надо спросить
	
		Если СписокВыбора.Количество() = 1 Тогда
			
			Возврат;
		
		КонецЕсли;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВариантНастройкиУдалениеЗавершение", ЭтаФорма), "Удалить настройку """ + ВариантНастройкиДоИзменения + """?", РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
	СписокВыбораСтрока = СписокВыбора.НайтиПоЗначению(ВариантНастройки);
	
	Если СписокВыбораСтрока <> Неопределено Тогда
	
		Если ВариантНастройки = ВариантНастройкиДоИзменения Тогда
		
			Возврат;
		
		КонецЕсли;
		
		ВариантНастройкиВыбрать();
		
		Возврат;
	КонецЕсли;
	
	Меню = Новый СписокЗначений;
	Меню.Добавить("Добавить"		, "Добавить настройку """ + ВариантНастройки + """");
	Меню.Добавить("Переименовать"	, "Переименовать настройку """ + ВариантНастройкиДоИзменения + """ в " + """" + ВариантНастройки + """");
	ПоказатьВыборИзМеню(
		Новый ОписаниеОповещения("ВариантНастройкиДобавитьПереименоватьЗавершение", ЭтаФорма)
		, Меню
		,
	);
	
КонецПроцедуры // ВариантНастройкиПриИзменении()

Процедура ВариантНастройкиВставить(Знач Настройка)

	Перем Настройки;
	
	Настройки = ЭтаФорма.Переменные.Настройки;
	
	Настройки.Вставить(Настройка.НастройкаИмя, Настройка);
	
	ЭтаФорма.Переменные.Вставить("Настройки", Настройки);

КонецПроцедуры // ВариантНастройкиВставить()

&НаКлиенте
Процедура ВариантНастройкиВыбрать()

	Если ВариантНастройкиДоИзменения = "" Тогда
	
		ВариантНастройкиДоИзменения = ВариантНастройки;
	
	КонецЕсли;
	
	// Сохраняем текущую настройку
	
	НастройкаТекущая				= ПараметрыВыгрузкиИзФормы();
	НастройкаТекущая.НастройкаИмя	= ВариантНастройкиДоИзменения;
	ВариантНастройкиВставить(НастройкаТекущая);
	
	Настройки = ЭтаФорма.Переменные.Настройки;
	Настройка = Настройки[ВариантНастройки];
	
	Если Настройка = Неопределено Тогда
	
		Настройка			= ТипизироватьПоШаблону(ЭтаФорма.Переменные.НастройкиВыгрузкиШаблон.Настройка, );
		Настройка.manfid	= Элементы.Производитель.СписокВыбора[0].Значение;
		
	Иначе
		
		Настройки.Удалить(Настройка.НастройкаИмя);
		
	КонецЕсли;
	
	Настройка.НастройкаИмя = ВариантНастройки;
	Настройки.Вставить(Настройка.НастройкаИмя, Настройка);
	ЭтаФорма.Переменные.Вставить("Настройки", Настройки);
	
	НастройкаНаФорму(Настройка);
	
	ВариантНастройкиДоИзменения = ВариантНастройки;
	
КонецПроцедуры // ВариантНастройкиВыбрать()

Процедура ВариантНастройкиУстановитьЗаголовок()

	СписокВыбора = Элементы.ВариантНастройки.СписокВыбора;
	СписокВыбораСтрока = СписокВыбора.НайтиПоЗначению(ВариантНастройки);
	
	Элементы.ВариантНастройки.Заголовок =
		"Вариант настройки "
		+ ?(СписокВыбораСтрока = Неопределено, 0, 1 + СписокВыбора.Индекс(СписокВыбораСтрока))
		+ " из " + СписокВыбора.Количество()
	;

КонецПроцедуры // ВариантНастройкиУстановитьЗаголовок()

&НаКлиенте
Процедура ВариантНастройкиУдалениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		ВариантНастройки = ВариантНастройкиДоИзменения;
		
		Возврат;
		
	КонецЕсли;
	
	СписокВыбора = Элементы.ВариантНастройки.СписокВыбора;
		
	СписокВыбораСтрока = СписокВыбора.НайтиПоЗначению(ВариантНастройкиДоИзменения);
	СписокВыбора.Удалить(СписокВыбораСтрока);
	
	ВариантНастройки = СписокВыбора[0];
		
	ВариантНастройкиВыбрать();
	
КонецПроцедуры // ВариантНастройкиУдалениеЗавершение()

&НаКлиенте
Процедура ВариантНастройкиДобавитьПереименоватьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
	
		ВариантНастройки = ВариантНастройкиДоИзменения;
		
		Возврат;
	
	КонецЕсли;
	
	СписокВыбора	= Элементы.ВариантНастройки.СписокВыбора;
	
	Действие		= Результат.Значение;
	
	Если Действие = "Переименовать" Тогда
		
		Настройка	= ЭтаФорма.Переменные.Настройки[ВариантНастройкиДоИзменения];
		Настройка.НастройкаИмя = ВариантНастройки;
		
		//СписокВыбораСтрока = СписокЗначенийПолучить(СписокВыбора, ВариантНастройкиДоИзменения, Ложь);
		СписокВыбораСтрока = СписокВыбора.НайтиПоЗначению(ВариантНастройкиДоИзменения);
		СписокВыбораСтрока.Значение			= ВариантНастройки;
		СписокВыбораСтрока.Представление	= ВариантНастройкиПредставление(Настройка);
		
		СписокВыбора.СортироватьПоПредставлению();
		
		ЭтаФорма.Модифицированность = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	СписокВыбора.Добавить(ВариантНастройки, ВариантНастройки);
	
	//Настройка = ТипизироватьПоШаблону(ЭтаФорма.Переменные.НастройкиВыгрузкиШаблон.Настройка, );
	//ЭтаФорма.Переменные.Настройки.Вставить(ВариантНастройки, Настройка);
	
	ВариантНастройкиВыбрать();
	
КонецПроцедуры // ВариантНастройкиДобавитьПереименоватьЗавершение()

&НаКлиенте
Процедура ВариантНастройкиРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора			= Элементы.ВариантНастройки.СписокВыбора;
	СписокВыбораКоличество	= СписокВыбора.Количество();
	
	Если СписокВыбораКоличество < 2 Тогда
	
		Возврат;
	
	КонецЕсли;
	
	СписокВыбораСтрока = СписокВыбора.НайтиПоЗначению(ВариантНастройки);
	
	Если СписокВыбораСтрока = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	СписокВыбораСтрокаИндекс = СписокВыбора.Индекс(СписокВыбораСтрока);
	
	Если Направление = -1 Тогда
		
		// Двигаемся вперед
		Если СписокВыбораСтрокаИндекс = СписокВыбораКоличество - 1 Тогда
		
			// Последний, переходим к первому
			
			ВариантНастройкиСледующий = СписокВыбора[0].Значение;
			
		Иначе
			
			ВариантНастройкиСледующий = СписокВыбора[СписокВыбораСтрокаИндекс + 1].Значение;
			
		КонецЕсли;
		
	Иначе
		
		// Двигаемся назад
		Если СписокВыбораСтрокаИндекс = 0 Тогда
		
			// первый, переходим к последнему
			
			ВариантНастройкиСледующий = СписокВыбора[СписокВыбора.Количество() - 1].Значение;
			
		Иначе
		
			ВариантНастройкиСледующий = СписокВыбора[СписокВыбораСтрокаИндекс - 1].Значение;
		
		КонецЕсли;
		
	КонецЕсли;
	
	//ЭтаФорма.Переменные.Настройки.Вставить(ВариантНастройки, ПараметрыВыгрузкиИзФормы());
	ВариантНастройкиВставить(ПараметрыВыгрузкиИзФормы());
	
	НастройкаНаФорму(ЭтаФорма.Переменные.Настройки[ВариантНастройкиСледующий]);
	
	ВариантНастройкиДоИзменения = ВариантНастройки;
	
КонецПроцедуры // ВариантНастройкиРегулирование()

Процедура ПроизводительПриИзменении(Знач ОбновлятьПоказатели = Истина)
	
	Перем СписокВыбора;
	
	СписокВыбора = Элементы.ПроизводительВерсияВыгрузки.СписокВыбора;
	СписокВыбора.Очистить();
	
	Элементы.ОсновнаяОрганизация.Видимость = manfid <> 8052;
	
	ПроизводительОписание = ЭтаФорма.Переменные.ВсеПроизводители[manfid];
	
	Если ОбновлятьПоказатели Тогда
	
		ЭтаФорма.ПериодВыгрузкиДней = ПроизводительОписание.ПериодВыгрузкиДней;
	
	КонецЕсли;
	
	ПериодВыгрузкиДнейПриИзменении();
	
	Для каждого ВерсииСтрока Из ПроизводительОписание.Версии Цикл
	
		ЗаполнитьЗначенияСвойств(СписокВыбора.Добавить(), ВерсииСтрока);
	
	КонецЦикла;
	
	Если Версия и СписокВыбора.НайтиПоЗначению(Версия) = Неопределено Тогда
	
		Версия = 0;
	
	КонецЕсли;
	
	Если Не Версия и СписокВыбора.Количество() Тогда
	
		Версия = СписокВыбора[0].Значение;
	
	КонецЕсли;
	
	Элементы.ПроизводительВерсияВыгрузки.Видимость = СписокВыбора.Количество();
	
	Элементы.ФТП_Использовать.Подсказка		= "ftp://"		+ ПроизводительОписание.ФТП_Сервер + "/" + ПроизводительОписание.ФТП_Каталог;
	Элементы.HTTP_Использовать.Подсказка	= "https://"	+ ПроизводительОписание.HTTP_Сервер;

	ФТП_ИспользоватьПриИзменении();
	HTTP_ИспользоватьПриИзменении();
	
	ПроизводительОписаниеДоИзменения = ЭтаФорма.Переменные.ВсеПроизводители[manfidДоИзменения];
	manfidДоИзменения = manfid;
	Если ПроизводительОписаниеДоИзменения = Неопределено или ПроизводительОписаниеДоИзменения.manfid = manfid Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ВариантНастройкиНовоеИмя = СтрЗаменить(ВариантНастройки, ПроизводительОписаниеДоИзменения.Наименование, ПроизводительОписание.Наименование);
	Если ВариантНастройкиНовоеИмя = ВариантНастройки Тогда
	
		Возврат; // Невозможно переименовать
	
	КонецЕсли;
	
	Настройки		= ЭтаФорма.Переменные.Настройки;
	НастройкаНовая	= Настройки[ВариантНастройкиНовоеИмя];
	
	Если НастройкаНовая <> Неопределено Тогда
	
		Возврат; // Невозможно переименовать (уже есть настройка с таким именем)
	
	КонецЕсли;
	
	Настройка = ЭтаФорма.Переменные.Настройки[ВариантНастройки];
	Настройка.НастройкаИмя = ВариантНастройкиНовоеИмя;
	
	Настройки.Удалить(ВариантНастройки);
	Настройки.Вставить(Настройка.НастройкаИмя, Настройка);
	ЭтаФорма.Переменные.Вставить("Настройки", Настройки);
	
	СписокВыбораСтрока = Элементы.ВариантНастройки.СписокВыбора.НайтиПоЗначению(ВариантНастройки);
	СписокВыбораСтрока.Значение			= ВариантНастройкиНовоеИмя;
	СписокВыбораСтрока.Представление	= ВариантНастройкиПредставление(Настройка);
	
	ВариантНастройки = ВариантНастройкиНовоеИмя;
	
КонецПроцедуры // ПроизводительПриИзменении()

&НаКлиенте
Процедура manfidПриИзменении(Элемент)
	
	ПроизводительПриИзменении();
	
	ЭтаФорма.HTTP_ПартнерИмя = "";
	
КонецПроцедуры // manfidПриИзменении()

#КонецОбласти

&НаКлиенте
Процедура ТабличныйДокументПоказать(Знач ТД, Знач ЗаголовокФормы)
	
	Попытка
	
		// создадим коллекцию печатных форм, в которую надо будет добавить нужный нам табличный документ
		КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("ТоварныйКаталог");
		ПечатнаяФорма = КоллекцияПечатныхФорм[0];
		// Добавляем в коллекцию (тип массив) сформированный Табличный документ
		ПечатнаяФорма.ТабличныйДокумент	= ТД; 
		// если требуется устанавливаем параметры печати
		ПечатнаяФорма.Экземпляров		= 1;
		ПечатнаяФорма.СинонимМакета		= ЗаголовокФормы;  // используется для формирования имени файла при сохранении из общей формы печати документов
		// .. и выводим стандартной процедурой БСП

		ОбъектыПечати	= Новый СписокЗначений;

		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("ЗаголовокФормы", ЗаголовокФормы);
		ПараметрыПечати.Вставить("ДополнительныеПараметры", );

		КлючУникальности = Строка(Новый УникальныйИдентификатор);

		ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати");
		ПараметрыОткрытия.ПараметрКоманды = Новый Массив;
		ПараметрыОткрытия.ПараметрыПечати = Новый Структура;
		ПараметрыОткрытия.Вставить("КоллекцияПечатныхФорм"	, КоллекцияПечатныхФорм);
		ПараметрыОткрытия.Вставить("ОбъектыПечати"			, ОбъектыПечати);
		ПараметрыОткрытия.Вставить("ПараметрыПечати"		, ПараметрыПечати);

		ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, ВладелецФормы, КлючУникальности);

		//УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, ОбъектыПечати, ЭтаФорма);
	
	Исключение
		
		ТД.ТолькоПросмотр = Истина;
		ТД.Показать(ЗаголовокФормы);
	
	КонецПопытки;
КонецПроцедуры // ТабличныйДокументПоказать()

&НаКлиенте
Процедура КомандаНастройкиОтчет(Команда)
	
	Перем ПараметрыВыгрузки;
	
	ПараметрыВыгрузки = ПараметрыВыгрузкиИзФормыВсе();
	
	ТД = НастройкиОтчетНаСервере(ПараметрыВыгрузки);
	
	ТабличныйДокументПоказать(ТД, "(Сислинк) Отчет по настройкам");
	
КонецПроцедуры // КомандаНастройкиОтчет()

&НаСервере
Функция НастройкиОтчетНаСервере(Знач ПараметрыВыгрузки)
	
	Перем ОбработкаОбъект, ШаблонНастроек, ВсеКонстанты, ВсеПроизводители, НастройкаИспользуется;
	Перем ПоказательЗначение;
	
	ОбработкаОбъект		= ОбработкаОбъект();
	
	ШаблонНастроек		= ОбработкаОбъект.ШаблонНастроек();
	ВсеКонстанты		= ЭтаФорма.Переменные.ВсеКонстанты;
	ВсеПроизводители	= ЭтаФорма.Переменные.ВсеПроизводители;
	
	ЧастыйПунктир		= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.ЧастыйПунктир, 1, Ложь);
	
	Макет = ОбработкаОбъект.ПолучитьМакет("ОтчетПоНастройкамУправляемая");
	
	ТД = Новый ТабличныйДокумент;
	ТД.АвтоМасштаб			= Истина;
	ТД.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	ТД.ТолькоПросмотр		= Истина;
	
	ОблТаблицаПересчетаСтрока = Макет.ПолучитьОбласть("ТаблицаПересчетаСтрока");
	
	ОблНастройкиОбщиеШапка = Макет.ПолучитьОбласть("НастройкиОбщиеШапка");
	ОблНастройкиОбщиеШапка.Параметры.ТекущаяДата = ТекущаяДата();
	ТД.Вывести(ОблНастройкиОбщиеШапка);
	
	ТД.НачатьГруппуСтрок("Общие настройки", Истина);
	
	ОблНастройкиОбщиеСтрока = Макет.ПолучитьОбласть("НастройкиОбщиеСтрока");
	
	ПоказателиУстановитьПредставление(ПараметрыВыгрузки.НастройкиОбщие, "ТорговойТочкойЯвляется"	, ВсеКонстанты);
	ПоказателиУстановитьПредставление(ПараметрыВыгрузки.НастройкиОбщие, "ТорговыйПредставитель"		, ВсеКонстанты);
	
	УпаковкиСоответствие = Новый Соответствие;
	УпаковкиСоответствие.Вставить(0, "упак");
	УпаковкиСоответствие.Вставить(1, "шт");
	УпаковкиСоответствие.Вставить(2, "г");
	УпаковкиСоответствие.Вставить(4, "мл");
	УпаковкиСоответствие.Вставить(5, "см^2");
	УпаковкиСоответствие.Вставить(6, "таблетка");
	УпаковкиСоответствие.Вставить(7, "см");
	
	Если Не ПараметрыВыгрузки.НастройкиОбщие.HTTP_Использовать Тогда
	
		ПараметрыВыгрузки.НастройкиОбщие.Удалить("HTTP_API_KEY");
	
	КонецЕсли;
	
	Для каждого ПоказательОписание Из ШаблонНастроек.НастройкиОбщие.Колонки Цикл
		
		Если Не ПараметрыВыгрузки.НастройкиОбщие.Свойство(ПоказательОписание.Имя, ПоказательЗначение) Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		Если ПоказательОписание.Имя = "ТаблицаПересчета" Тогда
			
			ОблТаблицаПересчетаСтрока.Параметры.ПоказательИмя = ПоказательОписание.Заголовок;
			
			Для каждого ТаблицаПересчетаСтрока Из ПоказательЗначение Цикл
				
				Если Не ТаблицаПересчетаСтрока.Используется Тогда
				
					Продолжить;
				
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ОблТаблицаПересчетаСтрока.Параметры, ТаблицаПересчетаСтрока);
				
				ОблТаблицаПересчетаСтрока.Параметры.Упаковка = УпаковкиСоответствие[ТаблицаПересчетаСтрока.ru];
				
				ТД.Вывести(ОблТаблицаПересчетаСтрока);
				
				ОблТаблицаПересчетаСтрока.Параметры.ПоказательИмя = "";
			
			КонецЦикла;
			
		ИначеЕсли ПоказательОписание.Имя = "ТаблицаТранслита" Тогда
			
			ОблНастройкиОбщиеСтрока.Параметры.ПоказательИмя = ПоказательОписание.Заголовок;
			
			Для каждого ТаблицаТранслитаСтрока Из ПоказательЗначение Цикл
			
				ОблНастройкиОбщиеСтрока.Параметры.ПоказательЗначениеПредставление = ТаблицаТранслитаСтрока.БукваАлфавита + " -> " + ТаблицаТранслитаСтрока.БукваАлфавитаТранслит;
				
				ТД.Вывести(ОблНастройкиОбщиеСтрока);
				
				ОблНастройкиОбщиеСтрока.Параметры.ПоказательИмя = "";
			
			КонецЦикла;
			
		Иначе
			
			ОблНастройкиОбщиеСтрокаВывести(ТД, ОблНастройкиОбщиеСтрока, ПоказательОписание, ПоказательЗначение);
			
		КонецЕсли;
		
		Обл = ТД.Область(ТД.ВысотаТаблицы, 2, ТД.ВысотаТаблицы, 3);
		Обл.ГраницаСнизу = ЧастыйПунктир;
	
	КонецЦикла;
	
	ТД.ЗакончитьГруппуСтрок();
	
	ОблНастройкаШапка = Макет.ПолучитьОбласть("НастройкаШапка");
	
	Для каждого Настройка Из ПараметрыВыгрузки.Настройки Цикл
		
		ПроизводительОписание = ВсеПроизводители[Настройка.manfid];
		
		НастройкаИспользуется = Настройка.НастройкаИспользуется;
		
		ОблНастройкаШапка.Параметры.НастройкаИмя =
			Настройка.НастройкаИмя
			+ ?(Не СтрНайти(НРег(Настройка.НастройкаИмя), НРег(ПроизводительОписание.Наименование)), ", " + ПроизводительОписание.Наименование, "")
			+ " [" + Настройка.manfid + "]"
			+ ?(Не НастройкаИспользуется, " (отключена)", "")
		;
		
		ТД.Вывести(ОблНастройкаШапка);
		
		Настройка.Удалить("НастройкаИмя");
		Настройка.Удалить("НастройкаИспользуется");
		Настройка.Удалить("ФТП_Пароль");
		Настройка.Удалить("manfid");
		Если Не Настройка.ФТП_Использовать Тогда
		
			Настройка.Удалить("ФТП_Логин");
		
		КонецЕсли;
		
		Если Не ПараметрыВыгрузки.НастройкиОбщие.HTTP_Использовать Или Настройка.HTTP_Использовать = 0 Тогда
			
			Настройка.Удалить("HTTP_Использовать");
			Настройка.Удалить("HTTP_API_KEY");
			Настройка.Удалить("HTTP_ПартнерИмя");
		
		ИначеЕсли Настройка.HTTP_Использовать = 2 Тогда
			
			Настройка.HTTP_Использовать = Истина;
			Настройка.HTTP_API_KEY		= ПараметрыВыгрузки.НастройкиОбщие.HTTP_API_KEY;
			
		Иначе
			
			Настройка.HTTP_Использовать = Истина;
			
		КонецЕсли;
		
		ПоказателиУстановитьПредставление(Настройка, "Версия=Версии"	, ПроизводительОписание);
		ПоказателиУстановитьПредставление(Настройка, "ДобавлятьКНомерам", ВсеКонстанты);
		
		ТД.НачатьГруппуСтрок(ОблНастройкаШапка.Параметры.НастройкаИмя, НастройкаИспользуется);
	
		Для каждого ПоказательОписание Из ШаблонНастроек.Настройка.Колонки Цикл
			
			Если Не Настройка.Свойство(ПоказательОписание.Имя, ПоказательЗначение) Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			ОблНастройкиОбщиеСтрокаВывести(ТД, ОблНастройкиОбщиеСтрока, ПоказательОписание, ПоказательЗначение);
		
			Обл = ТД.Область(ТД.ВысотаТаблицы, 2, ТД.ВысотаТаблицы, 3);
			Обл.ГраницаСнизу = ЧастыйПунктир;
		
		КонецЦикла;
		
		ТД.ЗакончитьГруппуСтрок();
	
	КонецЦикла;
	
	Возврат ТД;
КонецФункции // НастройкиОтчетНаСервере()

&НаСервереБезКонтекста
Процедура ПоказателиУстановитьПредставление(Знач Настройка, Знач Показатели, Знач ИсточникПредставлений)
	
	Перем ПоказательИмя, ПоказательИсточникИмя, ПоказательЗначение, ПоказательСписокЗначений;
	
	Показатели = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Показатели, ",", Истина, Истина);
	
	Для каждого ПоказательИмя Из Показатели Цикл
		НомПоз = СтрНайти(ПоказательИмя, "=");
		Если НомПоз Тогда
		
			ПоказательИсточникИмя	= СокрЛП(Сред(ПоказательИмя, НомПоз + 1));
			ПоказательИмя			= СокрЛП(Лев(ПоказательИмя, НомПоз - 1));
			
		Иначе
			
			ПоказательИсточникИмя	= ПоказательИмя;
			
		КонецЕсли;
		
		Если Не Настройка.Свойство(ПоказательИмя, ПоказательЗначение)
			или Не ИсточникПредставлений.Свойство(ПоказательИсточникИмя, ПоказательСписокЗначений)
			или ТипЗнч(ПоказательСписокЗначений) <> Тип("СписокЗначений")
		Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		ПоказательСписокЗначенийСтрока = ПоказательСписокЗначений.НайтиПоЗначению(ПоказательЗначение);
		Если ПоказательСписокЗначенийСтрока = Неопределено Тогда
		
			Настройка.Удалить(ПоказательИмя);
			
		Иначе
			
			Настройка[ПоказательИмя] = ПоказательСписокЗначенийСтрока.Представление;
			
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры // ПоказателиУстановитьПредставление()

&НаСервереБезКонтекста
Функция ОтборПредставление(Знач ОтборОписание)

	Разд = "";
	
	Если Не ОтборОписание.Использование Тогда
	
		Возврат "";
	
	КонецЕсли;
	
	Если ОтборОписание.Тип = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		
		Если ОтборОписание.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
		
			ОтборПредставление = "И (";
			
		ИначеЕсли ОтборОписание.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
		
			ОтборПредставление = "Или (";
			
		Иначе
		
			ОтборПредставление = "НЕ (";
			
		КонецЕсли;
		
		Для каждого ЭлементОтбора Из ОтборОписание.Элементы Цикл
		
			ОтборПредставление = ОтборПредставление + Разд + ОтборПредставление(ЭлементОтбора);
			Разд = "; ";
		
		КонецЦикла;
		
		Возврат ОтборПредставление + ")";
	
	КонецЕсли;
	
	ПравоеЗначениеПредставление = СокрЛП(ОтборОписание.ПравоеЗначение);
	
	Если ТипЗнч(ОтборОписание.ПравоеЗначение) = Тип("СписокЗначений") Тогда
		
		ПравоеЗначениеПредставление = "";
	
		Для каждого СписокЗначенийСтрока Из ОтборОписание.ПравоеЗначение Цикл
		
			ПравоеЗначениеПредставление = ПравоеЗначениеПредставление + Разд + """" +СокрЛП(СписокЗначенийСтрока.Значение) + """";
			Разд = ", ";
		
		КонецЦикла;
		
		Если ПравоеЗначениеПредставление = "" Тогда
		
			ПравоеЗначениеПредставление = """";
		
		КонецЕсли;
	
	КонецЕсли;

	Возврат СокрЛП(ОтборОписание.ЛевоеЗначение)
		+ " " + СокрЛП(ОтборОписание.ВидСравнения)
		+ " " + ПравоеЗначениеПредставление
	;
КонецФункции // ОтборПредставление()

&НаСервереБезКонтекста
Процедура ОблНастройкиОбщиеСтрокаВывести(ТД, Знач ОблНастройкиОбщиеСтрока, Знач ПоказательОписание, Знач ПоказательЗначение)

	Перем КонстантаЗначение;
	
	ОблНастройкиОбщиеСтрока.Параметры.ПоказательЗначение				= ПоказательЗначение;
	ОблНастройкиОбщиеСтрока.Параметры.ПоказательЗначениеПредставление	= СокрЛП(ПоказательЗначение);
	ОблНастройкиОбщиеСтрока.Параметры.ПоказательИмя						= ?(Не ПустаяСтрока(ПоказательОписание.Заголовок), ПоказательОписание.Заголовок, ПоказательОписание.Имя);
	
	Если ТипЗнч(ПоказательЗначение) = Тип("Массив") Тогда
		
		Для каждого ПоказательЗначение_х Из ПоказательЗначение Цикл
			
			Если СтрНачинаетсяС(ПоказательОписание.Имя, "Отбор") Тогда
				
				ОблНастройкиОбщиеСтрока.Параметры.ПоказательЗначение				= "";
				ОблНастройкиОбщиеСтрока.Параметры.ПоказательЗначениеПредставление	= СокрЛП(ОтборПредставление(ПоказательЗначение_х));
				
			Иначе
				
				ОблНастройкиОбщиеСтрока.Параметры.ПоказательЗначение				= ПоказательЗначение_х;
				ОблНастройкиОбщиеСтрока.Параметры.ПоказательЗначениеПредставление	= СокрЛП(ПоказательЗначение_х);
				
			КонецЕсли;
			
			ТД.Вывести(ОблНастройкиОбщиеСтрока);
			
			ОблНастройкиОбщиеСтрока.Параметры.ПоказательИмя = "";
		
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ПоказательЗначение) = Тип("СписокЗначений") Тогда
		
		Для каждого ПоказательЗначениеСтрока Из ПоказательЗначение Цикл
			
			ПоказательЗначение_х = ПоказательЗначениеСтрока.Значение;
			ОблНастройкиОбщиеСтрока.Параметры.ПоказательЗначение				= ПоказательЗначение_х;
			ОблНастройкиОбщиеСтрока.Параметры.ПоказательЗначениеПредставление	= СокрЛП(ПоказательЗначение_х);
			
			ТД.Вывести(ОблНастройкиОбщиеСтрока);
			
			ОблНастройкиОбщиеСтрока.Параметры.ПоказательИмя = "";
		
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ПоказательЗначение) = Тип("Структура") Тогда
		
		Для каждого КлючИЗначение Из ПоказательЗначение Цикл
		
			ПоказательЗначение_х = КлючИЗначение.Значение;
			ОблНастройкиОбщиеСтрока.Параметры.ПоказательЗначение				= ПоказательЗначение_х;
			ОблНастройкиОбщиеСтрока.Параметры.ПоказательЗначениеПредставление	= СокрЛП(КлючИЗначение.Ключ) + ": " + СокрЛП(ПоказательЗначение_х);
			
			ТД.Вывести(ОблНастройкиОбщиеСтрока);
			
			ОблНастройкиОбщиеСтрока.Параметры.ПоказательИмя = "";
		
		КонецЦикла;
		
	Иначе
		
		ТД.Вывести(ОблНастройкиОбщиеСтрока);
		
	КонецЕсли;

КонецПроцедуры // ОблНастройкиОбщиеСтрокаВывести()

&НаКлиенте
Процедура ВариантНастройкиНеИспользуетсяПриИзменении(Элемент)
	СписокВыбора = Элементы.ВариантНастройки.СписокВыбора;
	СписокВыбораСтрока = СписокВыбора.НайтиПоЗначению(ВариантНастройки);
	
	Настрока = ЭтаФорма.Переменные.Настройки[ВариантНастройки];
	Настрока.НастройкаИспользуется = ВариантНастройкиИспользуется;
	
	СписокВыбораСтрока.Представление = ВариантНастройкиПредставление(Настрока);
КонецПроцедуры // ВариантНастройкиНеИспользуетсяПриИзменении()

&НаКлиенте
Процедура ВариантНастройкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Перем ПараметрыОткрытия, Настройки;
	
	СтандартнаяОбработка = Ложь;
	
	Настройки = Новый Массив;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Настройки"					, Настройки);
	ПараметрыОткрытия.Вставить("РежимРаботыКлиент"			, РежимРаботыКлиент);
	ПараметрыОткрытия.Вставить("ПроизводительСписокВыбора"	, Элементы.Производитель.СписокВыбора);
	ПараметрыОткрытия.Вставить("ВсеПроизводители"			, ЭтаФорма.Переменные.ВсеПроизводители);
	ПараметрыОткрытия.Вставить("РежимРаботыВОблаке"			, ЭтаФорма.Переменные.РежимРаботыВОблаке);
	
	Для каждого Настройка Из ПараметрыВыгрузкиИзФормыВсе().Настройки Цикл
	
		НастройкаДляРедактирования = Новый Структура("НастройкаИспользуется,НастройкаИмя,Версия,manfid,ПериодВыгрузкиДней,КаталогВыгрузки");
		ЗаполнитьЗначенияСвойств(НастройкаДляРедактирования, Настройка);
		
		Настройки.Добавить(НастройкаДляРедактирования);
	
	КонецЦикла;
	
	ОткрытьФорму(
			ЭтаФорма.Переменные.ПолноеИмяОбъекта + ".Форма.РедакторНастроекУправляемая"
		,	ПараметрыОткрытия
		,	ЭтаФорма
		,,,
		,	Новый ОписаниеОповещения("ВариантНастройкиНачалоВыбораЗавершение", ЭтаФорма)
		,	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры // ВариантНастройкиНачалоВыбора()

Процедура ВариантНастройкиНачалоВыбораЗавершение(Знач Результат, Знач ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	
	Настройки = ЭтаФорма.Переменные.Настройки;
	
	СписокВыбора = Элементы.ВариантНастройки.СписокВыбора;
	СписокВыбора.Очистить();
	
	ИменаНастроек = Новый Массив;
	
	Для каждого НастройкаОтредактированная Из Результат.Настройки Цикл
		
		НастройкаИмяНовое = ?(Не ПустаяСтрока(НастройкаОтредактированная.НастройкаИмяНовое), НастройкаОтредактированная.НастройкаИмяНовое, НастройкаОтредактированная.НастройкаИмя);
		
		Настройка = ЭтаФорма.Переменные.Настройки[НастройкаОтредактированная.НастройкаИмя];
		
		Если Настройка = Неопределено Тогда
		
			Настройка			= ТипизироватьПоШаблону(ЭтаФорма.Переменные.НастройкиВыгрузкиШаблон.Настройка, );
			
		Иначе
			
			Настройки.Удалить(Настройка.НастройкаИмя);
			
		КонецЕсли;
		
		Настройка.НастройкаИмя			= НастройкаИмяНовое;
		Настройка.НастройкаИспользуется	= НастройкаОтредактированная.НастройкаИспользуется;
		Настройка.manfid				= НастройкаОтредактированная.manfid;
		Настройка.ПериодВыгрузкиДней	= НастройкаОтредактированная.ПериодВыгрузкиДней;
		Настройка.КаталогВыгрузки		= НастройкаОтредактированная.КаталогВыгрузки;
		Настройка.Версия				= НастройкаОтредактированная.Версия;
		
		Настройки.Вставить(Настройка.НастройкаИмя, Настройка);
		
		СписокВыбора.Добавить(Настройка.НастройкаИмя, ВариантНастройкиПредставление(Настройка));
		
		ИменаНастроек.Добавить(Настройка.НастройкаИмя);
		
	КонецЦикла;
	
	Для каждого КлючИЗначение Из Настройки Цикл
	
		Если ИменаНастроек.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
		
			Настройки.Удалить(КлючИЗначение.Ключ);
		
		КонецЕсли;
	
	КонецЦикла;
	
	ЭтаФорма.Переменные.Вставить("Настройки", Настройки);
	
	Настройка = Настройки[ВариантНастройки];
	Если Настройка = Неопределено Тогда
	
		ВариантНастройки			= СписокВыбора[0].Значение;
		ВариантНастройкиДоИзменения	= ВариантНастройки;
		Настройка = Настройки[ВариантНастройки];
	
	КонецЕсли;
	
	НастройкаНаФорму(Настройка);
	
КонецПроцедуры // ВариантНастройкиНачалоВыбораЗавершение()

&НаКлиенте
Процедура КомандаТаблицаПересчета(Команда)
	Перем ПараметрыОткрытия;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТаблицаПересчета", ЭтаФорма.Переменные.ТаблицаПересчета);
	
	ОткрытьФорму(
			ЭтаФорма.Переменные.ПолноеИмяОбъекта + ".Форма.ТаблицаПересчетаУправляемая"
		,	ПараметрыОткрытия
		,	ЭтаФорма
		,,,
		,	Новый ОписаниеОповещения("КомандаТаблицаПересчетаЗавершение", ЭтаФорма)
		,	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры // КомандаТаблицаПересчета()

&НаКлиенте
Процедура КомандаТаблицаПересчетаЗавершение(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ЭтаФорма.Переменные.Вставить("ТаблицаПересчета", Результат.ТаблицаПересчета);

КонецПроцедуры // КомандаТаблицаПересчетаЗавершение()

&НаКлиенте
Процедура ПроизводительВерсияВыгрузкиПриИзменении(Элемент)
	Перем Настройка, ВариантНастройкиСтрока;
	
	Настройка				= ЭтаФорма.Переменные.Настройки[ВариантНастройки];
	Настройка.Версия		= Версия;
	ВариантНастройкиСтрока	= Элементы.ВариантНастройки.СписокВыбора.НайтиПоЗначению(ВариантНастройки);
	
	ВариантНастройкиСтрока.Представление = ВариантНастройкиПредставление(Настройка);
	
КонецПроцедуры // ПроизводительВерсияВыгрузкиПриИзменении()

&НаКлиенте
Процедура ПериодВыгрузкиЗапоминатьПриИзменении(Элемент)
	Элементы.ПериодВыгрузки.Видимость = ЭтаФорма.ПериодВыгрузкиЗапоминать;
КонецПроцедуры // ПериодВыгрузкиЗапоминатьПриИзменении()

&НаКлиенте
Процедура КомандаНастройкиЭкспорт(Команда)
	Перем НастройкиВыгрузки, ЗаголовокВыбора;
	
	НастройкиВыгрузки = ПараметрыВыгрузкиИзФормыВсе();
	
	АдресФайлаДляСкачивания = НастройкиЭкспортНаСервере(НастройкиВыгрузки);
	
	ЗаголовокВыбора			= НСтр("ru = 'Выберите, куда поместить файл с настройками'");
	ИмяФайла				= "Cislink.DtsModule.settings";
	
	#Если ВебКлиент Тогда
	
	ПараметрыДиалога = Новый ПараметрыДиалогаПолученияФайлов;
	ПараметрыДиалога.Заголовок = ЗаголовокВыбора;
	НачатьПолучениеФайлаССервера(АдресФайлаДляСкачивания, ИмяФайла, ПараметрыДиалога);
	
	#Иначе
		
	ДВФ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	ДВФ.Заголовок		= ЗаголовокВыбора;
	ДВФ.Фильтр			= "Cislink.DtsModule.settings|Cislink.DtsModule.settings|Файлы (*.settings)|*.settings";
	ДВФ.Расширение		= ".settings";
	ДВФ.ПолноеИмяФайла	= ИмяФайла;
	
	Если Не ДВФ.Выбрать() Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ДД = ПолучитьИзВременногоХранилища(АдресФайлаДляСкачивания);
	ДД.Записать(ДВФ.ПолноеИмяФайла);
		
	#КонецЕсли
	
КонецПроцедуры // КомандаНастройкиЭкспорт()

&НаСервере
Функция НастройкиЭкспортНаСервере(Знач НастройкиВыгрузки)
	
	Возврат ОбработкаОбъект().НастройкиЭкспортНаСервере(НастройкиВыгрузки);
	
КонецФункции // ЭкспортНастроекНаСервере()

&НаКлиенте
Процедура НастройкиИмпорт()
	
	ДВФ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДВФ.Заголовок		= "Выберите файл с настройками";
	ДВФ.Фильтр			= "Настройки|Cislink.DtsModule*.settings";
	ДВФ.Расширение		= ".settings";
	ДВФ.ПолноеИмяФайла	= "Cislink.DtsModule.settings";
	
	ДВФ.Показать(Новый ОписаниеОповещения("КомандаНастройкиИмпортЗавершение", ЭтаФорма, Новый Структура("ДВФ", ДВФ)));
	
КонецПроцедуры // НастройкиИмпорт()

&НаКлиенте
Процедура КомандаНастройкиИмпорт(Команда)
	
	//#Если ВебКлиент Тогда
		
		РасширенияРаботыСФайламиПодключить(Истина);
		Возврат;
		
	//#КонецЕсли
	//
	//НастройкиИмпорт();
	
КонецПроцедуры // КомандаНастройкиИмпорт()

&НаКлиенте
Процедура РасширенияРаботыСФайламиПодключить(Знач УстановитьЕслиНеПодключено) Экспорт

    НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("РасширенияРаботыСФайламиПослеПодключения", ЭтотОбъект, УстановитьЕслиНеПодключено));
	
КонецПроцедуры // РасширенияРаботыСФайламиПодключить()

&НаКлиенте
Процедура РасширенияРаботыСФайламиПослеПодключения(Знач Подключено, Знач УстановитьЕслиНеПодключено) Экспорт

	Если Подключено Тогда
		
        // Расширение работы с файлами подключено
		
	 	НастройкиИмпорт();

	ИначеЕсли УстановитьЕслиНеПодключено Тогда
		
        НачатьУстановкуРасширенияРаботыСФайлами(
            Новый ОписаниеОповещения(
                "РасширенияРаботыСФайламиПодключить",
                ЭтотОбъект,
                Ложь));
				
	Иначе
				
        // Не удалось установить или подключить

        // расширение работы с файлами

    КонецЕсли; 	

КонецПроцедуры // РасширенияРаботыСФайламиПослеПодключения()

&НаКлиенте
Процедура КомандаНастройкиИмпортЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДВФ = ДополнительныеПараметры.ДВФ;
	
	Если ВыбранныеФайлы = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НачатьСозданиеДвоичныхДанныхИзФайла(
		Новый ОписаниеОповещения("КомандаНастройкиИмпортЗавершениеСозданияДвоичныхДанныхИзФайла", ЭтаФорма)
		, ДВФ.ПолноеИмяФайла
	);
	
КонецПроцедуры // КомандаНастройкиИмпортЗавершение()

&НаКлиенте
Процедура КомандаНастройкиИмпортЗавершениеСозданияДвоичныхДанныхИзФайла(Знач ДвоичныеДанные, Знач ДополнительныеПараметры) Экспорт

	Если ДвоичныеДанные = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	НастройкиИмпортНаСервере(ДвоичныеДанные);
	
	НастройкиВыгрузкиПрименитьНаКлиенте();
	
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры // КомандаНастройкиИмпортЗавершениеСозданияДвоичныхДанныхИзФайла()

&НаСервере
Процедура НастройкиИмпортНаСервере(Знач ДвоичныеДанные)
	
	Перем НастройкиВыгрузки;
	
	НастройкиВыгрузки = ОбработкаОбъект().НастройкиИмпортНаСервере(ДвоичныеДанные);
	
	НастройкиВыгрузкиПрименить(НастройкиВыгрузки);
	
КонецПроцедуры // НастройкиИмпортНаСервере()

&НаКлиенте
Процедура КомандаНастройкиСохранить(Команда)
	
	ВнешняяОбработкаСсылка = ВнешняяОбработкаСсылка();
	
	Если Не ЗначениеЗаполнено(ВнешняяОбработкаСсылка) Тогда
		
		ПоказатьПредупреждение(, "Внешняя обработка не зарегистрирована!", 1);
		ОткрытьФорму("Справочник.ДополнительныеОтчетыИОбработки.ФормаСписка");
		Возврат;
		
	КонецЕсли;
	
	// Сохраняем текущую настройку
	
	НастройкиНовые = НастройкиИзменились(ПараметрыВыгрузкиИзФормыВсе());
	
	Если НастройкиНовые = Неопределено Тогда
	
		ПоказатьПредупреждение(, "Незачем сохранять - ничего не изменилось!", 1);
		Возврат;
	
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВнешняяОбработкаСсылка"	, ВнешняяОбработкаСсылка);
	ДополнительныеПараметры.Вставить("НастройкиНовые"			, НастройкиНовые);
	
	ПоказатьВопрос(
			Новый ОписаниеОповещения("КомандаНастройкиСохранитьЗавершение", ЭтаФорма, ДополнительныеПараметры)
		,	"Сохранить настройки?"
		,	РежимДиалогаВопрос.ДаНет
	);
	
КонецПроцедуры // КомандаНастройкиСохранить()

&НаКлиенте
Процедура КомандаНастройкиСохранитьЗавершение(Знач Результат, Знач ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
	
		Возврат;
	
	КонецЕсли;

	Серриализация_Сохранение(ДополнительныеПараметры.ВнешняяОбработкаСсылка, ДополнительныеПараметры.НастройкиНовые);
	
КонецПроцедуры // КомандаНастройкиСохранитьЗавершение()

&НаКлиенте
Процедура ИнструкцияПоказать()

	ОткрытьФорму(ЭтаФорма.Переменные.ПолноеИмяОбъекта + ".Форма.ИнструкцияУправляемая", , ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	ЭтаФорма.ИнструкцияНеПоказывать = Истина;
	
КонецПроцедуры // ИнструкцияПоказать()

&НаКлиенте
Процедура КомандаИнструкцияПоказать(Команда)
	
	ИнструкцияПоказать();
	
КонецПроцедуры // КомандаИнструкцияПоказать()

&НаКлиенте
Процедура КомандаДополнительныеСведения(Команда)
	Перем ПараметрыОткрытия;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДополнительныеСведения", ЭтаФорма.Переменные.ДополнительныеСведения);
	
	ОткрытьФорму(
			ЭтаФорма.Переменные.ПолноеИмяОбъекта + ".Форма.ДополнительныеСведенияУправляемая"
		,	ПараметрыОткрытия
		,	ЭтаФорма
		,,,
		,	Новый ОписаниеОповещения("КомандаДополнительныеСведенияЗавершение", ЭтаФорма)
		,	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры // КомандаДополнительныеСведения()

&НаКлиенте
Процедура КомандаДополнительныеСведенияЗавершение(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ЭтаФорма.Переменные.Вставить("ДополнительныеСведения", Результат.ДополнительныеСведения);

КонецПроцедуры // КомандаДополнительныеСведенияЗавершение()

&НаКлиенте
Процедура ОбщегоНазначенияКлиентСообщитьПользователю(Знач ТекстСообщенияПользователю, Знач КлючДанных = Неопределено,	Знач Поле = "",
	Знач ПутьКДанным = "", Отказ = Ложь)
	
	Если Не ЭтаФорма.Переменные.ВсеКонстанты.БСП_СтаройВерсии Тогда
	
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияПользователю, КлючДанных, Поле,	ПутьКДанным, Отказ);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияПользователю, КлючДанных, Поле,	ПутьКДанным, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры // ОбщегоНазначенияКлиентСообщитьПользователю()

&НаСервере
Процедура ОбщегоНазначенияСообщитьПользователю(Знач ТекстСообщенияПользователю, Знач КлючДанных = Неопределено,	Знач Поле = "",
	Знач ПутьКДанным = "", Отказ = Ложь)
	
	Если Не ЭтаФорма.Переменные.ВсеКонстанты.БСП_СтаройВерсии Тогда
	
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияПользователю, КлючДанных, Поле,	ПутьКДанным, Отказ);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияПользователю, КлючДанных, Поле,	ПутьКДанным, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры // ОбщегоНазначенияКлиентСообщитьПользователю()

&НаКлиенте
Процедура КомандаТаблицаТранслита(Команда)
	Перем ПараметрыОткрытия;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТаблицаТранслита", ЭтаФорма.Переменные.ТаблицаТранслита);
	
	ОткрытьФорму(
			ЭтаФорма.Переменные.ПолноеИмяОбъекта + ".Форма.ТаблицаТранслитаУправляемая"
		,	ПараметрыОткрытия
		,	ЭтаФорма
		,,,
		,	Новый ОписаниеОповещения("КомандаТаблицаТранслитаЗавершение", ЭтаФорма)
		,	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры // КомандаТаблицаТранслита()

&НаКлиенте
Процедура КомандаТаблицаТранслитаЗавершение(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ЭтаФорма.Переменные.Вставить("ТаблицаТранслита", Результат.ТаблицаТранслита);

КонецПроцедуры // КомандаТаблицаТранслитаЗавершение()

&НаКлиенте
Процедура КомандаТипыФилиалов(Команда)
	Перем ПараметрыОткрытия;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТипыФилиалов"	, ЭтаФорма.Переменные.ТипыФилиалов);
	
	ОткрытьФорму(
			ЭтаФорма.Переменные.ПолноеИмяОбъекта + ".Форма.ТипыФилиаловУправляемая"
		,	ПараметрыОткрытия
		,	ЭтаФорма
		,,,
		,	Новый ОписаниеОповещения("КомандаТипыФилиаловЗавершение", ЭтаФорма)
		,	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры // КомандаТипыФилиалов()

&НаКлиенте
Процедура КомандаТипыФилиаловЗавершение(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ЭтаФорма.Переменные.Вставить("ТипыФилиалов", Результат.ТипыФилиалов);
	
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры // КомандаТипыФилиаловЗавершение()

&НаКлиенте
Процедура ТорговыйПредставительПриИзменении(Элемент)
	
	ТорговыйПредставительПриИзмененииНаКлиенте();
	
КонецПроцедуры // ТорговыйПредставительПриИзменении()

&НаКлиенте
Процедура ТорговыйПредставительОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ТорговыйПредставительОчистка()

&НаКлиенте
Процедура ТорговыйПредставительПриИзмененииНаКлиенте()

	Перем НастройкиОбщие;
	
	НастройкиОбщие = Новый Структура(ЭтаФорма.Переменные.НастройкиВыгрузкиШаблон.НастройкиОбщие);
	
	Элементы.СвойствоТорговыйПредставитель.Видимость =
		НастройкиОбщие.Свойство("ТорговыйПредставитель")
		И НастройкиОбщие.Свойство("СвойствоТорговыйПредставитель")
		И Элементы.ТорговыйПредставитель.Видимость
		И ТорговыйПредставитель = "ДополнительныйРеквизит"
	
КонецПроцедуры // ТорговыйПредставительПриИзмененииНаКлиенте()

Процедура HTTP_ИспользоватьПриИзменении()

	Перем ВыпуститьВРелиз;
	
	ВыпуститьВРелиз = Истина;
	// ВыпуститьВРелиз = Ложь;
	
	Элементы.НастройкиОбщие_HTTP_Использовать.Видимость	= ВыпуститьВРелиз;
	Элементы.НастройкиОбщие_HTTP_API_KEY.Видимость		= ВыпуститьВРелиз И НастройкиОбщие_HTTP_Использовать;
	
	Элементы.HTTP_Использовать.Видимость				= ВыпуститьВРелиз И НастройкиОбщие_HTTP_Использовать;
	Элементы.HTTP_ПартнерИмя.Видимость					= ВыпуститьВРелиз И НастройкиОбщие_HTTP_Использовать И HTTP_Использовать;
	Элементы.HTTP_API_KEY.Видимость						= ВыпуститьВРелиз И НастройкиОбщие_HTTP_Использовать И HTTP_Использовать = 1;

КонецПроцедуры // HTTP_ИспользоватьПриИзменении()

&НаКлиенте
Процедура HTTP_ИспользоватьПриИзмененииНаКлиенте(Элемент)
	
	HTTP_ИспользоватьПриИзменении();
	
КонецПроцедуры // HTTP_ИспользоватьПриИзмененииНаКлиенте()

&НаСервереБезКонтекста
Функция ПрочитатьJSON_НаСервере(Знач Строка)

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);

	Возврат ПрочитатьJSON(ЧтениеJSON);

КонецФункции // ПрочитатьJSON_НаСервере()

&НаСервереБезКонтекста
Функция XMLСтрока_НаСервере(Знач Строка)

	Возврат XMLСтрока(Строка);

КонецФункции // ПрочитатьJSON_НаСервере()

&НаКлиенте
Функция РаспарситьСерверПорт(Знач Сервер, Знач ПортПоУмолчанию = 443)

	Результат = Новый Структура("Сервер, Порт", Сервер, ПортПоУмолчанию);
	
	НомПоз = СтрНайти(Сервер, ":");
	
	Если НомПоз Тогда
	
		Результат.Сервер	= СокрЛП(Лев(Сервер		, НомПоз - 1));
		Результат.Порт		= Число(СокрЛП(Сред(Сервер	, НомПоз + 1)));
	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // РаспарситьСерверПорт()

&НаКлиенте
Функция HTTP_Сервер_МассивПартнеров_НаКлиенте(Знач HTTP_Сервер, Знач API_KEY, Знач Отбор_ManfID = 0)

	Если Не ЗначениеЗаполнено(HTTP_Сервер) Тогда
	
		ВызватьИсключение "HTTP сервер не указан";
	
	КонецЕсли;

	Если Не ЗначениеЗаполнено(API_KEY) Тогда
	
		ВызватьИсключение "API KEY не указан";
	
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		SSL = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(), Новый СертификатыУдостоверяющихЦентровWindows());
	#Иначе
		SSL = Новый ЗащищенноеСоединениеOpenSSL;
	#КонецЕсли
	
	СерверПорт	= РаспарситьСерверПорт(HTTP_Сервер);
	НТТР		= Новый HTTPСоединение(СерверПорт.Сервер, СерверПорт.Порт, , , , , SSL, Истина);
	
	ЗаголовокHTTP = Новый Соответствие;
	ЗаголовокHTTP.Вставить("X-API-Key"		, API_KEY);
	ЗаголовокHTTP.Вставить("User-Agent"		, ЭтаФорма.Переменные.ВсеКонстанты.UserAgent);
	ЗаголовокHTTP.Вставить("Content-Type"	, "application/json");

	ЗапросHTTP		= Новый HTTPЗапрос("/api/v1/partners", ЗаголовокHTTP);
	
	Ответ			= НТТР.ВызватьHTTPМетод("GET", ЗапросHTTP);
	ПартнерыСтрокой = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 200 Тогда
	
		ВызватьИсключение ПартнерыСтрокой;
	
	КонецЕсли;
	
	#Если ВебКлиент Тогда
	partners	= ПрочитатьJSON_НаСервере(ПартнерыСтрокой);
	#Иначе
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ПартнерыСтрокой);
	partners	= ПрочитатьJSON(ЧтениеJSON);
	#КонецЕсли
	
	partnersТип = ТипЗнч(partners);
	
	Если partnersТип <> Тип("Массив") Тогда
	
		ВызватьИсключение "Неожиданный тип результата: " + partnersТип;
	
	КонецЕсли;
	
	Если Отбор_ManfID <> 0 Тогда
	
		Для х = -partners.ВГраница() По 0 Цикл
		
			Если partners[-х].ManfID <> Отбор_ManfID Тогда
			
				partners.Удалить(-х);
			
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат partners;

КонецФункции // HTTP_Сервер_МассивПартнеров_НаКлиенте()

&НаСервере
Функция HTTP_Сервер_МассивПартнеров_НаСервере(Знач HTTP_Сервер, Знач API_KEY, Знач Отбор_ManfID = 0)

	Возврат ОбработкаОбъект().HTTP_Сервер_МассивПартнеров(HTTP_Сервер, API_KEY, Отбор_ManfID);

КонецФункции // HTTP_Сервер_МассивПартнеров_НаСервере()

&НаКлиенте
Функция HTTP_Сервер_МассивПартнеров(Знач HTTP_Сервер, Знач API_KEY, Знач Отбор_ManfID = 0)
	
	Перем ЭтоВебКлиент;
	
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#Иначе
		ЭтоВебКлиент = Ложь;
	#КонецЕсли
	
	Если РежимРаботыСервер(ЭтаФорма.РежимРаботыКлиент) Или ЭтоВебКлиент Тогда
	
		Возврат HTTP_Сервер_МассивПартнеров_НаСервере(HTTP_Сервер, API_KEY, Отбор_ManfID);
	
	КонецЕсли;
	
	Возврат HTTP_Сервер_МассивПартнеров_НаКлиенте(HTTP_Сервер, API_KEY, Отбор_ManfID);
	
КонецФункции // HTTP_Сервер_МассивПартнеров()

&НаКлиенте
Функция HTTP_Сервер_Доступен_НаКлиенте(Знач HTTP_Сервер, Знач API_KEY)

	Если Не ЗначениеЗаполнено(HTTP_Сервер) Тогда
	
		ВызватьИсключение "HTTP сервер не указан";
	
	КонецЕсли;

	Если Не ЗначениеЗаполнено(API_KEY) Тогда
	
		ВызватьИсключение "API KEY не указан";
	
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		SSL = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(), Новый СертификатыУдостоверяющихЦентровWindows());
	#Иначе
		SSL = Новый ЗащищенноеСоединениеOpenSSL;
	#КонецЕсли
	
	СерверПорт	= РаспарситьСерверПорт(HTTP_Сервер);
	НТТР		= Новый HTTPСоединение(СерверПорт.Сервер, СерверПорт.Порт, , , , , SSL, Истина);
	
	ЗаголовокHTTP = Новый Соответствие;
	ЗаголовокHTTP.Вставить("X-API-Key"		, API_KEY);
	ЗаголовокHTTP.Вставить("User-Agent"		, ЭтаФорма.Переменные.ВсеКонстанты.UserAgent);
	ЗаголовокHTTP.Вставить("Content-Type"	, "application/json");

	ЗапросHTTP		= Новый HTTPЗапрос("/api/v1/version", ЗаголовокHTTP);
	
	Ответ			= НТТР.ВызватьHTTPМетод("GET", ЗапросHTTP);
	Результат 		= Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 200 Тогда
	
		ВызватьИсключение Результат;
	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // HTTP_Сервер_Доступен_НаКлиенте()

&НаСервере
Функция HTTP_Сервер_Доступен_НаСервере(Знач HTTP_Сервер, Знач API_KEY)

	Возврат ОбработкаОбъект().HTTP_Сервер_Доступен(HTTP_Сервер, API_KEY);

КонецФункции // HTTP_Сервер_Доступен_НаСервере()

&НаКлиенте
Функция HTTP_Сервер_Доступен(Знач HTTP_Сервер, Знач API_KEY)
	
	Если РежимРаботыСервер(ЭтаФорма.РежимРаботыКлиент) Тогда
	
		Возврат HTTP_Сервер_Доступен_НаСервере(HTTP_Сервер, API_KEY);
	
	КонецЕсли;
	
	Возврат HTTP_Сервер_Доступен_НаКлиенте(HTTP_Сервер, API_KEY);
	
КонецФункции // HTTP_Сервер_Доступен()

&НаКлиенте
Функция HTTP_Сервер_ОтправитьФайлы(Знач ПартнерИмя, Знач HTTP_Сервер, Знач API_KEY, Знач ФайлыДляОтправкиМассив)

	Если Не ЗначениеЗаполнено(HTTP_Сервер) Тогда
	
		ВызватьИсключение "HTTP сервер не указан";
	
	КонецЕсли;

	Если Не ЗначениеЗаполнено(API_KEY) Тогда
	
		ВызватьИсключение "API KEY не указан";
	
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ПартнерИмя) Тогда
	
		ВызватьИсключение "API KEY не указан";
	
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		SSL = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(), Новый СертификатыУдостоверяющихЦентровWindows());
	#Иначе
		SSL = Новый ЗащищенноеСоединениеOpenSSL;
	#КонецЕсли
	
	СерверПорт	= РаспарситьСерверПорт(HTTP_Сервер);
	НТТР		= Новый HTTPСоединение(СерверПорт.Сервер, СерверПорт.Порт, , , , , SSL, Истина);
	
	РазделительФайлов	= СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	РазделительСтрокДД	= ПолучитьДвоичныеДанныеИзСтроки(ЭтаФорма.Переменные.ВсеКонстанты.РазделительСтрок, КодировкаТекста.ANSI);
	
	Поток			= Новый ПотокВПамяти;
	ЗаписьДанных	= Новый ЗаписьДанных(Поток, КодировкаТекста.ANSI, , , , Ложь);
	
	Для каждого ФайлОписание Из ФайлыДляОтправкиМассив Цикл
		
		ЗаписьДанных.ЗаписатьСимволы("--" + РазделительФайлов);
		ЗаписьДанных.Записать(РазделительСтрокДД);
		ЗаписьДанных.ЗаписатьСимволы("Content-Disposition: form-data; filename=""");
		
		ЗаписьДанных.ЗаписатьСимволы(ФайлОписание.ФайлИмя);
		ЗаписьДанных.ЗаписатьСимволы("""");
		ЗаписьДанных.Записать(РазделительСтрокДД);
		ЗаписьДанных.ЗаписатьСимволы("Content-Type: text/plane");
		ЗаписьДанных.Записать(РазделительСтрокДД);
		ЗаписьДанных.Записать(РазделительСтрокДД);
		
		ЗаписьДанных.Записать(ФайлОписание.ФайлДвоичныеДанные);
		ЗаписьДанных.Записать(РазделительСтрокДД);
		
	КонецЦикла;
	
	ЗаписьДанных.Записать(РазделительСтрокДД);
	ЗаписьДанных.ЗаписатьСимволы("--" + РазделительФайлов + "--");
	ЗаписьДанных.Записать(РазделительСтрокДД);
	
	ЗаписьДанных.Закрыть();
	
	ТелоЗапросаДД = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	ЗаголовокHTTP = Новый Соответствие;
	
	ЗаголовокHTTP.Вставить("X-API-Key"		, API_KEY);
	ЗаголовокHTTP.Вставить("User-Agent"		, ЭтаФорма.Переменные.ВсеКонстанты.UserAgent);

	ЗаголовокHTTP.Вставить("Content-Type"	, "multipart/form-data; boundary=" + РазделительФайлов);
	
	ЗапросHTTP = Новый HTTPЗапрос("/api/v1/files?partnerName=" + ПартнерИмя, ЗаголовокHTTP);
	
	ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ТелоЗапросаДД);
	
	Ответ				= НТТР.ВызватьHTTPМетод("POST", ЗапросHTTP);
	
	СообщениеСервера	= Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 200 Тогда
		
		ВызватьИсключение СообщениеСервера;
		
	КонецЕсли;
	
	Возврат СообщениеСервера;
	
КонецФункции // HTTP_Сервер_ОтправитьФайлы()

&НаКлиенте
Процедура HTTP_ПартнерИмяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Перем API_KEY, Реквизит_HTTP_API_KEY, ПартнерыМассив, PartnerName;
	
	Если ЭтаФорма.HTTP_Использовать = 1 Тогда
	
		Реквизит_HTTP_API_KEY = "HTTP_API_KEY";
		
	ИначеЕсли ЭтаФорма.HTTP_Использовать = 2 И ЭтаФорма.НастройкиОбщие_HTTP_Использовать Тогда
		
		Реквизит_HTTP_API_KEY = "НастройкиОбщие_HTTP_API_KEY";
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	API_KEY = СокрЛП(ЭтаФорма[Реквизит_HTTP_API_KEY]);
	
	Если ПустаяСтрока(API_KEY) Тогда
	
		ОбщегоНазначенияКлиентСообщитьПользователю(
			"Не выбран API KEY"
			, , , Реквизит_HTTP_API_KEY
		);
		
		Возврат;
	
	КонецЕсли;
	
	ПроизводительОписание	= ЭтаФорма.Переменные.ВсеПроизводители[ЭтаФорма.manfid];
	
	ПартнерыМассив			= Новый Массив;
	
	Попытка
	
		ПартнерыМассив			= HTTP_Сервер_МассивПартнеров(ПроизводительОписание.HTTP_Сервер, API_KEY, ЭтаФорма.manfid);
	
	Исключение
		
		ОбщегоНазначенияКлиентСообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияКлиентСообщитьПользователю(
			"Не удалось получить партнеров. " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			, , , Реквизит_HTTP_API_KEY
		);
		
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(ПартнерыМассив) Тогда
		
		ПоказатьПредупреждение(, "Для выбранного производителя отправка на HTTP недоступна");
		
		Возврат;
	
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	Для каждого ПартнерОписание Из ПартнерыМассив Цикл
		
		PartnerName = СокрЛП(ПартнерОписание.PartnerName);
		
		СписокВыбора.Добавить(ПартнерОписание, PartnerName, ПартнерыМассив.Количество() = 1 Или PartnerName = ЭтаФорма.HTTP_ПартнерИмя);
	
	КонецЦикла;
	
	СписокВыбора.СортироватьПоПредставлению();
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СписокЗначений"	, СписокВыбора);
	ПараметрыОткрытия.Вставить("Заголовок"		, "Выберите имя партнера");

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("API_KEY"				, API_KEY);
	ДополнительныеПараметры.Вставить("ПроизводительОписание", ПроизводительОписание);
	
	ОткрытьФорму(
			ЭтаФорма.Переменные.ПолноеИмяОбъекта + ".Форма.ВыборИзСпискаУправляемая"
		,	ПараметрыОткрытия
		,	ЭтаФорма
		,,,
		,	Новый ОписаниеОповещения("HTTP_ПартнерИмяНачалоВыбораЗавершение", ЭтаФорма, ДополнительныеПараметры)
		,	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры // HTTP_ПартнерИмяНачалоВыбора()

&НаКлиенте
Процедура HTTP_ПартнерИмяНачалоВыбораЗавершение(СписокВыбора, ДополнительныеПараметры) Экспорт
	
	Если СписокВыбора = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для каждого СписокВыбораСтрока Из СписокВыбора Цикл
	
		Если СписокВыбораСтрока.Пометка Тогда
			
			ЭтаФорма.HTTP_ПартнерИмя = СписокВыбораСтрока.Представление;
			
			Возврат;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // HTTP_ПартнерИмяНачалоВыбораЗавершение()

&НаКлиенте
Процедура КодировкаТекстаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Для каждого КодировкаТекстаСтрокаСписка Из ЭтаФорма.Элементы.КодировкаТекста.СписокВыбора Цикл
	
		ЭтаФорма.КодировкаТекста = КодировкаТекстаСтрокаСписка.Значение;
		
		Прервать;
	
	КонецЦикла;
	
КонецПроцедуры // КодировкаТекстаОчистка()