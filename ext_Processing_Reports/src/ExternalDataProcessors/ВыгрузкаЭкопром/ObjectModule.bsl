#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОписаниеПеременных

//@skip-warning
Перем мСтруктураКэшДанных;

#КонецОбласти
	
#Область СлужебныйПрограммныйИнтерфейс

#Область ДополнительныеОтчетыИОбработки

Функция ЗаголовокФормы() Экспорт

	СведенияОВнешнейОбработке = СведенияОВнешнейОбработке();
	Результат = "v." + СведенияОВнешнейОбработке.Версия + " " + СведенияОВнешнейОбработке.Наименование;

	Возврат Результат;

КонецФункции

Функция СведенияОВнешнейОбработке() Экспорт

	Версии = Версии();
	МетаОбъект = МетаОбъект();

	Результат = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(Версии.БСП);
	Результат.Информация = МетаОбъект.Синоним;
	Результат.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	Результат.Версия = Версии.Обработка;
	Результат.БезопасныйРежим = Ложь;
	Результат.Наименование = МетаОбъект.Синоним;

	Команда = Результат.Команды.Добавить();
	Команда.Представление = "Сформировать, отправить данные (Задание)";
	Команда.Идентификатор = "СформироватьОтправитьДанныеЗадание";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	Команда.ПоказыватьОповещение = Ложь;

	Команда = Результат.Команды.Добавить();
	Команда.Представление = "Открыть форму подготовки / отправки";
	Команда.Идентификатор = "ОткрытьФормуПодготовитьОтправитьДанные";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	Команда.ПоказыватьОповещение = Истина;

	Возврат Результат;
	
КонецФункции

Функция МетаОбъект() Экспорт
	Ключ = "МетаОбъект";
	
	Если НЕ мСтруктураКэшДанных.Свойство(Ключ) Тогда
		мСтруктураКэшДанных.Вставить(Ключ, Метаданные());
	КонецЕсли;

	Возврат мСтруктураКэшДанных.МетаОбъект;
КонецФункции

Процедура ЗагрузитьНастройки() Экспорт
	//@skip-check undefined-variable
	рвк_ДополнительныеОтчетыИОбработки.ЗагрузитьНастройки(ЭтотОбъект);
	
	Если Не НастройкиЗагружены Тогда
		ИдентификационныйКодЭкопром = 6009;
		ИдентификационныйКодДистрибьютера = "2311254019";
		ГлубинаОтчетаДней = 45;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
		ДатаНачала = ТекущаяДата - 86400 * ГлубинаОтчетаДней;
		ДатаОкончания = КонецДня(ТекущаяДата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьНастройки() Экспорт
	//@skip-check undefined-variable
	рвк_ДополнительныеОтчетыИОбработки.ЗаписатьНастройки(ЭтотОбъект);
КонецПроцедуры

Функция ИменаНастроек() Экспорт
	Результат = Новый Массив;
	Результат.Добавить("Производитель");
	Результат.Добавить("ГлубинаОтчетаДней");
	Результат.Добавить("ИдентификационныйКодЭкопром");
	Результат.Добавить("ИдентификационныйКодДистрибьютера");
	Результат.Добавить("ПутьВыгрузки");
	Возврат Результат;
КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения) Экспорт
	
	Если ИдентификаторКоманды = "СформироватьОтправитьДанныеЗадание" Тогда
		Заполнить();
		АдресРезультатаЗаписи = ЗаписатьДанные();
		Отправить(АдресРезультатаЗаписи);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура Заполнить() Экспорт
	
	ДанныеЗаполнены = Ложь;
	Отказ = Ложь;
	
	ЗагрузитьНастройки();
	
	Заполнить_Остатки("eprest", Отказ);
	Заполнить_ДетализациюДвиженияТовара("epsales", Отказ);
	Заполнить_СправочникФилиалов("epwh", Отказ);
	
	ДанныеЗаполнены = Не Отказ;
	мСтруктураКэшДанных.Очистить();
	
КонецПроцедуры

Функция ЗаписатьДанные(АдресРезультата = Неопределено) Экспорт
	
	Мета = МетаОбъект();
	ДанныеФайлов = Новый Массив;
	
	Для Каждого ТабличнаяЧасть Из Мета.ТабличныеЧасти Цикл
		ИмяТаблицы = ТабличнаяЧасть.Имя;
		ДанныеФайла = ДанныеФайлаПоТаблице(ИмяТаблицы);
		ДанныеФайлов.Добавить(ДанныеФайла);
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеФайлов, АдресРезультата);
	
КонецФункции

Процедура Отправить(АдресРезультатаЗаписи) Экспорт
	
	Если Не ДанныеЗаполнены Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Сервис

Функция Версии()
	Результат = Новый Структура();
	Результат.Вставить("Обработка", "1.00");
	Результат.Вставить("Конфигурация", "2.5.12.195");
	Результат.Вставить("БСП", "3.1.1.136");
	Возврат Результат;
КонецФункции

#Область ПодготовкаДанных

Процедура Заполнить_Остатки(ИмяТЧ, Отказ)
	
	Таблица = ЭтотОбъект[ИмяТЧ];
	Таблица.Очистить();
	
	ЭтотОбъект["epcatal"].Очистить();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = ПолучитьМакет("Остатки");	

    //создадим компоновщик настроек и загрузим настройки по умолчанию, вместо настроек по умолчанию можно использовать восстановленные настройки
    КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
    КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
    Настройки = КомпоновщикНастроек.Настройки;
    
    //установка параметров отчета, без КомпоновщикНастроекКомпоновкиДанных делать это гораздо сложнее
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Производитель", Производитель);
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаНачала", ДатаНачала);
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаОкончания", ДатаОкончания + 1);
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ИдентификационныйКодЭкопром", ИдентификационныйКодЭкопром);
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ИдентификационныйКодДистрибьютера", ИдентификационныйКодДистрибьютера);
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КачествоНеГоден", Перечисления.ГрадацииКачества.НеГоден);
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПроизводственныйКалендарь", Справочники.ПроизводственныеКалендари.НайтиПоКоду("РФ"));
    
    //Помещаем в переменную данные о расшифровке данных - здесь ненужный пункт, но пусть будет.
    ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

    //Формируем макет, с помощью компоновщика макета
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    //Передаем в макет компоновки схему, настройки и данные расшифровки
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

    //Выполним компоновку с помощью процессора компоновки
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);

    //Очищаем поле табличного документа
    ТаблицаОстатки = Новый ТаблицаЗначений;
    //Выводим результат в табличный документ
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
    ПроцессорВывода.УстановитьОбъект(ТаблицаОстатки);

    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
    
    Таблица.Загрузить(ТаблицаОстатки);
    
    Для Каждого СтрокаОстатки Из ТаблицаОстатки Цикл
    	ДополнитьСправочник(epcatal, "code", СтрокаОстатки.code, СтрокаОстатки);	
    КонецЦикла;
    
КонецПроцедуры

Процедура Заполнить_ДетализациюДвиженияТовара(ИмяТЧ, Отказ)
	
	Таблица = ЭтотОбъект[ИмяТЧ];
	Таблица.Очистить();

	ЭтотОбъект["epclient"].Очистить();
	ЭтотОбъект["epsr"].Очистить();

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса_ДетализациюДвиженияТовара();
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Производитель", Производитель);
	Запрос.УстановитьПараметр("ВидКИ_ЮридическийАдресКонтрагента", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	Запрос.УстановитьПараметр("ВидКИ_ФактическийАдресКонтрагента", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	Запрос.УстановитьПараметр("ИдентификационныйКодЭкопром", ИдентификационныйКодЭкопром);
	Запрос.УстановитьПараметр("ИдентификационныйКодДистрибьютера", ИдентификационныйКодДистрибьютера);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТипыОперацийПоТипамДокументов = ТипыОперацийПоТипамДокументов(); 
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТипОперации = ТипыОперацийПоТипамДокументов.Получить(Выборка.ТипДокумента);
		Если ТипОперации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗнакМножителя = 1;
		ЗнакМножителя = ?(Выборка.quantity > 0, 1, -1);
		
		Если ТипОперации = 9 И Выборка.quantity > 0 Тогда
			ТипОперации = 1;
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить(); 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.quantity = НоваяСтрока.quantity * ЗнакМножителя;
		НоваяСтрока.amount_bp  = НоваяСтрока.amount_bp * ЗнакМножителя;
		
		НоваяСтрока.oper_type = ТипОперации;
		
		НоваяСтрока.vat = СуммаНДС(НоваяСтрока.amount_cp, Выборка.СтавкаНДС);
		
		Если ЗначениеЗаполнено(Выборка.Контрагент) Тогда
			НоваяСтрока.clientcode = XmlСтрока(Выборка.Контрагент.УникальныйИдентификатор());
			ДополнитьСправочник(epclient, "clientcode", НоваяСтрока.clientcode, Выборка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ТорговыйПредставитель) Тогда
			НоваяСтрока.tpcode = XmlСтрока(Выборка.ТорговыйПредставитель.УникальныйИдентификатор());
			ДополнитьСправочник(epsr, "tpcode", НоваяСтрока.tpcode, Выборка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СуммаНДС(СуммаСНДС, СтавкаНДС)
	ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
	Возврат УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СуммаСНДС, ТекПроцентНДС, Истина);
КонецФункции

Функция ТипыОперацийПоТипамДокументов()
	Результат = Новый Соответствие;
	
	Результат.Вставить(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"), 0);
	Результат.Вставить(Тип("ДокументСсылка.РеализацияТоваровУслуг"), 0);
	
	Результат.Вставить(Тип("ДокументСсылка.КорректировкаРеализации"), 9);
	
	Результат.Вставить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"), 2);
	
	Результат.Вставить(Тип("ДокументСсылка.КорректировкаПриобретения"), 7);
	
	Возврат Результат;
КонецФункции

Процедура Заполнить_СправочникФилиалов(ИмяТЧ, Отказ)
	
	Таблица = ЭтотОбъект[ИмяТЧ];
	Таблица.Очистить();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнаяОрганизация = Справочники.Организации.НайтиПоРеквизиту("ИНН", ИдентификационныйКодДистрибьютера);
	
	ОтборКИ = УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации();
	ОтборКИ.Дата = ДатаНачала;
	ОтборКИ.ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформация(ОсновнаяОрганизация, ОтборКИ);
	
	НоваяСтрокаТаблицы = Таблица.Добавить();
	НоваяСтрокаТаблицы.whcode = ИдентификационныйКодДистрибьютера;
	НоваяСтрокаТаблицы.whname = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнаяОрганизация, "НаименованиеПолное");
	НоваяСтрокаТаблицы.whaddress = ?(ЗначениеЗаполнено(ТаблицаКИ), ТаблицаКИ[0].Представление, "");
	НоваяСтрокаТаблицы.manfid = ИдентификационныйКодЭкопром;

КонецПроцедуры

Процедура ДополнитьСправочник(ТаблицаСправочника, ИмяКлюча, ЗначениеКлюча, Данные)
	Если ТаблицаСправочника.Найти(ЗначениеКлюча, ИмяКлюча) = Неопределено Тогда
		НоваяСтрокаСправочника = ТаблицаСправочника.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСправочника, Данные);
		НоваяСтрокаСправочника[ИмяКлюча] = ЗначениеКлюча;
	КонецЕсли;
КонецПроцедуры

Функция ДанныеФайлаПоТаблице(ИмяТаблицы)
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяФайла", СтрШаблон("%1.txt", ИмяТаблицы));
	Результат.Вставить("ДанныеФайла", ДвоичныеДанныеТаблицы_txt(ИмяТаблицы));
	
	Возврат Результат;
КонецФункции

Функция ДвоичныеДанныеТаблицы_txt(ИмяТаблицы)

	СимволРазделителя = Символы.Таб;

	Мета = МетаОбъект();
	РеквизитыТаблицы = Мета.ТабличныеЧасти[ИмяТаблицы].Реквизиты;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ФайлРезультата = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.ANSI);
	
	ЗначенияПолей = Новый Массив;
	Для Каждого Реквизит Из РеквизитыТаблицы Цикл
		ЗначенияПолей.Добавить(Реквизит.Имя);
	КонецЦикла;
	ФайлРезультата.ЗаписатьСтроку(СтрСоединить(ЗначенияПолей, СимволРазделителя));
	
	Для Каждого СтрокаТаблицы Из ЭтотОбъект[ИмяТаблицы] Цикл
		ЗначенияПолей = Новый Массив;
		Для Каждого Реквизит Из РеквизитыТаблицы Цикл
			ЗначениеПоля = ЗначениеПоля(СтрокаТаблицы[Реквизит.Имя], Реквизит.Формат);
			ЗначенияПолей.Добавить(ЗначениеПоля);
		КонецЦикла;
		ФайлРезультата.ЗаписатьСтроку(СтрСоединить(ЗначенияПолей, СимволРазделителя));
	КонецЦикла;
	ФайлРезультата.Закрыть();
	ФайлРезультата = Неопределено;
	
	ДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ДанныеФайла;
КонецФункции

Функция ЗначениеПоля(Знач Значение, Знач Формат)
	Результат = "";
	Если ЗначениеЗаполнено(Формат) Тогда
		Результат = Формат(Значение, Формат);
	ИначеЕсли Не ПустаяСтрока(Значение) Тогда
		Результат = СокрЛП(СтрЗаменить(Значение, Символы.Таб, ""));
	КонецЕсли;
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ТекстыЗапросов

Функция ТекстЗапроса_ДетализациюДвиженияТовара()
	Возврат "ВЫБРАТЬ
	|	КлючиАналитикиУчетаНоменклатуры.Ссылка КАК АналитикаНоменклатуры,
	|	КлючиАналитикиУчетаНоменклатуры.Номенклатура.Код КАК НоменклатураКод,
	|	ВЫБОР
	|		КОГДА КлючиАналитикиУчетаНоменклатуры.Номенклатура.ВесЧислитель = 0
	|			ТОГДА 1
	|		ИНАЧЕ КлючиАналитикиУчетаНоменклатуры.Номенклатура.ВесЧислитель * 1000
	|	КОНЕЦ КАК ВесЕдиницы
	|ПОМЕСТИТЬ ВТ_АнадитикаНоменклатуры
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
	|ГДЕ
	|	КлючиАналитикиУчетаНоменклатуры.Номенклатура.Производитель = &Производитель
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	усОстаткиПоПартиямОбороты.Регистратор КАК Документ,
	|	ТИПЗНАЧЕНИЯ(усОстаткиПоПартиямОбороты.Регистратор) КАК ТипДокумента,
	|	усОстаткиПоПартиямОбороты.Партия КАК Партия,
	|	ВТ_АнадитикаНоменклатуры.НоменклатураКод КАК code,
	|	усОстаткиПоПартиямОбороты.Регистратор.Контрагент КАК Контрагент,
	|	усОстаткиПоПартиямОбороты.КоличествоОборот КАК quantity,
	|	усОстаткиПоПартиямОбороты.СтоимостьОборот КАК amount_bp,
	|	усПродажиОбороты.СуммаВыручкиОборот КАК amount_cp,
	|	усОстаткиПоПартиямОбороты.Период КАК curr_date,
	|	усОстаткиПоПартиямОбороты.Регистратор.Номер КАК doc_number,
	|	усОстаткиПоПартиямОбороты.Регистратор.Контрагент.ИНН КАК inn,
	|	усОстаткиПоПартиямОбороты.Регистратор.Контрагент.КПП КАК kpp,
	|	КИ_ЮрАдрес.Представление КАК address_ur,
	|	КИ_ФкАдрес.Представление КАК address,
	|	усОстаткиПоПартиямОбороты.Регистратор.Контрагент.НаименованиеПолное КАК clientname,
	|	0 КАК ru,
	|	усОстаткиПоПартиямОбороты.Регистратор.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВТ_АнадитикаНоменклатуры.ВесЕдиницы КАК weight,
	|	&ИдентификационныйКодДистрибьютера КАК whcode,
	|	&ИдентификационныйКодЭкопром КАК manfid,
	|	усПродажиОбороты.Регистратор.Партнер.ОсновнойМенеджер КАК ТорговыйПредставитель,
	|	2 КАК tptypeid,
	|	ЕСТЬNULL(усПродажиОбороты.Регистратор.Партнер.ОсновнойМенеджер.ФизическоеЛицо.ФИО,
	|		усПродажиОбороты.Регистратор.Партнер.ОсновнойМенеджер.Наименование) КАК tpname,
	|	ВТ_АнадитикаНоменклатуры.АналитикаНоменклатуры.Номенклатура.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	РегистрНакопления.усОстаткиПоПартиям.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, АналитикаУчетаНоменклатуры В
	|		(ВЫБРАТЬ
	|			ВТ_АнадитикаНоменклатуры.АналитикаНоменклатуры КАК АналитикаНоменклатуры
	|		ИЗ
	|			ВТ_АнадитикаНоменклатуры КАК ВТ_АнадитикаНоменклатуры)) КАК усОстаткиПоПартиямОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АнадитикаНоменклатуры КАК ВТ_АнадитикаНоменклатуры
	|		ПО усОстаткиПоПартиямОбороты.АналитикаУчетаНоменклатуры = ВТ_АнадитикаНоменклатуры.АналитикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КИ_ЮрАдрес
	|		ПО усОстаткиПоПартиямОбороты.Регистратор.Контрагент = КИ_ЮрАдрес.Ссылка
	|		И (КИ_ЮрАдрес.Вид = &ВидКИ_ЮридическийАдресКонтрагента)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КИ_ФкАдрес
	|		ПО усОстаткиПоПартиямОбороты.Регистратор.Контрагент = КИ_ФкАдрес.Ссылка
	|		И (КИ_ЮрАдрес.Вид = &ВидКИ_ФактическийАдресКонтрагента)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.усПродажи.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор,
	|			АналитикаУчетаНоменклатуры В
	|			(ВЫБРАТЬ
	|				ВТ_АнадитикаНоменклатуры.АналитикаНоменклатуры КАК АналитикаНоменклатуры
	|			ИЗ
	|				ВТ_АнадитикаНоменклатуры КАК ВТ_АнадитикаНоменклатуры)) КАК усПродажиОбороты
	|		ПО усОстаткиПоПартиямОбороты.АналитикаУчетаНоменклатуры = усПродажиОбороты.АналитикаУчетаНоменклатуры
	|		И усОстаткиПоПартиямОбороты.Регистратор = усПродажиОбороты.Регистратор";
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

мСтруктураКэшДанных = Новый Структура;

#КонецОбласти

#КонецЕсли