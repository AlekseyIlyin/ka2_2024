#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом


#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.РезервыПредстоящихРасходов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.11.31";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("044e040e-29e5-11ed-9ec3-3c7c3fd89daa");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.РезервыПредстоящихРасходов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет движения данными по налоговому учету'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РезервыПредстоящихРасходов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыУчетаРезервовПредстоящихРасходов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РезервыПредстоящихРасходов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыНакопления.РезервыПредстоящихРасходов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
КонецПроцедуры

// Процедура регистрации данных для обработчика обновления ОбработатьДанныеДляПереходаНаВерсию.
// 
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра  = "РегистрНакопления.РезервыПредстоящихРасходов";

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РезервыПредстоящихРасходов.Регистратор
	|ИЗ
	|	РегистрНакопления.РезервыПредстоящихРасходов КАК РезервыПредстоящихРасходов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыУчетаРезервовПредстоящихРасходов КАК ОбъектыУчетаРезервовПредстоящихРасходов
	|		ПО РезервыПредстоящихРасходов.ОбъектУчетаРезервов = ОбъектыУчетаРезервовПредстоящихРасходов.Ссылка
	|ГДЕ
	|	РезервыПредстоящихРасходов.СуммаРегл <> РезервыПредстоящихРасходов.СуммаНУ
	|	И НЕ ОбъектыУчетаРезервовПредстоящихРасходов.ДопускаетсяРазличноеФормированиеРезервовБУиНУ";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"),
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрНакопления.РезервыПредстоящихРасходов";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОбновляемыхДанных", ОбновляемыеДанные);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТОбъектыДляОбработки
	|ИЗ
	|	&ТаблицаОбновляемыхДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РезервыПредстоящихРасходов.Регистратор КАК Регистратор,
	|	РезервыПредстоящихРасходов.ОбъектУчетаРезервов
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ВТОбъектыДляОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыПредстоящихРасходов КАК РезервыПредстоящихРасходов
	|		ПО РезервыПредстоящихРасходов.Регистратор = ВТОбъектыДляОбработки.Регистратор
	|ИТОГИ
	|ПО
	|	Регистратор";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДокументов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РезервыПредстоящихРасходов.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаДокументов.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокументов.Регистратор);
			НаборЗаписей.Прочитать();
			
			ТаблицаЗначенийДляОбработки = НаборЗаписей.Выгрузить();
			
			ТребуетсяЗаписать = Ложь;
			
			Выборка = ВыборкаДокументов.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ПараметрыОтбора = Новый Структура("ОбъектУчетаРезервов", Выборка.ОбъектУчетаРезервов);
				СтрокиДляОбработки = ТаблицаЗначенийДляОбработки.НайтиСтроки(ПараметрыОтбора);
				
				Для Каждого СтрокаНабора Из СтрокиДляОбработки Цикл
					Если СтрокаНабора.СуммаНУ <> СтрокаНабора.СуммаРегл Тогда
						СтрокаНабора.СуммаНУ = СтрокаНабора.СуммаРегл;
						ТребуетсяЗаписать = Истина;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
			Если ТребуетсяЗаписать Тогда
				НаборЗаписей.Загрузить(ТаблицаЗначенийДляОбработки);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ВыборкаДокументов.Регистратор);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
