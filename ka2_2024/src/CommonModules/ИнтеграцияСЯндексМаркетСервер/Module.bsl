#Область ПрограммныйИнтерфейс

// Функция получает данные авторизации
//
// Параметры:
//  СтруктураОтвета  - Структура - структура содержит набор ключей, которые необходимо вернуть.
//
// Возвращаемое значение:
//  СтруктураДанныхАвторизации  - Структура - структура содержит запрошенный набор ключей.
//
Функция ДанныеАвторизации(СтруктураОтвета) Экспорт
	
	СтруктураДанныхАвторизации = Новый Структура();

	Если СтруктураОтвета.Свойство("access_token") И
		 СтруктураОтвета.Свойство("expires_in") И 
		 СтруктураОтвета.Свойство("refresh_token") Тогда
		 
			expires_in = СтруктураОтвета.expires_in;
			
			Если ОбщегоНазначенияУТКлиентСервер.ЭтаСтрокаЯвляетсяЦелымНеотрицательнымЧислом(expires_in) Тогда
				СрокЖизниТокена = НачалоДня(ТекущаяДата() + Число(expires_in));
				СтруктураДанныхАвторизации.Вставить("access_token",СтруктураОтвета.access_token);
				СтруктураДанныхАвторизации.Вставить("access_token_expires",СрокЖизниТокена);
				СтруктураДанныхАвторизации.Вставить("refresh_token",СтруктураОтвета.refresh_token);
			Иначе
				ТекстОшибки = НСтр("ru = 'Некорректное значение свойства expires_in при получении ключа авторизации - '" +СтруктураОтвета.expires_in +"; en = 'Out of order property value expires_in'" +СтруктураОтвета.expires_in);		
				ТекстОписанияСобытия = НСтр("ru = 'Ошибка сохранения данных в безопасном хранилище.'");
				ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);	
			КонецЕсли;
	КонецЕсли;
			
	Возврат СтруктураДанныхАвторизации;
	
КонецФункции

// Функция возвращает HTTPЗапрос запрос для обновления ключей доступа к сервису для организации.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - ссылка на организацию, для которой запрашиваются ключи.
//
// Возвращаемое значение:
//  HTTPЗапрос  - HTTPЗапрос - HTTPЗапрос для получения ключей.
//
Функция ЗапросОбновитьТокеныДоступа(Организация) Экспорт
	
	ДанныеПриложения = ДанныеПриложения();		

	СтруктураДанныхАвторизации = ТекущиеДанныеАвторизации(Организация);
	
	Если СтруктураДанныхАвторизации <> Неопределено Тогда
		refresh_token = СтруктураДанныхАвторизации.refresh_token;	
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");	

	ПараметрыURL = Новый Массив;
	ПараметрыURL.Добавить("grant_type=refresh_token");
	ПараметрыURL.Добавить("refresh_token" + refresh_token);
	ПараметрыURL.Добавить("client_id=" + ДанныеПриложения.IDПриложения);
	ПараметрыURL.Добавить("client_secret=" + ДанныеПриложения.ПарольПриложения);
	
	Адрес = "/token?"; 
	HTTPЗапрос = Новый HTTPЗапрос(Адрес, Заголовки);
	Тело = СтрСоединить(ПараметрыURL, "&");
	
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,"windows-1251");
	
	Возврат HTTPЗапрос;
	
КонецФункции

// Функция возвращает имя сервера авторизации для обновления ключей доступа к сервису.
//
// Возвращаемое значение:
//  Сервер  - Строка - имя сервера сервиса
//
Функция СерверАвторизации() Экспорт
	
	Сервер = "oauth.yandex.ru";	
	
	Возврат  Сервер;
	
КонецФункции

// Функция возвращает имя сервера партнерского API.
//
// Возвращаемое значение:
//  Сервер  - Строка - имя сервера сервиса
//
Функция СерверПартнерскогоAPI(ПоМагазину = Истина) Экспорт
	
	Если ПоМагазину Тогда
		Результат = "api.partner.market.yandex.ru/v2/campaigns";
	Иначе
		Результат = "api.partner.market.yandex.ru/businesses";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Функция возвращает данные для авторизации приложения.
//
// Возвращаемое значение:
//  ДанныеПриложения - Структура - данные для авторизации приложения
//
Функция ДанныеПриложения() Экспорт
	
	ДанныеПриложения = Новый Структура("IDПриложения,ПарольПриложения");
	ДанныеПриложения.IDПриложения = "cc9b7be075074e6caaff515a3c5ef0e5";
	ДанныеПриложения.ПарольПриложения = "dc807379134444cca2a27e21c9bf9d7d";
	
	Возврат ДанныеПриложения;
	
КонецФункции

// Функция возвращает url авторизации.
//
// Возвращаемое значение:
//  Сервер  - строка - 
//
Функция АдресАвторизации() Экспорт
	
	ДанныеПриложения = ДанныеПриложения();
	Адрес = "https://oauth.yandex.ru/authorize?response_type=code&client_id=" + ДанныеПриложения.IDПриложения + "&client_secret=" + ДанныеПриложения.ПарольПриложения+ "&redirect_uri=" + "https://oauth.yandex.ru/verification_code";		
	
	Возврат  Адрес;
	
КонецФункции

Функция ЗапросПолучитьТокеныПоКоду(ВременныйКод) Экспорт
	
	ДанныеПриложения = ДанныеПриложения();	
    Заголовки = Новый Соответствие;
    Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");	

	ПараметрыURL = Новый Массив;
	ПараметрыURL.Добавить("grant_type=authorization_code");
	ПараметрыURL.Добавить("code=" + ВременныйКод);
    ПараметрыURL.Добавить("client_id=" + ДанныеПриложения.IDПриложения);    
    ПараметрыURL.Добавить("client_secret=" + ДанныеПриложения.ПарольПриложения);
	
	Адрес = "/token?"; 
    HTTPЗапрос = Новый HTTPЗапрос(Адрес, Заголовки);
	Тело = СтрСоединить(ПараметрыURL, "&");
	
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,"windows-1251");
    
	Возврат HTTPЗапрос;
	
КонецФункции

Функция УстановитьНастройкиАвторизации(ДанныеАвторизации, Организация, НомерМагазина) Экспорт
		
	ИдентификаторОрганизации = Строка(Организация.УникальныйИдентификатор());

	Если ИдентификаторОрганизации <> Неопределено И 
		 ДанныеАвторизации.Свойство("access_token") И
		 ДанныеАвторизации.Свойство("access_token_expires") И 
		 ДанныеАвторизации.Свойство("refresh_token") Тогда
		 	//сохранение данных организации
			ВладелецИмяСервиса = "ЯндексМаркетВитринаПлюсФулфилмент";
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ВладелецИмяСервиса, Организация, "organization_id");
			//сохранение данных ключей и идентификатора магазина
			Владелец = ИдентификаторОрганизации + "/ЯндексМаркетВитринаПлюсФулфилмент";
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ДанныеАвторизации.access_token, "access_token");
		    ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ДанныеАвторизации.access_token_expires, "access_token_expires");	
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ДанныеАвторизации.refresh_token, "refresh_token");
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, НомерМагазина, "campaign_id");
			НастройкиУстановлены = Истина;
	Иначе
		НастройкиУстановлены = Ложь;	
	КонецЕсли;
	
	Если Не НастройкиУстановлены Тогда
		
		ТекстОшибки = НСтр("ru = 'Не удалось сохранить данные авторизации в безопасном хранилище, владелец = .'" +Владелец+ "; en = 'Failed to save data, owner = '" + Владелец);		
		ТекстОписанияСобытия = НСтр("ru = 'Ошибка сохранения данных в безопасном хранилище.'");
		ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		
	КонецЕсли;
	
	Возврат НастройкиУстановлены;
	
КонецФункции

Функция ТекущиеДанныеАвторизации(Организация) Экспорт
	
	ИдентификаторОрганизации = Строка(Организация.УникальныйИдентификатор());
	Владелец = ИдентификаторОрганизации + "/ЯндексМаркетВитринаПлюсФулфилмент";
	ДанныеАвторизации = "access_token, access_token_expires, refresh_token, campaign_id";
	
	ТекущиеДанные =
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, ДанныеАвторизации, Ложь);

	Возврат ТекущиеДанные;
КонецФункции

Функция ТекущиеДанныеАвторизацииОрганизация() Экспорт
	
	Владелец = "ЯндексМаркетВитринаПлюсФулфилмент";
	ДанныеАвторизации = "organization_id";
	
	ТекущиеДанные =
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, ДанныеАвторизации, Ложь);

	Возврат ТекущиеДанные;
КонецФункции

Процедура УдалитьДанныеАвторизации(Организация) Экспорт
	
	ИдентификаторОрганизации = Строка(Организация.УникальныйИдентификатор());
	Владелец = ИдентификаторОрганизации + "/ЯндексМаркетВитринаПлюсФулфилмент";
	ДанныеАвторизации = "access_token, access_token_expires, refresh_token";
	
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Владелец, ДанныеАвторизации);
	
	ВладелецИмяСервиса = "ЯндексМаркетВитринаПлюсФулфилмент";
	ДанныеАвторизацииОрганизации = "organization_id";
	
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ВладелецИмяСервиса, ДанныеАвторизацииОрганизации);
	
КонецПроцедуры

Функция СтруктураПараметровСпособаЗаданияЦены() Экспорт

	СтруктураПараметровСпособаЗаданияЦены = Новый Структура("ИмяПараметра, СписокВыбора, ЗначениеПараметра");
	СтруктураПараметровСпособаЗаданияЦены.ИмяПараметра = Нстр("ru = 'Тип цены Яндекс.Маркет'");
	СтруктураПараметровСпособаЗаданияЦены.СписокВыбора = "Минимальная цена продажи на Маркете;Рекомендованная Маркетом;Минимальная среди всех предложений товара на Маркете;Максимальная без скидки;Максимальная для показов на Маркете";

	Возврат СтруктураПараметровСпособаЗаданияЦены;
	
КонецФункции

// Фоновые задания
Процедура ПолучитьРекомендацииПоСклейкеТовараЯндексМаркет(ShopSKU = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПолучениеРекомендацийПоСклейкеТовараЯндексМаркет);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий");
	ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Вызов API Яндекс.Маркет. Запуск по расписанию'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "", НСтр("ru = 'Запуск'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	Попытка
		ПолучитьРекомендации(ShopSKU);
	Исключение
		
		ЗаписьЖурнала(ПараметрыЖурнала, 
		              УровеньЖурналаРегистрации.Ошибка,
		              "",
		              НСтр("ru = 'Ошибка вызова API Яндекс.Маркет'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		              ИнформацияОбОшибке());
		
	КонецПопытки;
	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "",НСтр("ru = 'Завершение'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры 

Процедура ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурнала , ИмяСобытия, 
		Знач КомментарийСПараметрами , ИнформацияОбОшибке = "") Экспорт
	
	// Определение уровня журнала регистрации на основе типа переданного сообщения об ошибке.
	Если ТипЗнч(УровеньЖурнала) <> Тип("УровеньЖурналаРегистрации") Тогда
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
		ИначеЕсли ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
		Иначе
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Если КомментарийСПараметрами = "" Тогда
			ТекстСообщенияПользователю = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КомментарийСПараметрами = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Иначе
			ТекстСообщенияПользователю = КомментарийСПараметрами + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КомментарийСПараметрами = КомментарийСПараметрами + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
	Иначе
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") И ИнформацияОбОшибке <> "" Тогда
			КомментарийСПараметрами = КомментарийСПараметрами + Символы.ПС + ИнформацияОбОшибке;
		КонецЕсли;
		ТекстСообщенияПользователю = КомментарийСПараметрами;
	КонецЕсли;
	
	// Журнал регистрации 
	УстановитьПривилегированныйРежим(Истина);
	ГруппаСобытий = ПараметрыЖурнала.ГруппаСобытий + ?(ИмяСобытия = "", "", "."+ ИмяСобытия);
	ЗаписьЖурналаРегистрации(
		ГруппаСобытий, 
		УровеньЖурнала, 
		,
		,
		КомментарийСПараметрами);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка ИЛИ УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение Тогда
		Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка Тогда
			ПараметрыЖурнала.Вставить("БылиОшибки", Истина);
		Иначе
			ПараметрыЖурнала.Вставить("БылиПредупреждения", Истина);
		КонецЕсли;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СокрЛП(ТекстСообщенияПользователю); //  + Символы.ПС + Символы.ПС + НСтр("ru = 'Подробности см. в журнале регистрации.'")
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузкаУстановленныхЦенВСервисЯндексМаркет(ПараметрыВыполнения = Неопределено, АдресРезультата = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ВыгрузкаУстановленныхЦенВСервисЯндексМаркет);
	
	Если ПустаяСтрока(ИмяПользователя())
		ИЛИ (ПараметрыВыполнения<>Неопределено И ПараметрыВыполнения.НемедленноеОбновление) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий");
	Если (ТипЗнч(ПараметрыВыполнения) = Тип("Структура") И ПараметрыВыполнения.НемедленноеОбновление) Тогда 
		ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Вызов API Яндекс.Маркет. Запуск по расписанию'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Иначе   
		ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Вызов API Яндекс.Маркет. Запуск по инициативе пользователя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;   	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "", НСтр("ru = 'Запуск'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	Попытка     
    	ВыгрузитьУстановленныеЦены();
	Исключение
		
		ЗаписьЖурнала(ПараметрыЖурнала, 
		              УровеньЖурналаРегистрации.Ошибка,
		              "",
		              НСтр("ru = 'Ошибка вызова API Яндекс.Маркет'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		              ИнформацияОбОшибке());
		
	КонецПопытки;
	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "",НСтр("ru = 'Завершение'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())); 
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь); 
	КонецЕсли;

КонецПроцедуры     

Процедура ВыгрузкаОстатковТоваровЯндексМаркет(ПараметрыВыполнения = Неопределено, АдресРезультата = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ВыгрузкаУстановленныхЦенВСервисЯндексМаркет);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий");
	ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Вызов API Яндекс.Маркет. Запуск по расписанию'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "", НСтр("ru = 'Запуск'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	Попытка     
    	ВыгрузитьОстаткиТоваров();
	Исключение
		
		ЗаписьЖурнала(ПараметрыЖурнала, 
		              УровеньЖурналаРегистрации.Ошибка,
		              "",
		              НСтр("ru = 'Ошибка вызова API Яндекс.Маркет'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		              ИнформацияОбОшибке());
		
	КонецПопытки;
	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "",НСтр("ru = 'Завершение'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())); 
	
	УстановитьПривилегированныйРежим(Ложь); 

КонецПроцедуры   

Функция УчетнаяЗаписьЯндексМаркет() Экспорт  
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	УчетныеЗаписиМаркетплейсов.Ссылка КАК УчетнаяЗапись
		|ИЗ
		|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
		|ГДЕ
		|	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет)
		|	И НЕ УчетныеЗаписиМаркетплейсов.ПометкаУдаления";  
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() Тогда    
		УчетнаяЗапись = Результат[0].УчетнаяЗапись;
	Иначе		
		НоваяУчетнаяЗапись = Справочники.УчетныеЗаписиМаркетплейсов.СоздатьЭлемент(); 
		НоваяУчетнаяЗапись.Наименование = "Магазин на Яндекс.Маркет";
		НоваяУчетнаяЗапись.ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет;
		НоваяСтрокаВидовЦен = НоваяУчетнаяЗапись.ВидыЦен.Добавить();
		НоваяСтрокаВидовЦен.ИмяНастройки = НСтр("ru = 'Цена продажи'");
		НоваяУчетнаяЗапись.Записать();  
		УчетнаяЗапись = НоваяУчетнаяЗапись.Ссылка;	
	КонецЕсли;
	
	Возврат УчетнаяЗапись;
	
КонецФункции

Функция ДанныеУчетнойЗаписиЯндексМаркет() Экспорт
	
	ДанныеУчетнойЗаписи = Новый Структура("УчетнаяЗапись,ЦенаПродажи,ИсточникКатегории,ИдентификаторКабинета");
	Запрос = Новый Запрос();     
	ИмяНастройки = НСтр("ru = 'Цена продажи'");
	Запрос.Параметры.Вставить("ИмяНастройки",ИмяНастройки);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	УчетныеЗаписиМаркетплейсов.Ссылка КАК УчетнаяЗапись,
	               |	УчетныеЗаписиМаркетплейсов.ИсточникКатегории КАК ИсточникКатегории,
	               |	ЕСТЬNULL(ВидыЦенМаркетплейсов.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ЦенаПродажи,
	               |	УчетныеЗаписиМаркетплейсов.ИдентификаторКабинета КАК ИдентификаторКабинета
	               |ИЗ
	               |	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов.ВидыЦен КАК ВидыЦенМаркетплейсов
	               |		ПО УчетныеЗаписиМаркетплейсов.Ссылка = ВидыЦенМаркетплейсов.Ссылка
	               |			И (ВидыЦенМаркетплейсов.ИмяНастройки = &ИмяНастройки)
	               |ГДЕ
	               |	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет)
	               |	И НЕ УчетныеЗаписиМаркетплейсов.ПометкаУдаления"; 
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() Тогда    
		ДанныеУчетнойЗаписи.УчетнаяЗапись = Результат[0].УчетнаяЗапись;
		ДанныеУчетнойЗаписи.ЦенаПродажи = Результат[0].ЦенаПродажи;
		ДанныеУчетнойЗаписи.ИсточникКатегории = Результат[0].ИсточникКатегории;	  
		ДанныеУчетнойЗаписи.ИдентификаторКабинета = Результат[0].ИдентификаторКабинета;	
	Иначе		
		НоваяУчетнаяЗапись = Справочники.УчетныеЗаписиМаркетплейсов.СоздатьЭлемент(); 
		НоваяУчетнаяЗапись.Наименование = "Магазин на Яндекс.Маркет";
		НоваяУчетнаяЗапись.ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет;
		НоваяСтрокаВидовЦен = НоваяУчетнаяЗапись.ВидыЦен.Добавить();
		НоваяСтрокаВидовЦен.ИмяНастройки = НСтр("ru = 'Цена продажи'");
		НоваяУчетнаяЗапись.Записать();  
		ДанныеУчетнойЗаписи.УчетнаяЗапись = НоваяУчетнаяЗапись.Ссылка;	
		ДанныеУчетнойЗаписи.ЦенаПродажи = Справочники.ВидыЦен.ПустаяСсылка();
		ДанныеУчетнойЗаписи.ИсточникКатегории = Перечисления.ИсточникиКатегорийДляМаркетплейса.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ДанныеУчетнойЗаписи;
		
КонецФункции

Процедура ЗагрузитьРекомендованныеЦеныЯндексМаркет(ПараметрыВыполнения = Неопределено, ПараметрыОбновленияЦен = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗагрузитьРекомендованныеЦеныЯндексМаркет); 
	
	Если ТипЗнч(ПараметрыВыполнения) = Тип("Структура") И ПараметрыВыполнения.Свойство("ТаблицаВидовЦен") Тогда 
		ТаблицаВидовЦен = ПараметрыВыполнения.ТаблицаВидовЦен;
	ИначеЕсли ТипЗнч(ПараметрыВыполнения) = Тип("ТаблицаЗначений") Тогда
		ТаблицаВидовЦен = ПараметрыВыполнения.Скопировать();	
	Иначе 
		ТаблицаВидовЦен = Неопределено;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяПользователя()) 
		ИЛИ (ТипЗнч(ПараметрыВыполнения) = Тип("Структура") И ПараметрыВыполнения.НемедленноеОбновление) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий");
	Если (ТипЗнч(ПараметрыВыполнения) = Тип("Структура") И ПараметрыВыполнения.НемедленноеОбновление) Тогда 
		ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Вызов API Яндекс.Маркет. Запуск по расписанию'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Иначе   
		ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Вызов API Яндекс.Маркет. Запуск по инициативе пользователя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;   
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "", НСтр("ru = 'Запуск'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	ВидыЦен = ПолучитьМассивРекомендованныхЦен();
	
	Если ВидыЦен.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не определены виды цен с признаком ""Загружается из Яндекс Маркет"".';
							|en = 'Не определены виды цен с признаком ""Загружается из Яндекс Маркет"".'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса'");	
		ЗаписьЖурналаРегистрации(ТекстОписанияСобытия,
		УровеньЖурналаРегистрации.Ошибка,,,
		ТекстОшибки);
	КонецЕсли;
	
	Попытка
		ИдентификаторыОтработанные = Новый СписокЗначений;
		
		Пока Истина Цикл
			ИдентификаторыПубликации = ПолучитьИдентификаторыПубликации(ВидыЦен, ИдентификаторыОтработанные);
			Если ИдентификаторыПубликации.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ПолучитьРекомендованныеЦены(ИдентификаторыПубликации, ВидыЦен);
						
			Для каждого ЭлементКоллекции Из ИдентификаторыПубликации Цикл
				ИдентификаторыОтработанные.Добавить(ЭлементКоллекции.Значение);
			КонецЦикла;
		КонецЦикла;
		
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'При загрузке рекомендованных цен товаров с торговой площадки возникли ошибки: %1';
			|en = 'При загрузке рекомендованных цен товаров с торговой площадки возникли ошибки: %1'",
		ОбщегоНазначения.КодОсновногоЯзыка()),
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса'");
		ЗаписьЖурналаРегистрации(ТекстОписанияСобытия,
		УровеньЖурналаРегистрации.Ошибка,,,
		ТекстОшибки);
		
	КонецПопытки;	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "",НСтр("ru = 'Завершение'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь); 
	КонецЕсли;
	
КонецПроцедуры   

// Возврращает массив рекомендованных цен
// 
// Возвращаемое значение:
//    Массив из СправочникСсылка.ВидыЦен - массив рекомендованных цен 
Функция ПолучитьМассивРекомендованныхЦен() Экспорт  
	
	МассивЦен = Новый Массив();
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыЦен.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ВидыЦен КАК ВидыЦен
	               |ГДЕ
	               |	НЕ ПометкаУдаления
	               |	И ВидыЦен.СпособЗаданияЦены = ЗНАЧЕНИЕ(Перечисление.СпособыЗаданияЦен.ЗагружаетсяИзЯндексМаркет)";
	МассивЦен = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивЦен;
	
КонецФункции  

Функция ПолучитьСтруктуруИзмерений(ИдентификаторПубликации) Экспорт
	
	Структура = Новый Структура("Номенклатура, Характеристика, Упаковка");
	Запрос = Новый Запрос();  
	Запрос.Параметры.Вставить("ИдентификаторПубликации",ИдентификаторПубликации);
	Запрос.Текст = "ВЫБРАТЬ
	                |	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
	                |	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
	                |	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка
	                |ИЗ
	                |	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
	                |ГДЕ
	                |	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации = &ИдентификаторПубликации";
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Структура,Результат);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Процедура ОтправитьНаМодерациюСвязиТоваровЯндексМаркет() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаНаМодерациюСвязейТоваровЯндексМаркет);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий");
	ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Вызов API Яндекс.Маркет. Запуск по расписанию'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
	Попытка
		ОтправитьСвязиТоваровНаМодерацию();	
	Исключение
		
		ЗаписьЖурнала(ПараметрыЖурнала, 
		              УровеньЖурналаРегистрации.Ошибка,
		              "",
		              НСтр("ru = 'Ошибка вызова API Яндекс.Маркет'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		              ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьВесогабариты(Упаковка) Экспорт
	
	СтруктураВесогабаритов = Новый Структура("length,width,height,weight");
	
	СтруктураВесогабаритов.length = 0; 
	СтруктураВесогабаритов.width = 0; 
	СтруктураВесогабаритов.height = 0; 
	СтруктураВесогабаритов.weight = 0;
		
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("УпаковкаЕдиницаИзмерения",Упаковка);  
	Запрос.Текст = "ВЫБРАТЬ
	               |	УпаковкиЕдиницыИзмерения.Вес КАК Вес,
	               |	УпаковкиЕдиницыИзмерения.Высота КАК Высота,
	               |	УпаковкиЕдиницыИзмерения.Глубина КАК Глубина,
	               |	УпаковкиЕдиницыИзмерения.Ширина КАК Ширина,
	               |	УпаковкиЕдиницыИзмерения.ВесЕдиницаИзмерения КАК ВесЕдиницаИзмерения,
	               |	УпаковкиЕдиницыИзмерения.ГлубинаЕдиницаИзмерения КАК ГлубинаЕдиницаИзмерения,
	               |	УпаковкиЕдиницыИзмерения.ШиринаЕдиницаИзмерения КАК ШиринаЕдиницаИзмерения,
	               |	УпаковкиЕдиницыИзмерения.ВысотаЕдиницаИзмерения КАК ВысотаЕдиницаИзмерения
	               |ИЗ
	               |	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	               |ГДЕ
	               |	УпаковкиЕдиницыИзмерения.Ссылка = &УпаковкаЕдиницаИзмерения
	               |	И УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)";
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл   
		СокращенияЕдИзмГлубина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.ГлубинаЕдиницаИзмерения,"МеждународноеСокращение");
		Если СокращенияЕдИзмГлубина = "MTR" Тогда //м 
			Глубина = Формат(Результат.Глубина*100,"ЧДЦ=2; ЧРД=.");  
		ИначеЕсли СокращенияЕдИзмГлубина = "KMT" Тогда //км 
			Глубина = Формат(Результат.Глубина*100000,"ЧДЦ=2; ЧРД=.");
		ИначеЕсли СокращенияЕдИзмГлубина = "CMT" Тогда //см
			Глубина = Формат(Результат.Глубина,"ЧДЦ=2; ЧРД=.");  
		Иначе
			Глубина = ""; 
		КонецЕсли;
		
		СокращенияЕдИзмШирина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.ШиринаЕдиницаИзмерения,"МеждународноеСокращение");
		Если СокращенияЕдИзмШирина = "MTR" Тогда //м 
			Ширина = Формат(Результат.Ширина*100,"ЧДЦ=2; ЧРД=.");  
		ИначеЕсли СокращенияЕдИзмШирина = "KMT" Тогда //км 
			Ширина = Формат(Результат.Ширина*100000,"ЧДЦ=2; ЧРД=.");
		ИначеЕсли СокращенияЕдИзмШирина = "CMT" Тогда //см
			Ширина = Формат(Результат.Ширина,"ЧДЦ=2; ЧРД=."); 
		Иначе
			Ширина = "";
		КонецЕсли;   
		
		СокращенияЕдИзмВысота = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.ВысотаЕдиницаИзмерения,"МеждународноеСокращение");
		Если СокращенияЕдИзмВысота = "MTR" Тогда //м 
			Высота = Формат(Результат.Высота*100,"ЧДЦ=2; ЧРД=.");  
		ИначеЕсли СокращенияЕдИзмВысота = "KMT" Тогда //км 
			Высота = Формат(Результат.Высота*100000,"ЧДЦ=2; ЧРД=.");
		ИначеЕсли СокращенияЕдИзмВысота = "CMT" Тогда //см
			Высота = Формат(Результат.Высота,"ЧДЦ=2; ЧРД=.");
		Иначе
			Высота = "";						
		КонецЕсли;
		
		СокращенияЕдИзмВес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.ВесЕдиницаИзмерения,"МеждународноеСокращение");
		Если СокращенияЕдИзмВес = "GRM" Тогда //г 
			Вес = Формат(Результат.Вес/1000,"ЧДЦ=2; ЧРД=.");  
		ИначеЕсли СокращенияЕдИзмВес = "CTM" Тогда //кар 
			Вес = Формат(Результат.Вес/5000,"ЧДЦ=2; ЧРД=.");
		ИначеЕсли СокращенияЕдИзмВес = "KGM" Тогда //кг
			Вес = Формат(Результат.Вес,"ЧДЦ=2; ЧРД=.");   
		ИначеЕсли СокращенияЕдИзмВес = "TNE" Тогда //т
			Вес = Формат(Результат.Вес*1000,"ЧДЦ=2; ЧРД=.");
		Иначе 
			Вес = "";	
		КонецЕсли;

		СтруктураВесогабаритов.length = Глубина; 
		СтруктураВесогабаритов.width = Ширина; 
		СтруктураВесогабаритов.height = Высота; 
		СтруктураВесогабаритов.weight = Вес;
		
	КонецЦикла;   
	
	Возврат СтруктураВесогабаритов;
	
КонецФункции

Процедура ПолучитьСтатусыМодерацииТоваровЯндексМаркет() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПолучениеСтатусовМодерацииТоваровЯндексМаркет);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий");
	ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Вызов API Яндекс.Маркет. Запуск по расписанию'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	//ПараметрыЖурнала.Метаданные    = Сегмент.Метаданные();
	//ПараметрыЖурнала.Данные        = Сегмент;
	
	//ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "", НСтр("ru = 'Запуск'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	Попытка
		ПолучитьСтатусыМодерации();
	Исключение
		
		ЗаписьЖурнала(ПараметрыЖурнала, 
		              УровеньЖурналаРегистрации.Ошибка,
		              "",
		              НСтр("ru = 'Ошибка вызова API Яндекс.Маркет'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		              ИнформацияОбОшибке());
		
	КонецПопытки;
	
	//ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "",НСтр("ru = 'Завершение'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры

// Определяет список магазинов из сервиса, к которым имеет доступ пользователь - владелец авторизационного токена, использованного в запросе. 
// Для агентских пользователей список состоит из подчиненных магазинов.
// Описание метода см. https://yandex.ru/dev/market/partner-api/doc/ru/reference/campaigns/getCampaigns
//
// Параметры:
//   ДанныеАвторизации - Структура - данные авторизации для подключения к сервису (см. ИнтеграцияСЯндексМаркетСервер.ДанныеАвторизацииПоИдентификаторуАккаунта);
//   Отказ             - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   Структура    - результат выполнения запроса:
//     * campaigns  - Массив Из Структура - список с информацией по каждому магазину (CampaignDTO):
//       ** domain        - Строка - URL или наименование магазина;
//       ** id            - Число - идентификатор кампании;
//       ** clientId      - Число - идентификатор плательщика в Яндекс Балансе;
//       ** business      - Структура - информацию о бизнесе (BusinessDTO):
//         *** id           - Число - идентификатор бизнеса;
//         *** name         - Строка - название бизнеса.
//       ** placementType - Строка - модель, по которой работает магазин.
//     * pager      - Структура - Модель для пагинации (FlippingPagerDTO):
//       ** total       - Число - сколько всего найдено элементов;
//       ** from        - Число - начальный номер найденного элемента на странице;
//       ** to          - Число - конечный номер найденного элемента на странице;
//       ** currentPage - Число - текущая страница;
//       ** pagesCount  - Число - общее количество страниц;
//       ** pageSize    - Число - размер страницы.
//   Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//
Функция ПолучитьМагазиныПользователяИзСервиса(ДанныеАвторизации, Отказ = Ложь) Экспорт
	
	Результат = Неопределено;
	ТекстОшибки = "";

	Попытка	  
		ДанныеПриложения = ДанныеПриложения();
		Сервер           = СерверПартнерскогоAPI();
		АдресРесурса     = "";

		ИнтернетПрокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,, ИнтернетПрокси, 60, СоединениеOpenSSL);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type",  "application/json");
		Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + ДанныеПриложения.IDПриложения);
		
		HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
		
		HTTPОтвет    = HTTPСоединение.Получить(HTTPЗапрос);  
		КодСостояния = HTTPОтвет.КодСостояния;
		СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		Результат    = ИзJSON(СтрокаОтвета);
		
		Если КодСостояния <> 200 Тогда
			Если Результат.Свойство("status") И Результат.status = "ERROR" Тогда
				ОписаниеОшибок = ТекстОшибки(Результат.errors);
			Иначе
				ОписаниеОшибок = ""; 
			КонецЕсли;
			
			Отказ = Истина;
			ПереводСтрокиОтвета = ПереводСтрокиОтвета(СтрокаОтвета,КодСостояния);
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка выполнения запроса %1: %2%3';
					|en = 'Ошибка выполнения запроса %1: %2%3'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				Сервер + АдресРесурса, 
				ОписаниеОшибок,
				ПереводСтрокиОтвета); 
			ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");	
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстОшибки);
		КонецЕсли;

	Исключение 
		Отказ = Истина;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует соединение с сервером %1 по причине: %2';
				|en = 'Отсутствует соединение с сервером %1 по причине: %2'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Сервер,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");	
		ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстОшибки);
	КонецПопытки;

	СтруктураОтвета = Новый Структура();
	СтруктураОтвета.Вставить("Результат",Результат);
	СтруктураОтвета.Вставить("ТекстОшибки",ТекстОшибки);

	Возврат СтруктураОтвета;

КонецФункции

Функция ПереводСтрокиОтвета(СтрокаОтвета,КодСостояния)  
	
	Если КодСостояния = 400 Тогда  
		СтрокаОтвета = НСтр("ru = 'Запрос содержит неправильные данные.'"); 
	ИначеЕсли КодСостояния = 401 Тогда 
		СтрокаОтвета = НСтр("ru = 'В запросе не указаны данные для авторизации.'"); 
	ИначеЕсли КодСостояния = 403 Тогда
		СтрокаОтвета = НСтр("ru = 'Данные для авторизации неверны или доступ к ресурсу запрещен. Проверьте дату действия авторизационных данных в настройках авторизации.'"); 
	ИначеЕсли КодСостояния = 404 Тогда
		СтрокаОтвета = НСтр("ru = 'Запрашиваемый ресурс не найден.'");  
	ИначеЕсли КодСостояния = 420 Тогда
		СтрокаОтвета = НСтр("ru = 'Превышено ограничение на доступ к ресурсу.'");  
	ИначеЕсли КодСостояния = 500 Тогда
		СтрокаОтвета = НСтр("ru = 'Внутренняя ошибка сервера.'"); 
	КонецЕсли;
	
	Возврат СтрокаОтвета;
	
КонецФункции

Функция ВJSON(Структура)Экспорт

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();	
	ЗаписьJSON.ПроверятьСтруктуру = Истина;
	ЗаписатьJSON(ЗаписьJSON, Структура);
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции

Функция ИзJSON(Строка,СтрДат="",ФлСоответствие=Ложь)Экспорт

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);
	ЗапросСтруктура = ПрочитатьJSON(ЧтениеJSON,ФлСоответствие,СтрДат);
	
	Возврат ЗапросСтруктура;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции  

// Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.
// Описание метода см. https://yandex.ru/dev/market/partner-api/doc/ru/reference/business-assortment/getSuggestedOfferMappings
//
// Параметры:
//   ИдентификаторПредложения - Строка - идентификатор предложения;
//                            - Неопределено - получить рекомендации по всем товарным позициям;
//   Отказ                    - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
Процедура ПолучитьРекомендации(ИдентификаторПредложения = Неопределено, Отказ = Ложь)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 500
		|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
		|	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка,
		|	СтатусыПубликацииТоваровЯндексМаркет.offerId КАК offerId,
		|	СтатусыПубликацииТоваровЯндексМаркет.name КАК name,
		|	СтатусыПубликацииТоваровЯндексМаркет.category КАК category,
		|	СтатусыПубликацииТоваровЯндексМаркет.vendor КАК vendor,
		|	СтатусыПубликацииТоваровЯндексМаркет.vendorCode КАК vendorCode
		|ИЗ
		|	(ВЫБРАТЬ
		|		СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
		|		СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
		|		СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка,
		|		СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК offerId,
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Наименование, """") = """"
		|				ТОГДА СтатусыПубликацииТоваровЯндексМаркет.ПредставлениеТовара
		|			ИНАЧЕ СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Наименование + ВЫБОР
		|					КОГДА ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Характеристика.Наименование, """") = """"
		|						ТОГДА """"
		|					ИНАЧЕ "", "" + СтатусыПубликацииТоваровЯндексМаркет.Характеристика.Наименование
		|				КОНЕЦ
		|		КОНЕЦ КАК name,
		|		СтатусыПубликацииТоваровЯндексМаркет.ТоварнаяКатегория КАК category,
		|		ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Марка.Наименование, """") КАК vendor,
		|		ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Артикул, """") КАК vendorCode
		|	ИЗ
		|		РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		|	ГДЕ
		|		СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.Новый)
		|		И (СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации = &ИдентификаторПредложения
		|				ИЛИ &ИдентификаторПредложения = НЕОПРЕДЕЛЕНО)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СтатусыПубликацииТоваровЯндексМаркет.Номенклатура,
		|		СтатусыПубликацииТоваровЯндексМаркет.Характеристика,
		|		СтатусыПубликацииТоваровЯндексМаркет.Упаковка,
		|		СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации,
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Наименование, """") = """"
		|				ТОГДА СтатусыПубликацииТоваровЯндексМаркет.ПредставлениеТовара
		|			ИНАЧЕ СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Наименование + ВЫБОР
		|					КОГДА ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Характеристика.Наименование, """") = """"
		|						ТОГДА """"
		|					ИНАЧЕ "", "" + СтатусыПубликацииТоваровЯндексМаркет.Характеристика.Наименование
		|				КОНЕЦ
		|		КОНЕЦ,
		|		СтатусыПубликацииТоваровЯндексМаркет.ТоварнаяКатегория,
		|		ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Марка.Наименование, """"),
		|		ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Артикул, """")
		|	ИЗ
		|		РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		|	ГДЕ
		|		СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.СозданиеНового)
		|		И (СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации = &ИдентификаторПредложения
		|				ИЛИ &ИдентификаторПредложения = НЕОПРЕДЕЛЕНО)) КАК СтатусыПубликацииТоваровЯндексМаркет";
	
	Запрос.Параметры.Вставить("ИдентификаторПредложения", ИдентификаторПредложения);
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать();  
		
	Попытка	  
		Организация = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизацииОрганизация();   
		ДанныеУчетнойЗаписи = ДанныеУчетнойЗаписиЯндексМаркет();
		
		Если Организация <> Неопределено И ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
			ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизации(Организация);
		КонецЕсли;
		
		ДанныеПриложения = ДанныеПриложения(); 
		
		Сервер            = СерверПартнерскогоAPI(Ложь);
		ИмяМетода         = "/offer-mappings/suggestions.json";
		АдресРесурса      = "/" + ДанныеУчетнойЗаписи.ИдентификаторКабинета + ИмяМетода;
		
		ИнтернетПрокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,, ИнтернетПрокси, 180, СоединениеOpenSSL);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type",  "application/json");
		Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + ДанныеПриложения.IDПриложения);
		
		Пока ВыборкаДанных.Следующий() Цикл
			SuggestedOfferDTO = Новый Структура("offerId, name, category, vendor, vendorCode, barcodes");
			ЗаполнитьЗначенияСвойств(SuggestedOfferDTO, ВыборкаДанных);
			
			barcodes = ПолучитьШтрихКоды(ВыборкаДанных.Номенклатура, ВыборкаДанных.Характеристика);
			SuggestedOfferDTO.barcodes = barcodes; 
			
			offers = Новый Массив;
			offers.Добавить(SuggestedOfferDTO);
			
			ДанныеЗапроса = Новый Структура;
			ДанныеЗапроса.Вставить("offers", offers);
			ТелоЗапроса = ВJSON(ДанныеЗапроса);
			
			HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
			
			HTTPОтвет    = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);  
			КодСостояния = HTTPОтвет.КодСостояния;	
			СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			Результат    = ИзJSON(СтрокаОтвета); 
			
			Если КодСостояния= 200 И Результат.status = "OK" Тогда  
				Если Результат.result.offers.Количество() > 0 Тогда  
					Рекомендация = Неопределено;
					Результат.result.offers[0].Свойство("mapping", Рекомендация);
					ОбновитьСтатусыПубликации(Рекомендация,ВыборкаДанных.Номенклатура,ВыборкаДанных.Характеристика,ВыборкаДанных.Упаковка); 
				КонецЕсли;
			Иначе
				Если Результат.Свойство("status") И Результат.status = "ERROR" Тогда
					ОбработатьОшибкиПриОтправкеСтатусов(ВыборкаДанных.Номенклатура,
														ВыборкаДанных.Характеристика,
														ВыборкаДанных.Упаковка,
														Результат.errors);
				Иначе
					ОбработатьОшибкиПриОтправкеСтатусов(ВыборкаДанных.Номенклатура,
														ВыборкаДанных.Характеристика,
														ВыборкаДанных.Упаковка);

				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
	Исключение 
        ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");	
		ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса: '" + КодСостояния + "; "+ HTTPОтвет.ПолучитьТелоКакСтроку()+";'");
		ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
	КонецПопытки;

КонецПроцедуры

// Устанавливает статус "На модерации" для товарной позиции.
//
// Параметры:
//   УчетнаяЗапись  - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//   Номенклатура   - СправочникСсылка.Номенклатура - номенклатура товарной позиции;
//   Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика товарной позиции;
//   Упаковка       - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка товарной позиции.
//
Процедура ЗаписатьСтатусНаМодерации(Номенклатура, Характеристика, Упаковка)
	
	НачатьТранзакцию();
	
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет");
		ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура",   Номенклатура);
		ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика", Характеристика);
		ЭлементБлокировкиДанных.УстановитьЗначение("Упаковка",       Упаковка);
		БлокировкаДанных.Заблокировать();

		НаборЗаписей = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		НаборЗаписей.Отбор.Характеристика.Установить(Характеристика);
		НаборЗаписей.Отбор.Упаковка.Установить(Упаковка);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			Запись        = НаборЗаписей[0];
			Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации;		
			НаборЗаписей.Записать();
		КонецЕсли;

		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();   
		ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");	
		ЗаписьЖурналаРегистрации(ТекстОписанияСобытия,
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
КонецПроцедуры

Процедура ПолучитьСтатусыМодерации()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
		|	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка,
		|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК ИдентификаторПредложения
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		|ГДЕ
		|	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации)";
		
	ВыборкаДанных = Запрос.Выполнить().Выбрать();

	offerIds    = Новый Массив;
	Предложения = Новый Соответствие;
	
	Пока ВыборкаДанных.Следующий() Цикл
		offerIds.Добавить(ВыборкаДанных.ИдентификаторПредложения);
		
		КлючЗаписи = Новый Структура;
		КлючЗаписи.Вставить("Номенклатура",   ВыборкаДанных.Номенклатура);
		КлючЗаписи.Вставить("Характеристика", ВыборкаДанных.Характеристика);
		КлючЗаписи.Вставить("Упаковка",       ВыборкаДанных.Упаковка);
		
		Предложения.Вставить(ВыборкаДанных.ИдентификаторПредложения, КлючЗаписи);
	КонецЦикла;
	
	Если offerIds.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка	          
		Организация = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизацииОрганизация();   
		ДанныеУчетнойЗаписи = ДанныеУчетнойЗаписиЯндексМаркет();
		
		Если Организация <> Неопределено И ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
			ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизации(Организация);
		КонецЕсли;

		ДанныеПриложения  = ДанныеПриложения();
		Сервер            = СерверПартнерскогоAPI(Ложь);
		ИмяМетода         = "/offer-mappings.json";	
		АдресРесурса      = "/" + ДанныеУчетнойЗаписи.ИдентификаторКабинета + ИмяМетода;
		
		ИнтернетПрокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,, ИнтернетПрокси, 180, СоединениеOpenSSL);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type",  "application/json");
		Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + ДанныеПриложения.IDПриложения);
		
		ДанныеЗапроса = Новый Структура;
		ДанныеЗапроса.Вставить("offerIds", offerIds);
		ТелоЗапроса = ВJSON(ДанныеЗапроса);
		
		HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
		
		HTTPОтвет    = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);  
		КодСостояния = HTTPОтвет.КодСостояния;	
		СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		Результат    = ИзJSON(СтрокаОтвета);
		
		Если КодСостояния = 200 И Результат.status = "OK" Тогда
			Для каждого ЭлементКоллекции Из Результат.result.offerMappings Цикл
				КлючЗаписи = Предложения.Получить(ЭлементКоллекции.offer.offerId);
				
				Если КлючЗаписи <> Неопределено Тогда
					ОбновитьСтатусыНаМодерации( 
						КлючЗаписи.Номенклатура, 
						КлючЗаписи.Характеристика, 
						КлючЗаписи.Упаковка,
					    ЭлементКоллекции);
				КонецЕсли;
			КонецЦикла;
			
		Иначе	
			Если Результат.Свойство("status") И Результат.status = "ERROR" Тогда
				ОписаниеОшибок = ТекстОшибки(Результат.errors);
			Иначе
				ОписаниеОшибок = ""; 
			КонецЕсли; 	
			
			Отказ = Истина;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка выполнения запроса %1: %2%3'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				Сервер + АдресРесурса, 
				ОписаниеОшибок,
				СтрокаОтвета);
			ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");	
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстОшибки);
		КонецЕсли;
		
	Исключение 
		Отказ = Истина;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует соединение с сервером %1 по причине: %2'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Сервер,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");	
			
		ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры  

Функция ВидыЦенПоИмениПоля(ИмяПоля, МассивРекомендованныхЦен)   
	
	ВидыЦенПоИмениПоля = Новый Массив();
	
	СоответствиеИдентификаторов = СоответствиеИдентификаторов(); 
	ИмяТипа = СоответствиеИдентификаторов.Получить(ИмяПоля);  
	
	Если ИмяТипа = Неопределено Тогда 
		//залогировать, что на стороне сервиса появился
		//не поддерживаемый в текущей конфигурации вид цены
	Иначе	
		Для каждого ЭлементМассива Из МассивРекомендованныхЦен Цикл 
			ЗначениеИзХранилища = ЭлементМассива.ХранилищеНастроекПараметровСпособаЗаданияЦены.Получить();
			Если ЗначениеИзХранилища.ЗначениеПараметра = ИмяТипа Тогда    
				ВидыЦенПоИмениПоля.Добавить(ЭлементМассива);	
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Возврат ВидыЦенПоИмениПоля;
	
КонецФункции

Процедура ОбновитьРекомендованныеЦены(Рекомендации, ТаблицаВидовЦен) 

	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();   
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьХарактеристикиНоменклатурыДляЦенообразования = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатурыДляЦенообразования");
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ИспользоватьУпаковкиНоменклатурыДляЦенообразования = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатурыДляЦенообразования");
	
	СтруктураУстановкиЦен = Новый Структура();
	СтруктураУстановкиЦен.Вставить("Дата",ТекущаяДата());   
	СтруктураУстановкиЦен.Вставить("ИспользуетсяЦенообразование25",ИспользуетсяЦенообразование25); 
	
	ВидыВсехРекомендованныхЦен = ПолучитьМассивРекомендованныхЦен();    
	
	ВидыЦен = Новый Массив();  
	Если НЕ ТаблицаВидовЦен.Количество() Тогда
		ВидыРекомендованныхЦен = ВидыВсехРекомендованныхЦен; 
	Иначе  
		ВидыРекомендованныхЦен = ТаблицаВидовЦен.ВыгрузитьКолонку("ВидЦены");
	КонецЕсли;
	Для каждого ЭлементМассива Из ВидыРекомендованныхЦен Цикл
		ВыбранныеЦены = Новый Структура();
		ВыбранныеЦены.Вставить("Выбрана",Истина);
		ВыбранныеЦены.Вставить("Влияет",Ложь); 
		ВыбранныеЦены.Вставить("Ссылка",ЭлементМассива);  
		ВыбранныеЦены.Вставить("ВидЦены",ЭлементМассива);
		ВидыЦен.Добавить(ВыбранныеЦены);
	КонецЦикла;
	СтруктураУстановкиЦен.Вставить("ВыбранныеЦены",ВидыЦен);	 
	
	ТаблицаЦен = Новый ТаблицаЗначений();
	ТаблицаЦен.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));  
	Если ИспользуетсяЦенообразование25 Тогда
		ТаблицаЦен.Колонки.Добавить("ХарактеристикаЦО", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатурыДляЦенообразования"));
		ТаблицаЦен.Колонки.Добавить("УпаковкаЦО", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения")); 
	Иначе
		ТаблицаЦен.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаЦен.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения")); 
	КонецЕсли;
	ТаблицаЦен.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));  
	ТаблицаЦен.Колонки.Добавить("Цена",ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Неотрицательный));  
	ТаблицаЦен.Колонки.Добавить("ЦенаИзмененаВручную", Новый ОписаниеТипов("Булево"));
	ТаблицаЦен.Колонки.Добавить("Валюта",  Новый ОписаниеТипов("СправочникСсылка.Валюты")); 
	СтруктураУстановкиЦен.Вставить("КодФормы","");
	СтруктураУстановкиЦен.Вставить("Модифицированность","");   
	
	Для каждого СтруктураПредложения Из Рекомендации.offers Цикл     
		
		Если СтруктураПредложения.Свойство("marketSku") И СтруктураПредложения.Свойство("priceSuggestion") Тогда 
			
			Запрос = Новый Запрос();  
			Запрос.Параметры.Вставить("ИдентификаторТовараПлощадки",СтрЗаменить(Строка(СтруктураПредложения.marketSku),Символ(160),"")); 
		    Запрос.Текст = "ВЫБРАТЬ
		                   |	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
		                   |	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
		                   |	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка,
		                   |	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки КАК ИдентификаторТовараПлощадки,
		                   |	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьХарактеристики,ЛОЖЬ) КАК ИспользоватьХарактеристики,
		                   |	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьУпаковки,ЛОЖЬ) КАК ИспользоватьУпаковки
		                   |ИЗ
		                   |	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		                   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		                   |		ПО СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
		                   |ГДЕ
		                   |	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки = &ИдентификаторТовараПлощадки";   
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл 			
				Для каждого ЭлементМассива Из СтруктураПредложения.priceSuggestion Цикл 
					
					ВидыЦенПоИмениПоля = ВидыЦенПоИмениПоля(ЭлементМассива.type, ВидыВсехРекомендованныхЦен);
					Для  каждого ВидЦены Из ВидыЦенПоИмениПоля Цикл
						Если ВидыРекомендованныхЦен.Найти(ВидЦены)<>Неопределено Тогда
							СтрНов = ТаблицаЦен.Добавить();    
							Если ИспользуетсяЦенообразование25 Тогда
								СтрНов.Номенклатура = Результат.Номенклатура;  
								Если ИспользоватьХарактеристикиНоменклатурыДляЦенообразования 
									И Результат.ИспользоватьХарактеристики Тогда
									ХарактеристикаЦО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.Характеристика,"ХарактеристикаНоменклатурыДляЦенообразования");
									СтрНов.ХарактеристикаЦО = ХарактеристикаЦО; 
								КонецЕсли; 
								Если ИспользоватьУпаковкиНоменклатуры 
									И Результат.ИспользоватьУпаковки Тогда
									СтрНов.УпаковкаЦО = Результат.Упаковка; 
								КонецЕсли;
							Иначе                                            
								СтрокаСвойств = "Номенклатура";
								Если ИспользоватьХарактеристикиНоменклатуры 
									И Результат.ИспользоватьХарактеристики Тогда 
									СтрокаСвойств = СтрокаСвойств + ",Характеристика";	
								КонецЕсли;    
								Если ИспользоватьУпаковкиНоменклатуры 
									И Результат.ИспользоватьУпаковки Тогда
									СтрокаСвойств = СтрокаСвойств + ",Упаковка";	 
								КонецЕсли;
								ЗаполнитьЗначенияСвойств(СтрНов, Результат, СтрокаСвойств);  
							КонецЕсли;
							СтрНов.Цена = ЭлементМассива.price;   
							СтрНов.Валюта = Справочники.Валюты.НайтиПоКоду("643");
							СтрНов.ВидЦены = ВидЦены;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;	 
			
		КонецЕсли;
		
	КонецЦикла;     
	
	СтруктураУстановкиЦен.Вставить("ТаблицаЦен", ТаблицаЦен);  
	
	МассивДокументов = Документы.УстановкаЦенНоменклатуры.ЗаписатьИзмененияЦенНаСервере(СтруктураУстановкиЦен);
	
	Для каждого Документ Из МассивДокументов Цикл 
		
		Попытка 
			ДокументОбъект = Документ.УстановкаЦенНоменклатуры.ПолучитьОбъект();
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение			
		КонецПопытки; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСтатусыПубликации(СтруктураПредложения,Номенклатура,Характеристика,Упаковка)
	
	Набор = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
	Набор.Отбор.Номенклатура.Установить(Номенклатура);
	Набор.Отбор.Характеристика.Установить(Характеристика);
	Набор.Отбор.Упаковка.Установить(Упаковка);
	Набор.Прочитать();
	Если Набор.Количество() Тогда
		Запись = Набор[0];
		Если СтруктураПредложения.Свойство("marketSku") Тогда
			marketSku = СокрЛП(СтрЗаменить(СтруктураПредложения.marketSku,Символ(160),""));  
			Запись.ИдентификаторТовараПлощадки = marketSku; 
			Запись.ЕстьИдентификаторПлощадки = Истина;
		КонецЕсли;
		Если СтруктураПредложения.Свойство("marketSkuName") Тогда 
			Запись.НаименованиеТовараПлощадки = СтруктураПредложения.marketSkuName;
			Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ПолученаРекомендация;
		Иначе
			Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.РекомендацияНеНайдена;
			Запись.ОписаниеОшибки = "Для товара с указанными свойствами не была подобрана рекомендованная карточка товара на Яндекс.Маркет. 
			|Для получения рекомендации укажите в запросе как можно больше информации о товаре (категорию, бренд (марку),штрих-коды товара, ориентировочную цену товара). После заполненения данных отправьте повторно публикацию на получение рекомендации (кнопка ""Получить рекомендацию"").
			|Попробуйте найти товар в поиске по разделу ""Покупки"" на Маркете. 
			|Если товар найдется, SKU на Яндексе можно взять из URL его страницы. 
			|Например, если URL страницы товара — https://pokupki.market.yandex.ru/product/7715752, то его SKU на Яндексе — 7715752.
			|Если вы смогли самостоятельно подобрать SKU на Яндексе - заполните его и отправьте товар на модерацию (кнопка ""Отправить на модерацию"").
			|Если SKU не удалось подобрать - наиболее подробно опишите товар и отправьте запрос без указания SKU (кнопка ""Отправить на модерацию"") - сотрудники Маркета могут подобрать или создать карточки для ваших товаров в личном кабинете, если товар еще не продается на Маркете."; 
		КонецЕсли;
		Если СтруктураПредложения.Свойство("marketCategoryName") Тогда 
			Запись.НаименованиеКатегорииПлощадки = СтруктураПредложения.marketCategoryName;
		КонецЕсли;
		Если СтруктураПредложения.Свойство("marketModelName") Тогда 
			Запись.НаименованиеМоделиПлощадки = СтруктураПредложения.marketModelName;
		КонецЕсли;
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОшибкиПриОтправкеСтатусов(Номенклатура,Характеристика,Упаковка,МассивОшибок = Неопределено)
	
	Для каждого СтруктураОшибки Из МассивОшибок Цикл
			Набор = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
			Набор.Отбор.Номенклатура.Установить(Номенклатура);
			Набор.Отбор.Характеристика.Установить(Характеристика);
			Набор.Отбор.Упаковка.Установить(Упаковка);
			Набор.Прочитать();
			Если Набор.Количество() Тогда
				Запись = Набор[0];
				Запись.КодОшибки = СтруктураОшибки.code; 
				Запись.ОписаниеОшибки = СтруктураОшибки.message;
				Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОшибкаПриОтправкеНаМодерацию;
				Набор.Записать();
			КонецЕсли;
			
	КонецЦикла;

	
КонецПроцедуры

Функция ТекстОшибки(МассивОшибок)  
	
	ТекстОшибки = "";
	
		Для каждого СтруктураОшибки Из МассивОшибок Цикл
			ТекстОшибки = ТекстОшибки + " "+СтруктураОшибки.message + " Код ошибки - " + СтруктураОшибки.code+"; ";
		КонецЦикла;
		
	Возврат ТекстОшибки; 
	
КонецФункции

Процедура ПолучитьРекомендованныеЦены(СписокИдентификаторовПубликаций, ТаблицаВидовЦен)   
	
	Организация = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизацииОрганизация();
	
	Если Организация <> Неопределено И ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда   
		ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизации(Организация);  
	КонецЕсли;
	
	ДанныеПриложения = ДанныеПриложения();
	
	Сервер = СерверПартнерскогоAPI();
	ИмяМетода = "/offer-prices/suggestions.json";	
	campaign_id = ДанныеАвторизации.campaign_id;
	Адрес ="/" + campaign_id + ИмяМетода;	
	
	СтруктураДляJSON = Неопределено;
	
	
	offers = Новый Массив();
	СтруктураДляJSON = Неопределено;
	Для каждого Элемент Из СписокИдентификаторовПубликаций Цикл
		СтруктураПредложения = Новый Структура("marketSku");
		СтруктураПредложения.Вставить("marketSku", Элемент.Значение);
		offers.Добавить(СтруктураПредложения);		
	КонецЦикла;
	
	СтруктураДляJSON = Новый Структура();
	СтруктураДляJSON.Вставить("offers",offers);
	
	Если СтруктураДляJSON<>Неопределено Тогда
		ТелоЗапроса = ИнтеграцияСЯндексМаркетСервер.ВJSON(СтруктураДляJSON);
		
		Попытка	
			ИнтернетПрокси = Неопределено;
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
				МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
				ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
			КонецЕсли;
			СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
			HTTPСоединение = Новый HTTPСоединение(Сервер,,,,ИнтернетПрокси,200,СоединениеOpenSSL);		
		Исключение
			ТекстОписанияСобытия = НСтр("ru = 'Отсутствует соединение с сервером '");
			ТекстОшибки = НСтр("ru = 'Отсутствует соединение с сервером " + Сервер +";'");		
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		КонецПопытки;
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + ДанныеПриложения.IDПриложения);
		
		HTTPЗапрос = Новый HTTPЗапрос(Адрес,Заголовки);
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
		СтруктураОтвета = Новый Структура();
		
		Попытка
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);  
			СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(СтрокаОтвета);
			КодСостояния = HTTPОтвет.КодСостояния;		
		Исключение 
       		ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");	
			ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса: '" + КодСостояния + "; "+ HTTPОтвет.ПолучитьТелоКакСтроку()+";'");
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		КонецПопытки;	
		
		Если КодСостояния = 200 И СтруктураОтвета.status = "OK" Тогда
			ОбновитьРекомендованныеЦены(СтруктураОтвета.result, ТаблицаВидовЦен);
		Иначе
			Если СтруктураОтвета.Свойство("status") И СтруктураОтвета.status = "ERROR" Тогда
				ОписаниеОшибок = ТекстОшибки(СтруктураОтвета.errors);	
			Иначе
				ОписаниеОшибок = ""; 
			КонецЕсли; 	
			ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");
			ТекстОшибки = НСтр("ru = 'Ошибка вызова API Яндекс.Маркет: " + КодСостояния + "; "+ HTTPОтвет.ПолучитьТелоКакСтроку() + "; " + ОписаниеОшибок + ";'");
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СоответствиеИдентификаторов()
	
	СоответствиеИдентификаторов = Новый Соответствие();
	СоответствиеИдентификаторов.Вставить("BUYBOX","Минимальная цена продажи на Маркете");
	СоответствиеИдентификаторов.Вставить("DEFAULT_OFFER","Рекомендованная Маркетом");
	СоответствиеИдентификаторов.Вставить("MIN_PRICE_MARKET","Минимальная среди всех предложений товара на Маркете");
	СоответствиеИдентификаторов.Вставить("MAX_DISCOUNT_BASE","Максимальная без скидки");
	СоответствиеИдентификаторов.Вставить("MARKET_OUTLIER_PRICE","Максимальная для показов на Маркете");
	
	Возврат СоответствиеИдентификаторов; 

КонецФункции 

Процедура ОбновитьДанныеОбОстатках(РезультатЗапроса, РезультатСУчетомУпаковки)  
	
	УчетнаяЗапись = УчетнаяЗаписьЯндексМаркет(); 
	
	Для каждого Стр Из РезультатЗапроса Цикл
		Набор = РегистрыСведений.ОстаткиТоваровМаркетплейсов.СоздатьНаборЗаписей(); 
		Набор.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗапись);
		Набор.Отбор.Склад.Установить(Стр.Склад);
		Набор.Отбор.Номенклатура.Установить(Стр.Номенклатура);
		Набор.Отбор.Характеристика.Установить(Стр.Характеристика);
		Набор.Прочитать();
		Если Набор.Количество() Тогда
			Запись = Набор[0];
			Запись.Количество = Стр.Остаток; 
			Запись.ДатаВыгрузкиОстатков = ТекущаяДатаСеанса();
		Иначе
			Запись = Набор.Добавить();  
			Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись; 
			Запись.Склад = Стр.Склад;
			Запись.Номенклатура = Стр.Номенклатура;  
			Запись.Характеристика = Стр.Характеристика;
			Запись.Количество = Стр.Остаток;
			Запись.ДатаВыгрузкиОстатков = ТекущаяДатаСеанса();	
		КонецЕсли;
		Набор.Записать();
	КонецЦикла; 	
	
	РезультатСУчетомУпаковки.Свернуть("sku,Номенклатура,Характеристика,Упаковка","count");
	
	Для каждого Стр Из РезультатСУчетомУпаковки Цикл	
		НаборПубликаций = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
		НаборПубликаций.Отбор.Номенклатура.Установить(Стр.Номенклатура);
		НаборПубликаций.Отбор.Характеристика.Установить(Стр.Характеристика);
		НаборПубликаций.Отбор.Упаковка.Установить(Стр.Упаковка);
		НаборПубликаций.Прочитать();
		Если НаборПубликаций.Количество() Тогда
			Запись = НаборПубликаций[0];
			Запись.ОстатокВУпаковках = Стр.count;
			НаборПубликаций.Записать();
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСтруктуруИзмеренийПоИдентификаторуПлощадки(ИдентификаторПлощадки) 
	
	Структура = Новый Структура("Номенклатура, Характеристика, Упаковка");
	Запрос = Новый Запрос();  
	Запрос.Параметры.Вставить("ИдентификаторПлощадки",ИдентификаторПлощадки);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
	               |	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
	               |	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка
	               |ИЗ
	               |	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
	               |ГДЕ
	               |	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации = &ИдентификаторПлощадки";
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Структура,Результат);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции
	
// Определяет следующую порцию идентификаторов товарных позиций.
//
// Параметры:
//   УчетнаяЗапись              - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//   ВидыЦен                    - Массив Из СправочникСсылка.ВидыЦен - рекомендованные виды цен (см. ИнтеграцияСЯндексМаркетСервер.ПолучитьМассивРекомендованныхЦен);
//   ИдентификаторыОтработанные - СписокЗначений Из Строка - список отработанных идентификаторов товарных позиций.
//
// Возвращаемое значение:
//   СписокЗначений Из Строка - список идентификаторов товарных позиций.
//
Функция ПолучитьИдентификаторыПубликации(ВидыЦен, ИдентификаторыОтработанные) 
	
	Результат = Новый СписокЗначений;	
	
	Если ВидыЦен = Неопределено 
		 ИЛИ ВидыЦен.Количество() = 0 Тогда
		ВидыЦен = ПолучитьМассивРекомендованныхЦен();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(); 
	Если ИспользуетсяЦенообразование25 Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
			|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки КАК ИдентификаторТовараПлощадки
			|ИЗ
			|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних КАК ЦеныНоменклатуры25СрезПоследних
			|		ПО СтатусыПубликацииТоваровЯндексМаркет.Номенклатура = ЦеныНоменклатуры25СрезПоследних.Номенклатура
			|ГДЕ
			|	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена)
			|	И НЕ СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки В (&ИдентификаторыОтработанные)
			|	И (ЦеныНоменклатуры25СрезПоследних.Номенклатура ЕСТЬ NULL
			|			ИЛИ ЦеныНоменклатуры25СрезПоследних.ВидЦены В (&ЗагружаемыеВидыЦен)
			|				И ЦеныНоменклатуры25СрезПоследних.Период < &ТекущаяДата
			|				И НЕ ЦеныНоменклатуры25СрезПоследних.ВидЦены.ПометкаУдаления)";
	Иначе 
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
			|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки КАК ИдентификаторТовараПлощадки
			|ИЗ
			|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
			|		ПО СтатусыПубликацииТоваровЯндексМаркет.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
			|ГДЕ
			|	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена)
			|	И НЕ СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки В (&ИдентификаторыОтработанные)
			|	И (ЦеныНоменклатурыСрезПоследних.Номенклатура ЕСТЬ NULL
			|			ИЛИ ЦеныНоменклатурыСрезПоследних.ВидЦены В (&ЗагружаемыеВидыЦен)
			|				И ЦеныНоменклатурыСрезПоследних.Период < &ТекущаяДата
			|				И НЕ ЦеныНоменклатурыСрезПоследних.ВидЦены.ПометкаУдаления)";
	КонецЕсли; 
	
	Запрос.Параметры.Вставить("ТекущаяДата",                НачалоДня(ТекущаяДатаСеанса()));
	Запрос.Параметры.Вставить("ЗагружаемыеВидыЦен",         ВидыЦен);
	Запрос.Параметры.Вставить("ИдентификаторыОтработанные", ИдентификаторыОтработанные);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Результат.ЗагрузитьЗначения(РезультатЗапроса.ВыгрузитьКолонку("ИдентификаторТовараПлощадки"));
	
	Возврат Результат; 
	
КонецФункции

// Устанавливает цены на товары в магазине.
// Описание метода см. https://yandex.ru/dev/market/partner-api/doc/ru/reference/assortment/updatePrices
//
// Параметры:
//   Отказ               - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
Процедура ВыгрузитьУстановленныеЦены(Отказ = Ложь)        
	
	ДанныеУчетнойЗаписи = ДанныеУчетнойЗаписиЯндексМаркет();
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОтносительныеКурсыВСрезПоследних.Валюта КАК Валюта,
		|	ОтносительныеКурсыВСрезПоследних.КурсЧислитель КАК КурсЧислитель,
		|	ОтносительныеКурсыВСрезПоследних.КурсЗнаменатель КАК КурсЗнаменатель
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(, БазоваяВалюта = &БазоваяВалюта) КАК ОтносительныеКурсыВСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
		|	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка,
		|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК ИдентификаторПредложения,
		|	СтатусыПубликацииТоваровЯндексМаркет.ЦенаПродажи КАК ЦенаПродажи,
		|	&ВидЦен КАК ВидЦены,
		|	&ПоляДляЦенообразованияВыборка КАК ПоляДляЦенообразованияВыборка
		|ПОМЕСТИТЬ ТаблицаТоварныхПозиций
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура
		|		ПО СтатусыПубликацииТоваровЯндексМаркет.Номенклатура = СправНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ПО СправНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
		|ГДЕ
		|	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПоляДляЦенообразованияВыборка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
		|	&ПоляДляЦенообразованияСрез,
		|	ЦеныНоменклатуры.Цена КАК Цена,
		|	ЦеныНоменклатуры.Валюта КАК Валюта
		|ПОМЕСТИТЬ ЦеныНоменклатуры
		|ИЗ
		|	ИсточникЦенНоменклатуры КАК ЦеныНоменклатуры
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
		|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|	&ПоляДляЦенообразованияСрез,
		|	ТаблицаТоварныхПозиций.ИдентификаторПредложения КАК ИдентификаторПредложения,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА НЕ &ТекстЗапросаКоэффициентУпаковки2 ЕСТЬ NULL
		|					И &ТекстЗапросаКоэффициентУпаковки2 <> 0
		|				ТОГДА ЕСТЬNULL(&ПолеЦены, 0) * &ТекстЗапросаКоэффициентУпаковки2
		|			ИНАЧЕ ЕСТЬNULL(&ПолеЦены, 0)
		|		КОНЕЦ КАК ЧИСЛО(31, 2)) КАК Цена
		|ИЗ
		|	ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура
		|		ПО ЦеныНоменклатуры.Номенклатура = СправНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|		ПО ЦеныНоменклатуры.Валюта = КурсыВалют.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУчета
		|		ПО (КурсыВалютУчета.Валюта = &БазоваяВалюта)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоварныхПозиций КАК ТаблицаТоварныхПозиций
		|		ПО (&УсловиеСоединенияЦеныНоменклатурыСрезПоследних)
		|ГДЕ
		|	ЦеныНоменклатуры.Цена <> ТаблицаТоварныхПозиций.ЦенаПродажи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КурсыВалют
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаТоварныхПозиций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЦеныНоменклатуры";

	ТекущаяДата                   = ТекущаяДатаСеанса();
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(ТекущаяДата);

	НастройкаЦенообразования                 = ЦенообразованиеКлиентСервер.НастройкиДляВременнойТаблицыСДополнениемДляЦенообразования();
	НастройкаЦенообразования.ИсточникТоваров = "СтатусыПубликацииТоваровЯндексМаркет";
	НастройкаЦенообразования.ПолеСерия       = "";

	ТекстЗамены = ЦенообразованиеКлиентСервер.ТекстПолейДляЦенообразования(НастройкаЦенообразования);
	Если ЗначениеЗаполнено(ТекстЗамены) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляДляЦенообразованияВыборка КАК ПоляДляЦенообразованияВыборка", ТекстЗамены);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПоляДляЦенообразованияВыборка",
			"Номенклатура,
			|	ХарактеристикаЦО,
			|	СерияЦО,
			|	УпаковкаЦО");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляДляЦенообразованияВыборка КАК ПоляДляЦенообразованияВыборка", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПоляДляЦенообразованияВыборка",
			"Номенклатура,
			|	Характеристика");
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"ИсточникЦенНоменклатуры",
		ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатуры("ТаблицаТоварныхПозиций",
			"&ДатаЦен",
			Новый Структура("ВТаблице", "ВидЦены"),
			ИспользуетсяЦенообразование25));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеЦены",
		"ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА НЕ &ТекстЗапросаКоэффициентУпаковки1 ЕСТЬ NULL
		|					И &ТекстЗапросаКоэффициентУпаковки1 <> 0
		|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) / &ТекстЗапросаКоэффициентУпаковки1
		|			ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
		|		КОНЕЦ * (ЕСТЬNULL(КурсыВалют.КурсЧислитель, 1) * ЕСТЬNULL(КурсыВалютУчета.КурсЗнаменатель, 1) / (ЕСТЬNULL(КурсыВалютУчета.КурсЧислитель, 1) * ЕСТЬNULL(КурсыВалют.КурсЗнаменатель, 1))) КАК ЧИСЛО(31, 2))");

	Если ИспользуетсяЦенообразование25 Тогда
		ПоляДляЦенообразованияСрез = 
			"ЦеныНоменклатуры.ХарактеристикаЦО КАК ХарактеристикаЦО,
			|	ЦеныНоменклатуры.СерияЦО КАК СерияЦО,
			|	ЦеныНоменклатуры.УпаковкаЦО КАК УпаковкаЦО";
	Иначе
		ПоляДляЦенообразованияСрез = 
			"ЦеныНоменклатуры.Характеристика КАК Характеристика,
			|	ЦеныНоменклатуры.Упаковка КАК Упаковка";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляДляЦенообразованияСрез", ПоляДляЦенообразованияСрез);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&УсловиеСоединенияЦеныНоменклатурыСрезПоследних",
		ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатурыУсловиеСоединения(
			"ТаблицаТоварныхПозиций",
			"ЦеныНоменклатуры",,
			ИспользуетсяЦенообразование25));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"(ВЫБОР
			|	КОГДА ЦеныНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|		ТОГДА СправНоменклатура.ЕдиницаИзмерения
			|	ИНАЧЕ ЦеныНоменклатуры.Упаковка
			|	КОНЕЦ)",
			"ЦеныНоменклатуры.Номенклатура"));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"(ВЫБОР
			|	КОГДА ТаблицаТоварныхПозиций.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|		ТОГДА СправНоменклатура.ЕдиницаИзмерения
			|	ИНАЧЕ ТаблицаТоварныхПозиций.Упаковка
			|	КОНЕЦ)",
			"ТаблицаТоварныхПозиций.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	  
	Запрос.Параметры.Вставить("ВидЦен",        ДанныеУчетнойЗаписи.ЦенаПродажи);  
	Запрос.УстановитьПараметр("ДатаЦен",       ТекущаяДата);
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	
	ЦеныТоваров = Запрос.Выполнить().Выгрузить();
	
	Если ЦеныТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	offers = Новый Массив;
	
	Для каждого Стр Из ЦеныТоваров Цикл
		UpdatePriceWithDiscountDTO            = Новый Структура("currencyId, value");
		UpdatePriceWithDiscountDTO.currencyId = "RUR";
		UpdatePriceWithDiscountDTO.value      = Формат(Стр.Цена, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		
		UpdateBusinessOfferPriceDTO         = Новый Структура("offerId, price");
		UpdateBusinessOfferPriceDTO.offerId = Стр.ИдентификаторПредложения;
		UpdateBusinessOfferPriceDTO.price   = UpdatePriceWithDiscountDTO;
		
		offers.Добавить(UpdateBusinessOfferPriceDTO);
	КонецЦикла;
	
	Попытка
		Организация = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизацииОрганизация();
		
		Если Организация <> Неопределено И ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
			ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизации(Организация);
		КонецЕсли;
		
		ДанныеПриложения  = ДанныеПриложения();
		Сервер            = СерверПартнерскогоAPI(Ложь);
		ИмяМетода         = "/offer-prices/updates.json";  
		АдресРесурса      = "/" + ДанныеУчетнойЗаписи.ИдентификаторКабинета + ИмяМетода;
		
		ИнтернетПрокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,, ИнтернетПрокси, 180, СоединениеOpenSSL);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type",  "application/json");
		Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + ДанныеПриложения.IDПриложения);
		
		ДанныеЗапроса = Новый Структура;
		ДанныеЗапроса.Вставить("offers", offers);
		ТелоЗапроса = ВJSON(ДанныеЗапроса);
		
		HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
		
		HTTPОтвет    = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		КодСостояния = HTTPОтвет.КодСостояния;
		СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		Результат    = ИзJSON(СтрокаОтвета);
		
		Если КодСостояния = 200 И Результат.status = "OK" Тогда
			ОбновитьДатуУстановкиЦены(ЦеныТоваров);
			
		Иначе
			Если Результат.Свойство("status") И Результат.status = "ERROR" Тогда
				ОписаниеОшибок = ТекстОшибки(Результат.errors);
			Иначе
				ОписаниеОшибок = ""; 
			КонецЕсли;
			
			Отказ = Истина;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка выполнения запроса %1: %2%3'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				Сервер + АдресРесурса, 
				ОписаниеОшибок,
				СтрокаОтвета);
				
			ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");	
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстОшибки);
		КонецЕсли;
		
	Исключение 
		Отказ = Истина;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует соединение с сервером %1 по причине: %2'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Сервер,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
			
		ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");	
		ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры	 

Процедура ОбновитьДатуУстановкиЦены(ЦеныТоваров)
	
	Для каждого Стр Из ЦеныТоваров Цикл
			Набор = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
			СтруктураИзмерений = ПолучитьСтруктуруИзмеренийПоИдентификаторуПлощадки(Стр.ИдентификаторПредложения);
			Набор.Отбор.Номенклатура.Установить(СтруктураИзмерений.Номенклатура);
			Набор.Отбор.Характеристика.Установить(СтруктураИзмерений.Характеристика);
			Набор.Отбор.Упаковка.Установить(СтруктураИзмерений.Упаковка);
			Набор.Прочитать();
			Если Набор.Количество() Тогда
				Запись = Набор[0];
				Запись.ДатаУстановкиЦены = ТекущаяДатаСеанса();
				Запись.ЦенаПродажи = Стр.Цена;
				Набор.Записать();
			КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСтатусыНаМодерации(Номенклатура, Характеристика, Упаковка, ИнформацияОТоваре)
	
	Если НЕ ИнформацияОТоваре.offer.Свойство("cardStatus") Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет");
		ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура",   Номенклатура);
		ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика", Характеристика);
		ЭлементБлокировкиДанных.УстановитьЗначение("Упаковка",       Упаковка);
		БлокировкаДанных.Заблокировать();

		НаборЗаписей = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		НаборЗаписей.Отбор.Характеристика.Установить(Характеристика);
		НаборЗаписей.Отбор.Упаковка.Установить(Упаковка);
		НаборЗаписей.Прочитать();

		Если НаборЗаписей.Количество() > 0 Тогда
			Запись = НаборЗаписей[0];
			Если ИнформацияОТоваре.Свойство("mapping") Тогда   
				Если ИнформацияОТоваре.mapping.Свойство("marketSku") Тогда  
					Запись.ИдентификаторТовараПлощадки = Формат(ИнформацияОТоваре.mapping.marketSku, "ЧН=; ЧГ=0"); 
				КонецЕсли;
			КонецЕсли;
			СтатусСОписанием      = ПолучитьСтатусМодерацииСОписанием(ИнформацияОТоваре.offer.cardStatus, Запись.Статус);
			Запись.Статус         = СтатусСОписанием.Статус;
			Запись.ОписаниеОшибки = СтатусСОписанием.ОписаниеОшибки;
			
			НаборЗаписей.Записать();
		КонецЕсли;

		ЗафиксироватьТранзакцию();
						
	Исключение
		ОтменитьТранзакцию();
		ТекстОписанияСобытия = НСтр("ru = 'Ошибка записи статуса публикации'");
		ЗаписьЖурналаРегистрации(ТекстОписанияСобытия,
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры     

// Определяет расширенное описание статуса публикации товарной позиции.
//
// Параметры:
//   СтатусПубликации - Строка - статус публикации товара (OfferProcessingStatusType);
//   ТекущийСтатус    - ПеречислениеСсылка.СтатусыВыгрузкиТоваровЯндексМаркет - текущий статус товарной позиции;
//   ПричиныОтказа    - Массив Из Структура - причины, по которым товар не прошел модерацию (OfferProcessingNoteDTO):
//     * type           - Строка - тип причины, по которой товар не прошел модерацию;
//     * payload        - Строка - дополнительная информация о причине отклонения товара.
//
Функция ПолучитьСтатусМодерацииСОписанием(СтатусПубликации, ТекущийСтатус, ПричиныОтказа = Неопределено)
	
	Структура = Новый Структура("Статус, ОписаниеОшибки");
	
	Если СтатусПубликации = "READY" Тогда
		// Товар прошел модерацию. Чтобы разместить его на Маркете, установите для него цену
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена; 
		Структура.ОписаниеОшибки = "";
		
	ИначеЕсли СтатусПубликации = "IN_WORK" Тогда
		// Товар проходит модерацию. Это занимает несколько дней
		Если ТекущийСтатус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации Тогда
			Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации; 
		
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОжидаетМодерации Тогда
			Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации; 
		КонецЕсли;
		
	ИначеЕсли СтатусПубликации = "NEED_CONTENT" Тогда
		// Для товара без SKU на Маркете marketSku нужно найти карточку самостоятельно (через API или личный кабинет магазина) или создать ее, если товар еще не продается на Маркете
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = НСтр("ru = 'Для товара не указан SKU на Яндексе, и сотрудники Маркета не смогли привязать его к карточке. Найдите карточку товара самостоятельно в поиске по разделу ""Покупки"" или создайте ее, если товар еще не продается на Маркете.'");
		
	ИначеЕсли СтатусПубликации = "NEED_INFO" Тогда
		// Товар не прошел модерацию из-за ошибок или недостающих сведений в описании товара. Информация о причинах отклонения возвращается в параметре notes
		ОписаниеОшибки = НСтр("ru = 'Вы указали для товара неверную или недостаточную информацию.'");
		
		Если ЗначениеЗаполнено(ПричиныОтказа) Тогда
			Если ТипЗнч(ПричиныОтказа) = Тип("Строка") Тогда 
				ОписаниеОшибки = ОписаниеОшибки + " " + ПричиныОтказа;
				
			ИначеЕсли ТипЗнч(ПричиныОтказа) = Тип("Массив") Тогда 
				Для каждого ЭлементКоллекции Из ПричиныОтказа Цикл
					Если ЭлементКоллекции.type = "ASSORTMENT" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Товар производится в разных вариантах. Каждый из них нужно описать как отдельный товар'");
					ИначеЕсли ЭлементКоллекции.type = "CANCELLED" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Товар отозван с модерации по вашей инициативе'");
					ИначеЕсли ЭлементКоллекции.type = "CONFLICTING_INFORMATION" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Вы предоставили противоречивую информацию о товаре'");
					ИначеЕсли ЭлементКоллекции.type = "DEPARTMENT_FROZEN" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Правила размещения товаров в данной категории перерабатываются, поэтому товар пока не может пройти модерацию'");
					ИначеЕсли ЭлементКоллекции.type = "INCORRECT_INFORMATION" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Информация о товаре, которую вы предоставили, противоречит описанию от производителя'");
					ИначеЕсли ЭлементКоллекции.type = "LEGAL_CONFLICT" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Товар не прошел модерацию по юридическим причинам. Например, он официально не продается в России или у вас нет разрешения на его продажу'");
					ИначеЕсли ЭлементКоллекции.type = "NEED_CLASSIFICATION_INFORMATION" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Информации о товаре, которую вы предоставили, не хватает, чтобы отнести его к категории. Проверьте, что правильно указали название, категорию, производителя и страны производства товара, а также URL изображений или страниц с описанием, по которым можно идентифицировать товар'");
					ИначеЕсли ЭлементКоллекции.type = "NEED_INFORMATION" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Товар раньше не продавался в России и пока не размещается на Маркете. Для него можно создать карточку'");
					ИначеЕсли ЭлементКоллекции.type = "NEED_PICTURES" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Для идентификации товара нужны его изображения. Отправьте URL изображений товара или загрузите обновленный каталог через личный кабинет магазина'");
					ИначеЕсли ЭлементКоллекции.type = "NEED_VENDOR" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Неверно указан производитель товара'");
					ИначеЕсли ЭлементКоллекции.type = "NO_CATEGORY, NO_KNOWLEDGE" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Товары из указанной категории пока не размещаются на Маркете. Если категория появится, товар будет снова отправлен на модерацию'");
					ИначеЕсли ЭлементКоллекции.type = "NO_PARAMETERS_IN_SHOP_TITLE" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Товар производится в разных вариантах, и из указанного названия непонятно, о каком идет речь'");
					ИначеЕсли ЭлементКоллекции.type = "NO_SIZE_MEASURE" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Для этого товара нужна размерная сетка. Отправьте ее в службу поддержки или вашему менеджеру'");
					ИначеЕсли ЭлементКоллекции.type = "UNKNOWN" Тогда
						ОписаниеОшибки = НСтр("ru = 'Товар не прошел модерацию по другой причине. Обратитесь в службу поддержки или к вашему менеджеру'");
					КонецЕсли;
					
					Если ЭлементКоллекции.Свойство("payload") И ЗначениеЗаполнено(ЭлементКоллекции.payload) Тогда
						ОписаниеОшибки = ОписаниеОшибки + " (" + ЭлементКоллекции.payload + ")";
					КонецЕсли;
					ОписаниеОшибки = ОписаниеОшибки + ".";
				КонецЦикла;
			Иначе
				ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Уточните входные данные запроса и отправьте связь на модерацию повторно.'");
			КонецЕсли;
		КонецЕсли;	
			
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = ОписаниеОшибки;
		
	ИначеЕсли СтатусПубликации = "REJECTED" Тогда   
		// Товар не прошел модерацию, так как Маркет не планирует размещать подобные товары
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = НСтр("ru = 'В ближайшее время Маркет не планирует размещать товары данной категории. Если у вас есть вопросы по категориям товаров, размещаемым на Маркете, обратитесь в службу поддержки.'");
		
	ИначеЕсли СтатусПубликации = "SUSPENDED" Тогда                                                   
		// Товар не прошел модерацию, так как Маркет пока не размещает подобные товары
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОжидаетМодерации;
		Структура.ОписаниеОшибки = НСтр("ru = 'Маркет пока не размещает товары данной категории, но начнет в ближайшее время. После этого товар автоматически отправится на модерацию, и статус изменится на IN_WORK. Чтобы уточнить сроки появления категорий товаров на Маркете, обратитесь в службу поддержки.'");
	КонецЕсли;
	
	Если СтатусПубликации = "HAS_CARD_CAN_UPDATE_PROCESSING" 
		 ИЛИ СтатусПубликации = "NO_CARD_PROCESSING" Тогда 
		// Изменения на проверке
		Если ТекущийСтатус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации Тогда
			Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации; 
		
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОжидаетМодерации Тогда
			Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации; 
		КонецЕсли;

	ИначеЕсли СтатусПубликации = "NO_CARD_ADD_TO_CAMPAIGN" Тогда 
		// Разместите товар в магазине
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена; 
		Структура.ОписаниеОшибки = "";

	ИначеЕсли СтатусПубликации = "NO_CARD_MARKET_WILL_CREATE" Тогда 
		// Создаст Маркет
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОжидаетМодерации;
		Структура.ОписаниеОшибки = НСтр("ru = 'Вы добавили товар, который пока не продавался на Маркете. Карточки для товаров этой категории могут создавать только сотрудники Маркета. Обычно создание карточки занимает не больше двух дней.'");

	ИначеЕсли СтатусПубликации = "HAS_CARD_CAN_NOT_UPDATE" Тогда
		// Карточка Маркета
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = НСтр("ru = 'Напрямую управлять карточкой с таким статусом нельзя - вы можете менять только условия продажи товара, его вес и габариты.
											  |Если нужно изменить описание, изображения или другие характеристики товара — напишите в службу поддержки с помощью кнопки Помощь с карточкой на странице товара.'");
		
	ИначеЕсли СтатусПубликации = "NO_CARD_NEED_CONTENT" Тогда 
		// Создайте карточку
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = НСтр("ru = 'В категории есть дополнительные поля, без которых карточку нельзя создать. Заполните характеристики на странице товара или загрузите информацию для всех товаров, используя Excel-шаблон категории или конвертер контента.'");

	ИначеЕсли СтатусПубликации = "NO_CARD_ERRORS" Тогда 
		// Не создана из-за ошибки
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = НСтр("ru = 'Маркет обнаружил ошибку в данных о товаре, поэтому создать карточку не удалось.'");

	ИначеЕсли СтатусПубликации = "HAS_CARD_CAN_UPDATE" Тогда 
		// Можно дополнить
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена; 
		Структура.ОписаниеОшибки = НСтр("ru = 'Карточку можно дополнить недостающей информацией. 
											  |Если на карточке мало данных - товар сложно найти в поиске и с помощью фильтров на Маркете, а покупателям будет трудно принять решение о покупке.
											  |Дополните карточку товара и Маркет за свой счет предложит покупателям кешбэк на ваши товары.'");
		
	ИначеЕсли СтатусПубликации = "HAS_CARD_CAN_UPDATE_ERRORS" Тогда 
		// Изменения не приняты
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = НСтр("ru = 'Вы отредактировали карточку, но Маркет нашел ошибки в измененных данных - их нужно исправить. Карточка пока остается в том же виде, что была до редактирования.'");
	КонецЕсли;
	
	// Прочее
	Если НЕ ЗначениеЗаполнено(Структура.Статус) Тогда
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена; 
		Структура.ОписаниеОшибки = НСтр("ru = 'Товар не прошел модерацию по неустановленной причине. Обратитесь в службу поддержки или к вашему менеджеру.'");
	КонецЕсли;
	
	Возврат Структура;

КонецФункции

Функция ПолучитьРазницуОстатковТовараДляВыгрузки(МенеджерВТ) 
	
	ЭтоПроизводительныйРежим = РаспределениеЗапасов.ЭтоПроизводительныйРежим();  
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ЭтоПроизводительныйРежим",ЭтоПроизводительныйРежим); 
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 2000
       |	Запасы.Номенклатура КАК Номенклатура,
       |	Запасы.Характеристика КАК Характеристика,
       |	Запасы.Склад КАК Склад,
       |	Запасы.ВНаличииОстаток - Запасы.РезервироватьНаСкладеОстаток - Запасы.РезервироватьПоМереПоступленияОстаток КАК Остаток,
	   |	ЕСТЬNULL(ОстаткиТоваровМаркетплейсов.Количество,0) КАК ОстатокВыгруженный
       |ИЗ
       |	РегистрНакопления.ЗапасыИПотребности.Остатки(
       |			,
       |			(Номенклатура, Характеристика, Склад, Назначение) В
       |				(ВЫБРАТЬ
       |					Фильтр.Номенклатура КАК Номенклатура,
       |					Фильтр.Характеристика КАК Характеристика,
       |					Фильтр.Склад КАК Склад,
       |					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение
       |				ИЗ
       |					ВтТовары КАК Фильтр)) КАК Запасы
	   |					ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.ОстаткиТоваровМаркетплейсов КАК ОстаткиТоваровМаркетплейсов
	   |					ПО Запасы.Номенклатура = ОстаткиТоваровМаркетплейсов.Номенклатура
       |						И Запасы.Характеристика = ОстаткиТоваровМаркетплейсов.Характеристика
       |						И Запасы.Склад = ОстаткиТоваровМаркетплейсов.Склад  
       |
       |ГДЕ
       |	&ЭтоПроизводительныйРежим 
	   |	И ((Запасы.ВНаличииОстаток - Запасы.РезервироватьНаСкладеОстаток - Запасы.РезервироватьПоМереПоступленияОстаток)<>
	   |	ЕСТЬNULL(ОстаткиТоваровМаркетплейсов.Количество,0))		
       |
       |ОБЪЕДИНИТЬ ВСЕ
       |
 	   |ВЫБРАТЬ
	   |	Товары.Номенклатура,
	   |	Товары.Характеристика,
	   |	Товары.Склад,
	   |	СУММА(ЕСТЬNULL(ОстаткиНаСкладе.Свободно,0)),
	   |    СУММА(ЕСТЬNULL(ОстаткиТоваровМаркетплейсов.Количество,0))
	   |ИЗ
	   |	ВтТовары КАК Товары
	   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК ОстаткиНаСкладе
	   |		ПО Товары.Номенклатура = ОстаткиНаСкладе.Номенклатура
	   |			И Товары.Характеристика = ОстаткиНаСкладе.Характеристика
	   |			И Товары.Склад = ОстаткиНаСкладе.Склад
	   |			И ОстаткиНаСкладе.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	   |			И ОстаткиНаСкладе.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
	   |				ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.ОстаткиТоваровМаркетплейсов КАК ОстаткиТоваровМаркетплейсов
	   |				ПО  Товары.Номенклатура = ОстаткиТоваровМаркетплейсов.Номенклатура
	   |					И Товары.Характеристика = ОстаткиТоваровМаркетплейсов.Характеристика
	   |					И Товары.Склад = ОстаткиТоваровМаркетплейсов.Склад
	   |					
	   |ГДЕ
	   |	НЕ &ЭтоПроизводительныйРежим
	   |
	   |СГРУППИРОВАТЬ ПО
	   |	Товары.Номенклатура,
	   |	Товары.Характеристика,
	   |	Товары.Склад
	   |ИМЕЮЩИЕ СУММА(ЕСТЬNULL(ОстаткиНаСкладе.Свободно,0))<>СУММА(ЕСТЬNULL(ОстаткиТоваровМаркетплейсов.Количество,0))
	   |;
	   |////////////////////////////////////////////////////////////////////////////////
	   |УНИЧТОЖИТЬ ВтТовары";  
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат; 
	
КонецФункции 

Функция ПолучитьРезультатСУчетомУпаковки(РезультатЗапроса)   
	
	ТабРез = Новый ТаблицаЗначений();
	ТабРез.Колонки.Добавить("sku",Новый ОписаниеТипов("Строка"));
	ТабРез.Колонки.Добавить("warehouseId",Новый ОписаниеТипов("Число"));
	ТабРез.Колонки.Добавить("count",Новый ОписаниеТипов("Число")); 
	ТабРез.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабРез.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТабРез.Колонки.Добавить("Упаковка",Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	Для каждого Стр Из РезультатЗапроса Цикл  
		ОстатокПоПозиции = Стр.Остаток;
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Номенклатура",Стр.Номенклатура);  
		Запрос.Параметры.Вставить("Характеристика",Стр.Характеристика);
		Запрос.Параметры.Вставить("Склад",Стр.Склад);
		Запрос.Параметры.Вставить("ТекущаяДата",ТекущаяДатаСеанса());
		Запрос.Текст = "ВЫБРАТЬ  
					|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура, 
					|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
					|	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка,
					|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК ИдентификаторПубликации,
					|	СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса
					|ИЗ
					|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет,
					|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
					|ГДЕ
					|	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена)
					|	И РАЗНОСТЬДАТ(СтатусыПубликацииТоваровЯндексМаркет.ДатаУстановкиЦены, &ТекущаяДата, ДЕНЬ) < 30
					|	И СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет)
					|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
					|	И ВЫРАЗИТЬ(СоответствияОбъектовМаркетплейсов.Объект1С КАК Справочник.Склады) = &Склад
					|	И СтатусыПубликацииТоваровЯндексМаркет.Номенклатура = &Номенклатура
					|	И СтатусыПубликацииТоваровЯндексМаркет.Характеристика = &Характеристика";
		
		Результат = Запрос.Выполнить().Выгрузить();
		Для каждого Стр Из Результат Цикл   
			
			СтрНов = ТабРез.Добавить();  
			СтрНов.sku = Стр.ИдентификаторПубликации;
			СтрНов.warehouseId = Стр.ИдентификаторОбъектаМаркетплейса;
			КоэффициентУпаковки  = 1;
			Если ЗначениеЗаполнено(Стр.Упаковка) Тогда
				КоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Стр.Упаковка,Стр.Номенклатура); 
			КонецЕсли;
			
			СтрНов.count = ОстатокПоПозиции/КоэффициентУпаковки; 
			СтрНов.Номенклатура = Стр.Номенклатура; 
			СтрНов.Характеристика = Стр.Характеристика;
			СтрНов.Упаковка = Стр.Упаковка;
			ОстатокПоПозиции = ОстатокПоПозиции - СтрНов.count; 
		КонецЦикла;

	КонецЦикла;  
	
	Возврат ТабРез;
	
КонецФункции

Процедура ВыгрузитьОстаткиТоваров() 
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Параметры.Вставить("ТекущаяДата",ТекущаяДатаСеанса());
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 2000
		 |	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
		 |	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
		 |	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка,
		 |	ВЫРАЗИТЬ(СоответствияОбъектовМаркетплейсов.Объект1С КАК Справочник.Склады) КАК Склад
		 |ПОМЕСТИТЬ ВтТовары
		 |ИЗ
		 |	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		 |		ЛЕВОЕ СОЕДИНЕНИЕ 
		 |		РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		 |			ПО ИСТИНА
		 |ГДЕ 
		 |  СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена)
		 |  И НЕ СтатусыПубликацииТоваровЯндексМаркет.ЦенаПродажи=0 
		 |	И СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет)
		 |	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)";
	Результат = Запрос.Выполнить();    
	
	РезультатЗапроса = ПолучитьРазницуОстатковТовараДляВыгрузки(МенеджерВТ); 
	
	РезультатСУчетомУпаковки = ПолучитьРезультатСУчетомУпаковки(РезультатЗапроса); 
 
	Организация = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизацииОрганизация();
	
	Если Организация <> Неопределено И ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда   
		ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизации(Организация);  
	КонецЕсли;
	
	ДанныеПриложения = ДанныеПриложения();
	
	Сервер = СерверПартнерскогоAPI();
	ИмяМетода = "/offers/stocks.json";	
	campaign_id = ДанныеАвторизации.campaign_id;
	Адрес ="/" + campaign_id + ИмяМетода;	
	
	skus = Новый Массив();	
	
	Для каждого Стр Из РезультатСУчетомУпаковки  Цикл
		
		СтруктураОстатков = Новый Структура("sku, warehouseId, items");
		СтруктураОстатков.sku = Стр.sku;  
		СтруктураОстатков.warehouseId = Стр.warehouseId; 
		items = Новый Массив();
		СтруктураПозиции = Новый Структура("type,count,updatedAt"); 
		СтруктураПозиции.type = "FIT";  
		СтруктураПозиции.count = Стр.count;   
		СтруктураПозиции.updatedAt = ЗаписатьДатуJSON(ТекущаяДатаСеанса(), ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.УниверсальнаяДата);
		items.Добавить(СтруктураПозиции);
		СтруктураОстатков.items = items;
		skus.Добавить(СтруктураОстатков);
		
	КонецЦикла;	    
	
	СтруктураДляJSON = Новый Структура();
	СтруктураДляJSON.Вставить("skus",skus);	
	
	Если СтруктураДляJSON<>Неопределено Тогда
		ТелоЗапроса = ИнтеграцияСЯндексМаркетСервер.ВJSON(СтруктураДляJSON);
		
		Попытка	
			ИнтернетПрокси = Неопределено;
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
				МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
				ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
			КонецЕсли;
			СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
			HTTPСоединение = Новый HTTPСоединение(Сервер,,,,ИнтернетПрокси,200,СоединениеOpenSSL);
		Исключение 
			ТекстОписанияСобытия = НСтр("ru = 'Отсутствует соединение с сервером '");
			ТекстОшибки = НСтр("ru = 'Отсутствует соединение с сервером " + Сервер +";'");		
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		КонецПопытки;
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + ДанныеПриложения.IDПриложения);
		
		HTTPЗапрос = Новый HTTPЗапрос(Адрес,Заголовки);
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
		СтруктураОтвета = Новый Структура();
		
		Попытка
			HTTPОтвет = HTTPСоединение.Записать(HTTPЗапрос);  
			СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(СтрокаОтвета);
			КодСостояния = HTTPОтвет.КодСостояния;		
		Исключение 
			ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");	
			ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса: '"+КодСостояния+"; "+ HTTPОтвет.ПолучитьТелоКакСтроку()+";'");
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		КонецПопытки;	
		
		Если КодСостояния= 200 И СтруктураОтвета.status = "OK" Тогда
			ОбновитьДанныеОбОстатках(РезультатЗапроса, РезультатСУчетомУпаковки);
		Иначе
			Если СтруктураОтвета.Свойство("status") И СтруктураОтвета.status = "ERROR" Тогда
				ОписаниеОшибок = ТекстОшибки(СтруктураОтвета.errors);	
			Иначе
				ОписаниеОшибок = ""; 
			КонецЕсли; 	
			ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");
			ТекстОшибки = НСтр("ru = 'Ошибка вызова API Яндекс.Маркет: " + КодСостояния + "; "+ HTTPОтвет.ПолучитьТелоКакСтроку() + "; " + ОписаниеОшибок + ";'");
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры    

Процедура ОтправитьСвязиТоваровНаМодерацию() 
	
 	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 500
		|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
		|	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка,
		|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК offerId,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Марка.Наименование, """") КАК vendor,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Артикул, """") КАК vendorCode,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Производитель.Наименование, """") КАК manufacturer,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.СтранаПроисхождения.Наименование, """") КАК manufacturerCountry,
		|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки КАК marketSku,
		|	СтатусыПубликацииТоваровЯндексМаркет.НаименованиеТовараПлощадки КАК name,
		|	СтатусыПубликацииТоваровЯндексМаркет.НаименованиеКатегорииПлощадки КАК category
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		|ГДЕ
		|	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.УтвержденаРекомендация)";
		
	ВыборкаДанных = Запрос.Выполнить().Выбрать();

	Попытка	  
		Организация = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизацииОрганизация();
		
		Если Организация <> Неопределено И ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
			ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизации(Организация);
		КонецЕсли;
		
		ДанныеПриложения  = ДанныеПриложения();
		Сервер            = СерверПартнерскогоAPI(Ложь);
		ИмяМетода         = "/offer-mappings/update.json";  
		ДанныеУчетнойЗаписи = ДанныеУчетнойЗаписиЯндексМаркет();
		АдресРесурса      = "/" + ДанныеУчетнойЗаписи.ИдентификаторКабинета + ИмяМетода;
		
		ИнтернетПрокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,, ИнтернетПрокси, 180, СоединениеOpenSSL);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type",  "application/json");
		Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + ДанныеПриложения.IDПриложения);
		
		Пока ВыборкаДанных.Следующий() Цикл
	 		UpdateOfferDTO = Новый Структура("offerId, name, category, vendor, vendorCode, barcodes, manufacturer, manufacturerCountries, weightDimensions");
			ЗаполнитьЗначенияСвойств(UpdateOfferDTO, ВыборкаДанных);                                                                                              
			
			barcodes = ПолучитьШтрихКоды(ВыборкаДанных.Номенклатура, ВыборкаДанных.Характеристика);
			UpdateOfferDTO.barcodes = barcodes; 
			
			manufacturerCountries = Новый Массив;
			manufacturerCountries.Добавить(ВыборкаДанных.manufacturerCountry);
			UpdateOfferDTO.manufacturerCountries = manufacturerCountries;
			
			Весогабариты = ПолучитьВесогабариты(ВыборкаДанных.Упаковка);
			UpdateOfferDTO.weightDimensions = Весогабариты;
			
			UpdateMappingDTO           = Новый Структура("marketSku");
			UpdateMappingDTO.marketSku = ВыборкаДанных.marketSku;
			
			UpdateOfferMappingDTO         = Новый Структура("offer, mapping");
			UpdateOfferMappingDTO.offer   = UpdateOfferDTO; 
			UpdateOfferMappingDTO.mapping = UpdateMappingDTO;
			
			offerMappings = Новый Массив;
			offerMappings.Добавить(UpdateOfferMappingDTO);

			ДанныеЗапроса = Новый Структура;
			ДанныеЗапроса.Вставить("offerMappings", offerMappings);
			ТелоЗапроса = ВJSON(ДанныеЗапроса);
			
			HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
			
			HTTPОтвет    = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);  
			КодСостояния = HTTPОтвет.КодСостояния;	
			СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			Результат    = ИзJSON(СтрокаОтвета);
			
			Если КодСостояния = 200 И Результат.status = "OK" Тогда
				ЗаписатьСтатусНаМодерации(ВыборкаДанных.Номенклатура, 
										  ВыборкаДанных.Характеристика, 
										  ВыборкаДанных.Упаковка);
				
			Иначе	
				Если Результат.Свойство("status") И Результат.status = "ERROR" Тогда
 		  			ОбработатьОшибкиПриОтправкеСтатусов(ВыборкаДанных.Номенклатура, 
														ВыборкаДанных.Характеристика, 
														ВыборкаДанных.Упаковка,
														Результат.errors);
				Иначе
 		  			ОбработатьОшибкиПриОтправкеСтатусов(ВыборкаДанных.Номенклатура, 
														ВыборкаДанных.Характеристика, 
														ВыборкаДанных.Упаковка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Исключение 
		Отказ = Истина;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует соединение с сервером %1 по причине: %2'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Сервер,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));   
		ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '");	
		ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстОшибки);
	КонецПопытки;

КонецПроцедуры

Функция ПолучитьШтрихКоды(Номенклатура, Характеристика)
	
	Запрос = Новый Запрос ();
	Запрос.Параметры.Вставить("Номенклатура",Номенклатура);
	Запрос.Параметры.Вставить("Характеристика",Характеристика);
	Запрос.Текст = "ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК barcode,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ШтрихКоды = новый Массив;
	
	Если Результат.Количество()>0 Тогда
		ШтрихКоды = Результат.ВыгрузитьКолонку("barcode");
	КонецЕсли;	
	
	Возврат ШтрихКоды;
КонецФункции
 
#КонецОбласти


