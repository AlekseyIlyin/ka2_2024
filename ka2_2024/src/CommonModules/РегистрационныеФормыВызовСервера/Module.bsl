#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция НачатьПолучениеКодаПодтверждения(ПараметрыВыполнения, Знач УникальныйИдентификатор) Экспорт
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = ПараметрыВыполнения.НаименованиеЗадания;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"РегистрационныеФормы.ОтправитьКодПодтвержденияВФоне",
		ПараметрыВыполнения,
		НастройкиЗапуска);
КонецФункции

Функция ТекстПовторнойОтправкиКодаПодтверждения(СрокДействияКодаПодтверждения) Экспорт
	
	Если Не ЗначениеЗаполнено(СрокДействияКодаПодтверждения) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекущаяДата = УниверсальноеВремя(ТекущаяДатаСеанса(), ЧасовойПоясСеанса());
	РазностьДат = СрокДействияКодаПодтверждения - ТекущаяДата;
	
	Если РазностьДат > 0 Тогда
		Возврат СтрШаблон(НСтр("ru = 'Запросить повторно код можно через %1 сек.'"), РазностьДат);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ТекстПодсказкиНомерТелефона(ИмяФормы) Экспорт
	
	Если СтрНайти(ИмяФормы, "РегистрацияООО") > 0 Тогда
		ТекстПодсказки = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'Телефон указывается в <a href=""ОбразецЗаявленияОРегистрацииОрганизацииЛистИ"">Заявлении о регистрации</a>
			|Например, +7(123)1234567 или 8(123)1234567'"));
	ИначеЕсли СтрНайти(ИмяФормы, "РегистрацияИП") > 0 Тогда
		ТекстПодсказки = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'Телефон указывается в  <a href=""ОбразецЗаявленияОРегистрацииИПЛистБ"">Заявлении о регистрации</a>
			|Например, +7(123)1234567 или 8(123)1234567'"));
	Иначе
		ТекстПодсказки = НСтр("ru = 'Например, +7(123)1234567 или 8(123)1234567'");
	КонецЕсли;
	
	Возврат ТекстПодсказки;
	
КонецФункции

Функция ПроверитьКодПодтверждения(Идентификатор, КодПроверки) Экспорт
	Результат = Ложь;
	
	Если СтрДлина(КодПроверки) < РегистрационныеФормыКлиентСервер.ДлинаКодаПодтверждения() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДанныеПроверки = ДокументооборотРегистрацияВФНС.СервисРегистрацииФНСПроверитьКодПодтверждения(Идентификатор, КодПроверки);
	Если ДанныеПроверки.Выполнено Тогда
		Результат = ДанныеПроверки.Успешно;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не удалось проверить код подтверждения. %1 Попробуйте ещё раз.'"), ДанныеПроверки.Ошибка));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ТаблицаОтсканированныхСтраницДокумента(ВладелецФайла, ВидДокумента) Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы.Описание КАК Описание,
	|	УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы.Наименование КАК ИмяФайла
	|ИЗ
	|	Справочник.УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы КАК УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы
	|ГДЕ
	|	УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И НЕ УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы.ПометкаУдаления
	|	И УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы.Описание ПОДОБНО &ВидДокумента
	|	И УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы.Служебный");
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Запрос.УстановитьПараметр("ВидДокумента", СтрШаблон("%1%%", ВидДокумента));
	
	Результат = НовыйТаблицаОтсканированныхСтраницДокумента();
	ОТЧ = Новый ОписаниеТипов("Число");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НомерСтроки = Результат.Количество() + 1;
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.НомерСтроки = НомерСтроки;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Разложение = СтрРазделить(Выборка.Описание, ",");
		Число = ?(Разложение.Количество() = 2, ОТЧ.ПривестиЗначение(Разложение[1]), 0);
		НоваяСтрока.НомерСтроки = ?(ЗначениеЗаполнено(Число), Число, НоваяСтрока.НомерСтроки);
	КонецЦикла;
	
	Результат.Сортировать("НомерСтроки");
	Для Инд = 1 По Результат.Количество() Цикл 
		Результат[Инд - 1].НомерСтроки = Инд;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ДанныеФайлаДляОткрытия(ПрисоединенныйФайл, ИдентификаторФормы) Экспорт
	ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыДанныхФайла.ИдентификаторФормы = ИдентификаторФормы;
	Возврат РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, ПараметрыДанныхФайла);
КонецФункции

Процедура УдалитьПрикрепленныеФайлы(ВладелецФайла, ВидДокумента) Экспорт
	ПрикрепленныеФайлы = ТаблицаОтсканированныхСтраницДокумента(ВладелецФайла, ВидДокумента);
	Если ЗначениеЗаполнено(ПрикрепленныеФайлы) Тогда
		ИнтерфейсыВзаимодействияБРО.СохранитьСтатусОтправкиУведомления(ВладелецФайла,
			ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусВРаботеСтрокой());
	КонецЕсли;
	ПометитьНаУдалениеПрикрепленныеФайлы(ПрикрепленныеФайлы);
КонецПроцедуры

Функция ДоступенПросмотрЖурналаРегистрации() Экспорт
	Возврат ПравоДоступа("Просмотр", Метаданные.Обработки.ЖурналРегистрации);
КонецФункции

Функция ПрикрепленныеФайлыЗаявления(ПараметрыЗаявления, УникальныйИдентификатор) Экспорт
	Результат = Новый Структура;
	
	ВидыДокументов = ПараметрыЗаявления.ВидыДокументов;
	Для Каждого ТекущийВид Из ВидыДокументов Цикл
		ФайлыДокумента = ТаблицаОтсканированныхСтраницДокумента(ПараметрыЗаявления.Заявление, ТекущийВид.Ключ);
		Результат.Вставить(ТекущийВид.Ключ, АдресаФайловВоВременномХранилище(
			ФайлыДокумента.ВыгрузитьКолонку("Ссылка"), УникальныйИдентификатор));
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция НаименованиеПодписанногоКонтейнера(ПодписанныйКонтейнер) Экспорт
	РеквизитыКонтейнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПодписанныйКонтейнер, "Наименование, Расширение");
	Возврат СтрШаблон("%1.%2", РеквизитыКонтейнера.Наименование, РеквизитыКонтейнера.Расширение);
КонецФункции

Функция ДанныеСостоянияОтправкиДокументов(ЗаявлениеСсылка, ДокументыПодписаны, НетСертификата, ОшибкаПодписания, ЭтоЮрЛицо) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ТекстПодсказки", "");
	Результат.Вставить("Картинка");
	Результат.Вставить("Дополнение", "");
	
	СостояниеОтправкиДокументов = СостояниеОтправкиДокументовВФНС(ЗаявлениеСсылка);
	Если ДокументыПодписаны И СостояниеОтправкиДокументов = ПредопределенноеЗначение("Перечисление.СтатусыОтправки.НеПринят") Тогда
		Результат.ТекстПодсказки = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'При проверке заявления были обнаружены ошибки. Исправьте их и отправьте заявление снова.
			|<a href=""Протокол"">Протокол</a>'"));
		Результат.Картинка = БиблиотекаКартинок.ОшибкаОтправки;
	ИначеЕсли ДокументыПодписаны И СостояниеОтправкиДокументов = ПредопределенноеЗначение("Перечисление.СтатусыОтправки.Сдан") Тогда
		Если ЭтоЮрЛицо Тогда
			Результат.ТекстПодсказки = СтроковыеФункции.ФорматированнаяСтрока(
				НСтр("ru = 'Заявление принято, изменения внесены в реестр.
				|<a href=""ЛистЗаписиЕГР"">Лист записи ЕГРЮЛ</a>'"));
		Иначе
			Результат.ТекстПодсказки = СтроковыеФункции.ФорматированнаяСтрока(
				НСтр("ru = 'Заявление принято, изменения внесены в реестр.
				|<a href=""ЛистЗаписиЕГР"">Лист записи ЕГРИП</a>'"));
		КонецЕсли;
		
		Результат.Картинка = БиблиотекаКартинок.УспешнаяОтправка;
		Результат.Дополнение = НСтр("ru = 'Обновите реквизиты в программе при необходимости.'");
	ИначеЕсли ДокументыПодписаны Тогда
		Результат.ТекстПодсказки = НСтр("ru = 'Заявление успешно отправлено в ИФНС.
			|Срок рассмотрения заявления - до пяти рабочих дней.'");
		Результат.Картинка = БиблиотекаКартинок.УспешнаяОтправка;
		Результат.Дополнение = НСтр("ru = 'Когда вы получите подтверждающие документы, обновите изменения в программе.'");
	ИначеЕсли НетСертификата Тогда
		Результат.ТекстПодсказки = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'На компьютере не установлен сертификат квалифицированной электронной подписи.
			|Если у вас уже есть подпись, <a href=""https://its.1c.ru/db/metod81#content:7688:hdoc"">установите</a> её на локальный компьютер.'"));
		Результат.Картинка = БиблиотекаКартинок.ОшибкаОтправки;
	ИначеЕсли ОшибкаПодписания Тогда
		Результат.ТекстПодсказки = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'При выполнении подписания документов возникли ошибки.
			|<a href=""ЖурналРегистрации"">Подробнее</a>'"));
		Результат.Картинка = БиблиотекаКартинок.ОшибкаОтправки;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ДанныеФайлаОтФНСДляОткрытия(Заявление, ТипФайла, УникальныйИдентификатор) Экспорт
	СвойстваОтправки = ДокументооборотРегистрацияВФНСВызовСервера.СвойстваОтправкиРегистрацииЮЛ(Заявление);
	ЭтапыОтправки = ДокументооборотРегистрацияВФНС.СформироватьЭтапыОтправки(СвойстваОтправки.ОтправкаСсылка);
	
	Результат = НовыеДанныеФайлаОтФНСДляОткрытия();
	Результат.ОтправкаСсылка = СвойстваОтправки.ОтправкаСсылка;
	
	ВидыФайловОбменаСКонтролирующимОрганом = ДокументооборотРегистрацияВФНС.ВидыФайловОбменаСКонтролирующимОрганом();
	Если ВидыФайловОбменаСКонтролирующимОрганом.Свойство(ТипФайла) Тогда
		НазначениеФайла = ВидыФайловОбменаСКонтролирующимОрганом[ТипФайла];
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	Результат.ДанныеДляОткрытия = ДанныеФайловЭтапа(
		ЭтапыОтправки.ПринятВОбработку.Файлы, НазначениеФайла, УникальныйИдентификатор);
	
	Если Не ЗначениеЗаполнено(Результат.ДанныеДляОткрытия) Тогда
		Результат.ДанныеДляОткрытия = ДанныеФайловЭтапа(
			ЭтапыОтправки.Рассмотрение.Файлы, НазначениеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеФайловЭтапа(ФайлыЭтапа, НазначениеФайла, УникальныйИдентификатор)
	Результат = Неопределено;
	
	Для Каждого ТекущийФайл Из ФайлыЭтапа Цикл
		Если НазначениеФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийФайл, "НазначениеФайла") Тогда
			Результат = ДанныеФайлаДляОткрытия(ТекущийФайл, УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция НовыеДанныеФайлаОтФНСДляОткрытия()
	Результат = Новый Структура;
	Результат.Вставить("ОтправкаСсылка", Справочники.ОтправкиРегистрацияЮЛ.ПустаяСсылка());
	Результат.Вставить("ДанныеДляОткрытия", Неопределено);
	Возврат Результат;
КонецФункции

Процедура ПометитьНаУдалениеПрикрепленныеФайлы(ПрикрепленныеФайлы)
	Для Каждого ТекущийФайл Из ПрикрепленныеФайлы Цикл
		СпрОбъект = ТекущийФайл.Ссылка.ПолучитьОбъект();
		СпрОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
КонецПроцедуры

Функция НовыйТаблицаОтсканированныхСтраницДокумента()
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Ссылка",
		Новый ОписаниеТипов("СправочникСсылка.УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы"));
	Результат.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	Результат.Колонки.Добавить("НомерДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(2));
	Результат.Колонки.Добавить("ИмяФайла", ОбщегоНазначения.ОписаниеТипаСтрока(
		Метаданные.Справочники.УведомлениеОСпецрежимахНалогообложенияПрисоединенныеФайлы.ДлинаНаименования));
	
	Возврат Результат;
КонецФункции

Функция АдресаФайловВоВременномХранилище(ПрикрепленныеФайлы, УникальныйИдентификатор)
	Результат = Новый Массив;
	
	Для Каждого ТекущийФайл Из ПрикрепленныеФайлы Цикл
		ДанныеФайла = ДанныеФайлаДляОткрытия(ТекущийФайл, УникальныйИдентификатор);
		Результат.Добавить(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция СостояниеОтправкиДокументовВФНС(ЗаявлениеСсылка)
	СвойстваОтправки = ДокументооборотРегистрацияВФНСВызовСервера.СвойстваЗаявленияРегистрацииЮЛ(ЗаявлениеСсылка);
	Возврат СвойстваОтправки.СтатусОтправки;
КонецФункции

#КонецОбласти