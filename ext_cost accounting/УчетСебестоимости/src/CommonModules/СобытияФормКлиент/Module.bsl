////////////////////////////////////////////////////////////////////////////////
// Содержит события форм, вызываемые на клиенте
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область СобытияЭлементовФорм

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный     - элемент-источник события "При изменении".
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
&После("ПриИзмененииЭлемента")
Процедура усПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	усОбработатьФормуДокументаРеализацияТоваровУслуг(Форма, Элемент);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция усОбновитьДанныеПоПартиям(Форма, Элемент)
	Возврат усОбслуживаниеФормВызовСервера.усЭтоФормаДляОтображенияСтоимости(Форма.ИмяФормы)
		И Элемент.Имя = "Товары" 
		И Элемент.ТекущиеДанные <> Неопределено;
КонецФункции

Процедура усОбработатьФормуДокументаРеализацияТоваровУслуг(Форма, Элемент)
	Если усОбновитьДанныеПоПартиям(Форма, Элемент) Тогда
		усОбслуживаниеФормВызовСервера.ус_ОбновитьСебестоимостьМаржу(Форма);
	КонецЕсли;
	
//	Возврат;
//	

//	Номенклатура = Элемент.ТекущиеДанные.Номенклатура;
//		
//	ОстаткиПоПартиям = усОстаткиПоПартиям(Форма, Номенклатура);
//	Если Не ЗначениеЗаполнено(ОстаткиПоПартиям) Тогда
//		Возврат;
//	КонецЕсли; 
//	
//	ТаблицаТовары = Форма.Объект.Товары;
//	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
//		
//		Если СтрокаТовары.Номенклатура <> Номенклатура Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		ОстатокКоличество = СтрокаТовары.Количество;
//		
//		КоличествоПоПартиям = 0;
//		СтоимостьПоПартиям = 0;
//		
//		Для Каждого СтрокаПартии Из ОстаткиПоПартиям Цикл
//			
//			Если ОстатокКоличество = 0 Тогда
//				Прервать;
//			КонецЕсли;
//			
//			Если СтрокаПартии.КоличествоОстаток = 0 Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			КоличествоСписания = Мин(ОстатокКоличество, СтрокаПартии.КоличествоОстаток);
//			
//			СтоимостьСписания = ?(КоличествоСписания = СтрокаПартии.КоличествоОстаток,
//				СтрокаПартии.СтоимостьОстаток,
//				СтрокаПартии.СтоимостьОстаток / СтрокаПартии.КоличествоОстаток * КоличествоСписания);
//			
//			КоличествоПоПартиям = КоличествоПоПартиям + КоличествоСписания;
//			СтоимостьПоПартиям = СтоимостьПоПартиям + СтоимостьСписания;
//			
//			СтрокаПартии.КоличествоОстаток = СтрокаПартии.КоличествоОстаток - КоличествоСписания;
//			СтрокаПартии.СтоимостьОстаток = СтрокаПартии.СтоимостьОстаток - СтоимостьСписания; 
//			
//			ОстатокКоличество = ОстатокКоличество - КоличествоСписания;
//			
//		КонецЦикла;
//		
//		ВсеПартииРаспределены = ОстатокКоличество = 0; 
//		Если ВсеПартииРаспределены И КоличествоПоПартиям > 0 Тогда
//			СтрокаТовары.усУчетнаяЦена = СтоимостьПоПартиям / КоличествоПоПартиям;
//			СтрокаТовары.усМаржа = СтрокаТовары.СуммаСНДС - СтоимостьПоПартиям;
//		Иначе
//			СтрокаТовары.усУчетнаяЦена = 0;
//			СтрокаТовары.усМаржа = 0;
//		КонецЕсли;
//		
//	КонецЦикла;
//	
КонецПроцедуры

//Функция усОстаткиПоПартиям(Форма, Номенклатура)
//	Перем ТаблицаПартий;
//	
//	ОбъектФормы = Форма.Объект;
//	
//	ВыборкаПартийПоНоменклатуре = усОбслуживаниеФормВызовСервера.ОстаткиПартийПоНоменклатуре(ОбъектФормы.Ссылка, ОбъектФормы.Дата, ОбъектФормы.Склад, Номенклатура);
//	ВыборкаПартийПоНоменклатуре.Сбросить();
//	Если ВыборкаПартийПоНоменклатуре.НайтиСледующий(СтрокаТовары.Номенклатура, "Номенклатура") Тогда	
//		ТаблицаПартий = СобытияФорм.усНоваяТаблицаПартий(ВыборкаПартийПоНоменклатуре);
//	КонецЕсли;
//	
//	Возврат ТаблицаПартий;
//КонецФункции

#КонецОбласти
